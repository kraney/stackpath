/*
 * Accounts and Users
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package accounts_and_users

import (
	"encoding/json"
)

// PolicyBinding An assignment of members to roles
type PolicyBinding struct {
	// The name of the role for this binding.  This is either roles/<name> or accounts/<id>/roles/<name>.
	Role *string `json:"role,omitempty"`
	// The members assigned to the roles in this binding.  This is user:<name>.
	Members *[]string `json:"members,omitempty"`
}

// NewPolicyBinding instantiates a new PolicyBinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyBinding() *PolicyBinding {
	this := PolicyBinding{}
	return &this
}

// NewPolicyBindingWithDefaults instantiates a new PolicyBinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyBindingWithDefaults() *PolicyBinding {
	this := PolicyBinding{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *PolicyBinding) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyBinding) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *PolicyBinding) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *PolicyBinding) SetRole(v string) {
	o.Role = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *PolicyBinding) GetMembers() []string {
	if o == nil || o.Members == nil {
		var ret []string
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyBinding) GetMembersOk() (*[]string, bool) {
	if o == nil || o.Members == nil {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *PolicyBinding) HasMembers() bool {
	if o != nil && o.Members != nil {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []string and assigns it to the Members field.
func (o *PolicyBinding) SetMembers(v []string) {
	o.Members = &v
}

func (o PolicyBinding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyBinding struct {
	value *PolicyBinding
	isSet bool
}

func (v NullablePolicyBinding) Get() *PolicyBinding {
	return v.value
}

func (v *NullablePolicyBinding) Set(val *PolicyBinding) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyBinding) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyBinding(val *PolicyBinding) *NullablePolicyBinding {
	return &NullablePolicyBinding{value: val, isSet: true}
}

func (v NullablePolicyBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
