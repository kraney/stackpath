/*
 * Web Application Firewall
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package waf

import (
	"encoding/json"
)

// ConditionFileExtensionCondition Match the incoming file extension
type ConditionFileExtensionCondition struct {
	// The file extension, with or without a period character, to match against
	FileExtension *string `json:"fileExtension,omitempty"`
}

// NewConditionFileExtensionCondition instantiates a new ConditionFileExtensionCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionFileExtensionCondition() *ConditionFileExtensionCondition {
	this := ConditionFileExtensionCondition{}
	return &this
}

// NewConditionFileExtensionConditionWithDefaults instantiates a new ConditionFileExtensionCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionFileExtensionConditionWithDefaults() *ConditionFileExtensionCondition {
	this := ConditionFileExtensionCondition{}
	return &this
}

// GetFileExtension returns the FileExtension field value if set, zero value otherwise.
func (o *ConditionFileExtensionCondition) GetFileExtension() string {
	if o == nil || o.FileExtension == nil {
		var ret string
		return ret
	}
	return *o.FileExtension
}

// GetFileExtensionOk returns a tuple with the FileExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionFileExtensionCondition) GetFileExtensionOk() (*string, bool) {
	if o == nil || o.FileExtension == nil {
		return nil, false
	}
	return o.FileExtension, true
}

// HasFileExtension returns a boolean if a field has been set.
func (o *ConditionFileExtensionCondition) HasFileExtension() bool {
	if o != nil && o.FileExtension != nil {
		return true
	}

	return false
}

// SetFileExtension gets a reference to the given string and assigns it to the FileExtension field.
func (o *ConditionFileExtensionCondition) SetFileExtension(v string) {
	o.FileExtension = &v
}

func (o ConditionFileExtensionCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileExtension != nil {
		toSerialize["fileExtension"] = o.FileExtension
	}
	return json.Marshal(toSerialize)
}

type NullableConditionFileExtensionCondition struct {
	value *ConditionFileExtensionCondition
	isSet bool
}

func (v NullableConditionFileExtensionCondition) Get() *ConditionFileExtensionCondition {
	return v.value
}

func (v *NullableConditionFileExtensionCondition) Set(val *ConditionFileExtensionCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionFileExtensionCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionFileExtensionCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionFileExtensionCondition(val *ConditionFileExtensionCondition) *NullableConditionFileExtensionCondition {
	return &NullableConditionFileExtensionCondition{value: val, isSet: true}
}

func (v NullableConditionFileExtensionCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionFileExtensionCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
