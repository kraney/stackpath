/*
 * Web Application Firewall
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package waf

import (
	"encoding/json"
)

// EventStatistics A collection of common event metrics
type EventStatistics struct {
	Count *StatisticsMetrics `json:"count,omitempty"`
	Blocked *StatisticsMetrics `json:"blocked,omitempty"`
}

// NewEventStatistics instantiates a new EventStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventStatistics() *EventStatistics {
	this := EventStatistics{}
	return &this
}

// NewEventStatisticsWithDefaults instantiates a new EventStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventStatisticsWithDefaults() *EventStatistics {
	this := EventStatistics{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *EventStatistics) GetCount() StatisticsMetrics {
	if o == nil || o.Count == nil {
		var ret StatisticsMetrics
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatistics) GetCountOk() (*StatisticsMetrics, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *EventStatistics) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given StatisticsMetrics and assigns it to the Count field.
func (o *EventStatistics) SetCount(v StatisticsMetrics) {
	o.Count = &v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *EventStatistics) GetBlocked() StatisticsMetrics {
	if o == nil || o.Blocked == nil {
		var ret StatisticsMetrics
		return ret
	}
	return *o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatistics) GetBlockedOk() (*StatisticsMetrics, bool) {
	if o == nil || o.Blocked == nil {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *EventStatistics) HasBlocked() bool {
	if o != nil && o.Blocked != nil {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given StatisticsMetrics and assigns it to the Blocked field.
func (o *EventStatistics) SetBlocked(v StatisticsMetrics) {
	o.Blocked = &v
}

func (o EventStatistics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Blocked != nil {
		toSerialize["blocked"] = o.Blocked
	}
	return json.Marshal(toSerialize)
}

type NullableEventStatistics struct {
	value *EventStatistics
	isSet bool
}

func (v NullableEventStatistics) Get() *EventStatistics {
	return v.value
}

func (v *NullableEventStatistics) Set(val *EventStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableEventStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableEventStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventStatistics(val *EventStatistics) *NullableEventStatistics {
	return &NullableEventStatistics{value: val, isSet: true}
}

func (v NullableEventStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
