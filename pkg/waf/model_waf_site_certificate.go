/*
 * Web Application Firewall
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package waf

import (
	"encoding/json"
)

// WafSiteCertificate An SSL certificate and its relationship with its associated site
type WafSiteCertificate struct {
	// Whether or not a site's SSL certificate is valid  An SSL certificate is valid when a hostname associated with the site is covered by the certificate.
	Valid *bool `json:"valid,omitempty"`
	Certificate *WafCertificate `json:"certificate,omitempty"`
}

// NewWafSiteCertificate instantiates a new WafSiteCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWafSiteCertificate() *WafSiteCertificate {
	this := WafSiteCertificate{}
	return &this
}

// NewWafSiteCertificateWithDefaults instantiates a new WafSiteCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWafSiteCertificateWithDefaults() *WafSiteCertificate {
	this := WafSiteCertificate{}
	return &this
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *WafSiteCertificate) GetValid() bool {
	if o == nil || o.Valid == nil {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafSiteCertificate) GetValidOk() (*bool, bool) {
	if o == nil || o.Valid == nil {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *WafSiteCertificate) HasValid() bool {
	if o != nil && o.Valid != nil {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *WafSiteCertificate) SetValid(v bool) {
	o.Valid = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *WafSiteCertificate) GetCertificate() WafCertificate {
	if o == nil || o.Certificate == nil {
		var ret WafCertificate
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafSiteCertificate) GetCertificateOk() (*WafCertificate, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *WafSiteCertificate) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given WafCertificate and assigns it to the Certificate field.
func (o *WafSiteCertificate) SetCertificate(v WafCertificate) {
	o.Certificate = &v
}

func (o WafSiteCertificate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Valid != nil {
		toSerialize["valid"] = o.Valid
	}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	return json.Marshal(toSerialize)
}

type NullableWafSiteCertificate struct {
	value *WafSiteCertificate
	isSet bool
}

func (v NullableWafSiteCertificate) Get() *WafSiteCertificate {
	return v.value
}

func (v *NullableWafSiteCertificate) Set(val *WafSiteCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableWafSiteCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableWafSiteCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWafSiteCertificate(val *WafSiteCertificate) *NullableWafSiteCertificate {
	return &NullableWafSiteCertificate{value: val, isSet: true}
}

func (v NullableWafSiteCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWafSiteCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
