/*
 * Web Application Firewall
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package waf

import (
	"encoding/json"
)

// ConditionContentTypeCondition Match the requested Content-Type
type ConditionContentTypeCondition struct {
	// The Content-Type to match against
	ContentType *string `json:"contentType,omitempty"`
}

// NewConditionContentTypeCondition instantiates a new ConditionContentTypeCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionContentTypeCondition() *ConditionContentTypeCondition {
	this := ConditionContentTypeCondition{}
	return &this
}

// NewConditionContentTypeConditionWithDefaults instantiates a new ConditionContentTypeCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionContentTypeConditionWithDefaults() *ConditionContentTypeCondition {
	this := ConditionContentTypeCondition{}
	return &this
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *ConditionContentTypeCondition) GetContentType() string {
	if o == nil || o.ContentType == nil {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionContentTypeCondition) GetContentTypeOk() (*string, bool) {
	if o == nil || o.ContentType == nil {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *ConditionContentTypeCondition) HasContentType() bool {
	if o != nil && o.ContentType != nil {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *ConditionContentTypeCondition) SetContentType(v string) {
	o.ContentType = &v
}

func (o ConditionContentTypeCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContentType != nil {
		toSerialize["contentType"] = o.ContentType
	}
	return json.Marshal(toSerialize)
}

type NullableConditionContentTypeCondition struct {
	value *ConditionContentTypeCondition
	isSet bool
}

func (v NullableConditionContentTypeCondition) Get() *ConditionContentTypeCondition {
	return v.value
}

func (v *NullableConditionContentTypeCondition) Set(val *ConditionContentTypeCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionContentTypeCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionContentTypeCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionContentTypeCondition(val *ConditionContentTypeCondition) *NullableConditionContentTypeCondition {
	return &NullableConditionContentTypeCondition{value: val, isSet: true}
}

func (v NullableConditionContentTypeCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionContentTypeCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
