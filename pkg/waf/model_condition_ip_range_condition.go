/*
 * Web Application Firewall
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package waf

import (
	"encoding/json"
)

// ConditionIpRangeCondition Match the incoming request against a range of IPv4 addresses
type ConditionIpRangeCondition struct {
	// The lower bound IPv4 address to match against
	LowerBound *string `json:"lowerBound,omitempty"`
	// The upper bound IPv4 address to match against
	UpperBound *string `json:"upperBound,omitempty"`
}

// NewConditionIpRangeCondition instantiates a new ConditionIpRangeCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionIpRangeCondition() *ConditionIpRangeCondition {
	this := ConditionIpRangeCondition{}
	return &this
}

// NewConditionIpRangeConditionWithDefaults instantiates a new ConditionIpRangeCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionIpRangeConditionWithDefaults() *ConditionIpRangeCondition {
	this := ConditionIpRangeCondition{}
	return &this
}

// GetLowerBound returns the LowerBound field value if set, zero value otherwise.
func (o *ConditionIpRangeCondition) GetLowerBound() string {
	if o == nil || o.LowerBound == nil {
		var ret string
		return ret
	}
	return *o.LowerBound
}

// GetLowerBoundOk returns a tuple with the LowerBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionIpRangeCondition) GetLowerBoundOk() (*string, bool) {
	if o == nil || o.LowerBound == nil {
		return nil, false
	}
	return o.LowerBound, true
}

// HasLowerBound returns a boolean if a field has been set.
func (o *ConditionIpRangeCondition) HasLowerBound() bool {
	if o != nil && o.LowerBound != nil {
		return true
	}

	return false
}

// SetLowerBound gets a reference to the given string and assigns it to the LowerBound field.
func (o *ConditionIpRangeCondition) SetLowerBound(v string) {
	o.LowerBound = &v
}

// GetUpperBound returns the UpperBound field value if set, zero value otherwise.
func (o *ConditionIpRangeCondition) GetUpperBound() string {
	if o == nil || o.UpperBound == nil {
		var ret string
		return ret
	}
	return *o.UpperBound
}

// GetUpperBoundOk returns a tuple with the UpperBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionIpRangeCondition) GetUpperBoundOk() (*string, bool) {
	if o == nil || o.UpperBound == nil {
		return nil, false
	}
	return o.UpperBound, true
}

// HasUpperBound returns a boolean if a field has been set.
func (o *ConditionIpRangeCondition) HasUpperBound() bool {
	if o != nil && o.UpperBound != nil {
		return true
	}

	return false
}

// SetUpperBound gets a reference to the given string and assigns it to the UpperBound field.
func (o *ConditionIpRangeCondition) SetUpperBound(v string) {
	o.UpperBound = &v
}

func (o ConditionIpRangeCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LowerBound != nil {
		toSerialize["lowerBound"] = o.LowerBound
	}
	if o.UpperBound != nil {
		toSerialize["upperBound"] = o.UpperBound
	}
	return json.Marshal(toSerialize)
}

type NullableConditionIpRangeCondition struct {
	value *ConditionIpRangeCondition
	isSet bool
}

func (v NullableConditionIpRangeCondition) Get() *ConditionIpRangeCondition {
	return v.value
}

func (v *NullableConditionIpRangeCondition) Set(val *ConditionIpRangeCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionIpRangeCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionIpRangeCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionIpRangeCondition(val *ConditionIpRangeCondition) *NullableConditionIpRangeCondition {
	return &NullableConditionIpRangeCondition{value: val, isSet: true}
}

func (v NullableConditionIpRangeCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionIpRangeCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
