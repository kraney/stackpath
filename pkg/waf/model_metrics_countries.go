/*
 * Web Application Firewall
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package waf

import (
	"encoding/json"
)

// MetricsCountries The number of events per country of origin
type MetricsCountries struct {
	// A country's long name
	Country *string `json:"country,omitempty"`
	// A country's ISO 3166-1 alpha-2 code
	CountryCode *string `json:"countryCode,omitempty"`
	// The number of requests from the country
	Count *string `json:"count,omitempty"`
}

// NewMetricsCountries instantiates a new MetricsCountries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsCountries() *MetricsCountries {
	this := MetricsCountries{}
	return &this
}

// NewMetricsCountriesWithDefaults instantiates a new MetricsCountries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsCountriesWithDefaults() *MetricsCountries {
	this := MetricsCountries{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *MetricsCountries) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsCountries) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *MetricsCountries) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *MetricsCountries) SetCountry(v string) {
	o.Country = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *MetricsCountries) GetCountryCode() string {
	if o == nil || o.CountryCode == nil {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsCountries) GetCountryCodeOk() (*string, bool) {
	if o == nil || o.CountryCode == nil {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *MetricsCountries) HasCountryCode() bool {
	if o != nil && o.CountryCode != nil {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *MetricsCountries) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *MetricsCountries) GetCount() string {
	if o == nil || o.Count == nil {
		var ret string
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsCountries) GetCountOk() (*string, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *MetricsCountries) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given string and assigns it to the Count field.
func (o *MetricsCountries) SetCount(v string) {
	o.Count = &v
}

func (o MetricsCountries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.CountryCode != nil {
		toSerialize["countryCode"] = o.CountryCode
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableMetricsCountries struct {
	value *MetricsCountries
	isSet bool
}

func (v NullableMetricsCountries) Get() *MetricsCountries {
	return v.value
}

func (v *NullableMetricsCountries) Set(val *MetricsCountries) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsCountries) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsCountries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsCountries(val *MetricsCountries) *NullableMetricsCountries {
	return &NullableMetricsCountries{value: val, isSet: true}
}

func (v NullableMetricsCountries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsCountries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
