/*
 * Web Application Firewall
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package waf

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// EventsApiService EventsApi service
type EventsApiService service

type apiGetEventRequest struct {
	ctx _context.Context
	apiService *EventsApiService
	stackId string
	siteId string
	eventId string
}


/*
GetEvent LEGACY: Get an event
**Note:** This endpoint is deprecated and will be removed in the future. WAF events will be replaced with requests, which provide more functionality. Please use the [get request](ref:getrequest) and [get request details](ref:getrequestdetails) calls to retrieve WAF requests.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param stackId A stack ID or slug
 * @param siteId A site ID
 * @param eventId A WAF event ID
@return apiGetEventRequest
*/
func (a *EventsApiService) GetEvent(ctx _context.Context, stackId string, siteId string, eventId string) apiGetEventRequest {
	return apiGetEventRequest{
		apiService: a,
		ctx: ctx,
		stackId: stackId,
		siteId: siteId,
		eventId: eventId,
	}
}

/*
Execute executes the request
 @return WafGetEventResponse
*/
func (r apiGetEventRequest) Execute() (WafGetEventResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  WafGetEventResponse
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.GetEvent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/waf/v1/stacks/{stack_id}/sites/{site_id}/events/{event_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", _neturl.QueryEscape(parameterToString(r.stackId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", _neturl.QueryEscape(parameterToString(r.siteId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event_id"+"}", _neturl.QueryEscape(parameterToString(r.eventId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiGetEventStatisticsRequest struct {
	ctx _context.Context
	apiService *EventsApiService
	stackId string
	siteId string
	startDate *time.Time
	endDate *time.Time
	filterActionValue *string
	filterResultValue *string
	filterClientIp *string
	filterReferenceId *string
}


func (r apiGetEventStatisticsRequest) StartDate(startDate time.Time) apiGetEventStatisticsRequest {
	r.startDate = &startDate
	return r
}

func (r apiGetEventStatisticsRequest) EndDate(endDate time.Time) apiGetEventStatisticsRequest {
	r.endDate = &endDate
	return r
}

func (r apiGetEventStatisticsRequest) FilterActionValue(filterActionValue string) apiGetEventStatisticsRequest {
	r.filterActionValue = &filterActionValue
	return r
}

func (r apiGetEventStatisticsRequest) FilterResultValue(filterResultValue string) apiGetEventStatisticsRequest {
	r.filterResultValue = &filterResultValue
	return r
}

func (r apiGetEventStatisticsRequest) FilterClientIp(filterClientIp string) apiGetEventStatisticsRequest {
	r.filterClientIp = &filterClientIp
	return r
}

func (r apiGetEventStatisticsRequest) FilterReferenceId(filterReferenceId string) apiGetEventStatisticsRequest {
	r.filterReferenceId = &filterReferenceId
	return r
}

/*
GetEventStatistics LEGACY: Get event statistics
Event statistics collect the total number of and number of blocked events for a site over a given time frame. Statistics are collected per country of origin, the rules that triggered events, the requesting organization as determined by WHOIS lookup against the client IP address, and by actions taken by the WAF as a result of the event.

**Note:** This endpoint is deprecated and will be removed in the future. WAF events will be replaced with requests, which provide more functionality. A replacement for this call is in development.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param stackId A stack ID or slug
 * @param siteId A site ID
@return apiGetEventStatisticsRequest
*/
func (a *EventsApiService) GetEventStatistics(ctx _context.Context, stackId string, siteId string) apiGetEventStatisticsRequest {
	return apiGetEventStatisticsRequest{
		apiService: a,
		ctx: ctx,
		stackId: stackId,
		siteId: siteId,
	}
}

/*
Execute executes the request
 @return WafGetEventStatisticsResponse
*/
func (r apiGetEventStatisticsRequest) Execute() (WafGetEventStatisticsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  WafGetEventStatisticsResponse
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.GetEventStatistics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/waf/v1/stacks/{stack_id}/sites/{site_id}/event_stats"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", _neturl.QueryEscape(parameterToString(r.stackId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", _neturl.QueryEscape(parameterToString(r.siteId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
						
	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.filterActionValue != nil {
		localVarQueryParams.Add("filter.action_value", parameterToString(*r.filterActionValue, ""))
	}
	if r.filterResultValue != nil {
		localVarQueryParams.Add("filter.result_value", parameterToString(*r.filterResultValue, ""))
	}
	if r.filterClientIp != nil {
		localVarQueryParams.Add("filter.client_ip", parameterToString(*r.filterClientIp, ""))
	}
	if r.filterReferenceId != nil {
		localVarQueryParams.Add("filter.reference_id", parameterToString(*r.filterReferenceId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiSearchEventsRequest struct {
	ctx _context.Context
	apiService *EventsApiService
	stackId string
	siteId string
	pageRequestFirst *string
	pageRequestAfter *string
	pageRequestFilter *string
	pageRequestSortBy *string
	startDate *time.Time
	endDate *time.Time
	filterActionValue *string
	filterResultValue *string
	filterClientIp *string
	filterReferenceId *string
	sortBy *string
	sortOrder *string
}


func (r apiSearchEventsRequest) PageRequestFirst(pageRequestFirst string) apiSearchEventsRequest {
	r.pageRequestFirst = &pageRequestFirst
	return r
}

func (r apiSearchEventsRequest) PageRequestAfter(pageRequestAfter string) apiSearchEventsRequest {
	r.pageRequestAfter = &pageRequestAfter
	return r
}

func (r apiSearchEventsRequest) PageRequestFilter(pageRequestFilter string) apiSearchEventsRequest {
	r.pageRequestFilter = &pageRequestFilter
	return r
}

func (r apiSearchEventsRequest) PageRequestSortBy(pageRequestSortBy string) apiSearchEventsRequest {
	r.pageRequestSortBy = &pageRequestSortBy
	return r
}

func (r apiSearchEventsRequest) StartDate(startDate time.Time) apiSearchEventsRequest {
	r.startDate = &startDate
	return r
}

func (r apiSearchEventsRequest) EndDate(endDate time.Time) apiSearchEventsRequest {
	r.endDate = &endDate
	return r
}

func (r apiSearchEventsRequest) FilterActionValue(filterActionValue string) apiSearchEventsRequest {
	r.filterActionValue = &filterActionValue
	return r
}

func (r apiSearchEventsRequest) FilterResultValue(filterResultValue string) apiSearchEventsRequest {
	r.filterResultValue = &filterResultValue
	return r
}

func (r apiSearchEventsRequest) FilterClientIp(filterClientIp string) apiSearchEventsRequest {
	r.filterClientIp = &filterClientIp
	return r
}

func (r apiSearchEventsRequest) FilterReferenceId(filterReferenceId string) apiSearchEventsRequest {
	r.filterReferenceId = &filterReferenceId
	return r
}

func (r apiSearchEventsRequest) SortBy(sortBy string) apiSearchEventsRequest {
	r.sortBy = &sortBy
	return r
}

func (r apiSearchEventsRequest) SortOrder(sortOrder string) apiSearchEventsRequest {
	r.sortOrder = &sortOrder
	return r
}

/*
SearchEvents LEGACY: Get all events
**Note:** This endpoint is deprecated and will be removed in the future. WAF events will be replaced with requests, which provide more functionality. Please use the [get all requests](ref:getrequests) call to search for WAF requests.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param stackId A stack ID or slug
 * @param siteId A site ID
@return apiSearchEventsRequest
*/
func (a *EventsApiService) SearchEvents(ctx _context.Context, stackId string, siteId string) apiSearchEventsRequest {
	return apiSearchEventsRequest{
		apiService: a,
		ctx: ctx,
		stackId: stackId,
		siteId: siteId,
	}
}

/*
Execute executes the request
 @return WafSearchEventsResponse
*/
func (r apiSearchEventsRequest) Execute() (WafSearchEventsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  WafSearchEventsResponse
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.SearchEvents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/waf/v1/stacks/{stack_id}/sites/{site_id}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", _neturl.QueryEscape(parameterToString(r.stackId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"site_id"+"}", _neturl.QueryEscape(parameterToString(r.siteId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
												
	if r.pageRequestFirst != nil {
		localVarQueryParams.Add("page_request.first", parameterToString(*r.pageRequestFirst, ""))
	}
	if r.pageRequestAfter != nil {
		localVarQueryParams.Add("page_request.after", parameterToString(*r.pageRequestAfter, ""))
	}
	if r.pageRequestFilter != nil {
		localVarQueryParams.Add("page_request.filter", parameterToString(*r.pageRequestFilter, ""))
	}
	if r.pageRequestSortBy != nil {
		localVarQueryParams.Add("page_request.sort_by", parameterToString(*r.pageRequestSortBy, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.filterActionValue != nil {
		localVarQueryParams.Add("filter.action_value", parameterToString(*r.filterActionValue, ""))
	}
	if r.filterResultValue != nil {
		localVarQueryParams.Add("filter.result_value", parameterToString(*r.filterResultValue, ""))
	}
	if r.filterClientIp != nil {
		localVarQueryParams.Add("filter.client_ip", parameterToString(*r.filterClientIp, ""))
	}
	if r.filterReferenceId != nil {
		localVarQueryParams.Add("filter.reference_id", parameterToString(*r.filterReferenceId, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sort_by", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sort_order", parameterToString(*r.sortOrder, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
