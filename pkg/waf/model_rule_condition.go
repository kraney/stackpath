/*
 * Web Application Firewall
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package waf

import (
	"encoding/json"
)

// RuleCondition The criteria of an incoming web request and the models of the various values those criteria can take
type RuleCondition struct {
	Ip *ConditionIpCondition `json:"ip,omitempty"`
	IpRange *ConditionIpRangeCondition `json:"ipRange,omitempty"`
	Url *ConditionUrlCondition `json:"url,omitempty"`
	UserAgent *ConditionUserAgentCondition `json:"userAgent,omitempty"`
	Header *ConditionHeaderCondition `json:"header,omitempty"`
	HeaderExists *ConditionHeaderExistsCondition `json:"headerExists,omitempty"`
	ResponseHeader *ConditionResponseHeaderCondition `json:"responseHeader,omitempty"`
	ResponseHeaderExists *ConditionResponseHeaderExistsCondition `json:"responseHeaderExists,omitempty"`
	HttpMethod *ConditionHttpMethodCondition `json:"httpMethod,omitempty"`
	FileExtension *ConditionFileExtensionCondition `json:"fileExtension,omitempty"`
	ContentType *ConditionContentTypeCondition `json:"contentType,omitempty"`
	Country *ConditionCountryCondition `json:"country,omitempty"`
	Organization *ConditionOrganizationCondition `json:"organization,omitempty"`
	RequestRate *ConditionRequestRateCondition `json:"requestRate,omitempty"`
	OwnerTypes *ConditionOwnerTypeCondition `json:"ownerTypes,omitempty"`
	Tags *ConditionTagCondition `json:"tags,omitempty"`
	SessionRequestCount *ConditionSessionRequestCountCondition `json:"sessionRequestCount,omitempty"`
	// Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`
}

// NewRuleCondition instantiates a new RuleCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleCondition() *RuleCondition {
	this := RuleCondition{}
	return &this
}

// NewRuleConditionWithDefaults instantiates a new RuleCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleConditionWithDefaults() *RuleCondition {
	this := RuleCondition{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *RuleCondition) GetIp() ConditionIpCondition {
	if o == nil || o.Ip == nil {
		var ret ConditionIpCondition
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetIpOk() (*ConditionIpCondition, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *RuleCondition) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given ConditionIpCondition and assigns it to the Ip field.
func (o *RuleCondition) SetIp(v ConditionIpCondition) {
	o.Ip = &v
}

// GetIpRange returns the IpRange field value if set, zero value otherwise.
func (o *RuleCondition) GetIpRange() ConditionIpRangeCondition {
	if o == nil || o.IpRange == nil {
		var ret ConditionIpRangeCondition
		return ret
	}
	return *o.IpRange
}

// GetIpRangeOk returns a tuple with the IpRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetIpRangeOk() (*ConditionIpRangeCondition, bool) {
	if o == nil || o.IpRange == nil {
		return nil, false
	}
	return o.IpRange, true
}

// HasIpRange returns a boolean if a field has been set.
func (o *RuleCondition) HasIpRange() bool {
	if o != nil && o.IpRange != nil {
		return true
	}

	return false
}

// SetIpRange gets a reference to the given ConditionIpRangeCondition and assigns it to the IpRange field.
func (o *RuleCondition) SetIpRange(v ConditionIpRangeCondition) {
	o.IpRange = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RuleCondition) GetUrl() ConditionUrlCondition {
	if o == nil || o.Url == nil {
		var ret ConditionUrlCondition
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetUrlOk() (*ConditionUrlCondition, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RuleCondition) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given ConditionUrlCondition and assigns it to the Url field.
func (o *RuleCondition) SetUrl(v ConditionUrlCondition) {
	o.Url = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *RuleCondition) GetUserAgent() ConditionUserAgentCondition {
	if o == nil || o.UserAgent == nil {
		var ret ConditionUserAgentCondition
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetUserAgentOk() (*ConditionUserAgentCondition, bool) {
	if o == nil || o.UserAgent == nil {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *RuleCondition) HasUserAgent() bool {
	if o != nil && o.UserAgent != nil {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given ConditionUserAgentCondition and assigns it to the UserAgent field.
func (o *RuleCondition) SetUserAgent(v ConditionUserAgentCondition) {
	o.UserAgent = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *RuleCondition) GetHeader() ConditionHeaderCondition {
	if o == nil || o.Header == nil {
		var ret ConditionHeaderCondition
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetHeaderOk() (*ConditionHeaderCondition, bool) {
	if o == nil || o.Header == nil {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *RuleCondition) HasHeader() bool {
	if o != nil && o.Header != nil {
		return true
	}

	return false
}

// SetHeader gets a reference to the given ConditionHeaderCondition and assigns it to the Header field.
func (o *RuleCondition) SetHeader(v ConditionHeaderCondition) {
	o.Header = &v
}

// GetHeaderExists returns the HeaderExists field value if set, zero value otherwise.
func (o *RuleCondition) GetHeaderExists() ConditionHeaderExistsCondition {
	if o == nil || o.HeaderExists == nil {
		var ret ConditionHeaderExistsCondition
		return ret
	}
	return *o.HeaderExists
}

// GetHeaderExistsOk returns a tuple with the HeaderExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetHeaderExistsOk() (*ConditionHeaderExistsCondition, bool) {
	if o == nil || o.HeaderExists == nil {
		return nil, false
	}
	return o.HeaderExists, true
}

// HasHeaderExists returns a boolean if a field has been set.
func (o *RuleCondition) HasHeaderExists() bool {
	if o != nil && o.HeaderExists != nil {
		return true
	}

	return false
}

// SetHeaderExists gets a reference to the given ConditionHeaderExistsCondition and assigns it to the HeaderExists field.
func (o *RuleCondition) SetHeaderExists(v ConditionHeaderExistsCondition) {
	o.HeaderExists = &v
}

// GetResponseHeader returns the ResponseHeader field value if set, zero value otherwise.
func (o *RuleCondition) GetResponseHeader() ConditionResponseHeaderCondition {
	if o == nil || o.ResponseHeader == nil {
		var ret ConditionResponseHeaderCondition
		return ret
	}
	return *o.ResponseHeader
}

// GetResponseHeaderOk returns a tuple with the ResponseHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetResponseHeaderOk() (*ConditionResponseHeaderCondition, bool) {
	if o == nil || o.ResponseHeader == nil {
		return nil, false
	}
	return o.ResponseHeader, true
}

// HasResponseHeader returns a boolean if a field has been set.
func (o *RuleCondition) HasResponseHeader() bool {
	if o != nil && o.ResponseHeader != nil {
		return true
	}

	return false
}

// SetResponseHeader gets a reference to the given ConditionResponseHeaderCondition and assigns it to the ResponseHeader field.
func (o *RuleCondition) SetResponseHeader(v ConditionResponseHeaderCondition) {
	o.ResponseHeader = &v
}

// GetResponseHeaderExists returns the ResponseHeaderExists field value if set, zero value otherwise.
func (o *RuleCondition) GetResponseHeaderExists() ConditionResponseHeaderExistsCondition {
	if o == nil || o.ResponseHeaderExists == nil {
		var ret ConditionResponseHeaderExistsCondition
		return ret
	}
	return *o.ResponseHeaderExists
}

// GetResponseHeaderExistsOk returns a tuple with the ResponseHeaderExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetResponseHeaderExistsOk() (*ConditionResponseHeaderExistsCondition, bool) {
	if o == nil || o.ResponseHeaderExists == nil {
		return nil, false
	}
	return o.ResponseHeaderExists, true
}

// HasResponseHeaderExists returns a boolean if a field has been set.
func (o *RuleCondition) HasResponseHeaderExists() bool {
	if o != nil && o.ResponseHeaderExists != nil {
		return true
	}

	return false
}

// SetResponseHeaderExists gets a reference to the given ConditionResponseHeaderExistsCondition and assigns it to the ResponseHeaderExists field.
func (o *RuleCondition) SetResponseHeaderExists(v ConditionResponseHeaderExistsCondition) {
	o.ResponseHeaderExists = &v
}

// GetHttpMethod returns the HttpMethod field value if set, zero value otherwise.
func (o *RuleCondition) GetHttpMethod() ConditionHttpMethodCondition {
	if o == nil || o.HttpMethod == nil {
		var ret ConditionHttpMethodCondition
		return ret
	}
	return *o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetHttpMethodOk() (*ConditionHttpMethodCondition, bool) {
	if o == nil || o.HttpMethod == nil {
		return nil, false
	}
	return o.HttpMethod, true
}

// HasHttpMethod returns a boolean if a field has been set.
func (o *RuleCondition) HasHttpMethod() bool {
	if o != nil && o.HttpMethod != nil {
		return true
	}

	return false
}

// SetHttpMethod gets a reference to the given ConditionHttpMethodCondition and assigns it to the HttpMethod field.
func (o *RuleCondition) SetHttpMethod(v ConditionHttpMethodCondition) {
	o.HttpMethod = &v
}

// GetFileExtension returns the FileExtension field value if set, zero value otherwise.
func (o *RuleCondition) GetFileExtension() ConditionFileExtensionCondition {
	if o == nil || o.FileExtension == nil {
		var ret ConditionFileExtensionCondition
		return ret
	}
	return *o.FileExtension
}

// GetFileExtensionOk returns a tuple with the FileExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetFileExtensionOk() (*ConditionFileExtensionCondition, bool) {
	if o == nil || o.FileExtension == nil {
		return nil, false
	}
	return o.FileExtension, true
}

// HasFileExtension returns a boolean if a field has been set.
func (o *RuleCondition) HasFileExtension() bool {
	if o != nil && o.FileExtension != nil {
		return true
	}

	return false
}

// SetFileExtension gets a reference to the given ConditionFileExtensionCondition and assigns it to the FileExtension field.
func (o *RuleCondition) SetFileExtension(v ConditionFileExtensionCondition) {
	o.FileExtension = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *RuleCondition) GetContentType() ConditionContentTypeCondition {
	if o == nil || o.ContentType == nil {
		var ret ConditionContentTypeCondition
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetContentTypeOk() (*ConditionContentTypeCondition, bool) {
	if o == nil || o.ContentType == nil {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *RuleCondition) HasContentType() bool {
	if o != nil && o.ContentType != nil {
		return true
	}

	return false
}

// SetContentType gets a reference to the given ConditionContentTypeCondition and assigns it to the ContentType field.
func (o *RuleCondition) SetContentType(v ConditionContentTypeCondition) {
	o.ContentType = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *RuleCondition) GetCountry() ConditionCountryCondition {
	if o == nil || o.Country == nil {
		var ret ConditionCountryCondition
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetCountryOk() (*ConditionCountryCondition, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *RuleCondition) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given ConditionCountryCondition and assigns it to the Country field.
func (o *RuleCondition) SetCountry(v ConditionCountryCondition) {
	o.Country = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *RuleCondition) GetOrganization() ConditionOrganizationCondition {
	if o == nil || o.Organization == nil {
		var ret ConditionOrganizationCondition
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetOrganizationOk() (*ConditionOrganizationCondition, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *RuleCondition) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given ConditionOrganizationCondition and assigns it to the Organization field.
func (o *RuleCondition) SetOrganization(v ConditionOrganizationCondition) {
	o.Organization = &v
}

// GetRequestRate returns the RequestRate field value if set, zero value otherwise.
func (o *RuleCondition) GetRequestRate() ConditionRequestRateCondition {
	if o == nil || o.RequestRate == nil {
		var ret ConditionRequestRateCondition
		return ret
	}
	return *o.RequestRate
}

// GetRequestRateOk returns a tuple with the RequestRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetRequestRateOk() (*ConditionRequestRateCondition, bool) {
	if o == nil || o.RequestRate == nil {
		return nil, false
	}
	return o.RequestRate, true
}

// HasRequestRate returns a boolean if a field has been set.
func (o *RuleCondition) HasRequestRate() bool {
	if o != nil && o.RequestRate != nil {
		return true
	}

	return false
}

// SetRequestRate gets a reference to the given ConditionRequestRateCondition and assigns it to the RequestRate field.
func (o *RuleCondition) SetRequestRate(v ConditionRequestRateCondition) {
	o.RequestRate = &v
}

// GetOwnerTypes returns the OwnerTypes field value if set, zero value otherwise.
func (o *RuleCondition) GetOwnerTypes() ConditionOwnerTypeCondition {
	if o == nil || o.OwnerTypes == nil {
		var ret ConditionOwnerTypeCondition
		return ret
	}
	return *o.OwnerTypes
}

// GetOwnerTypesOk returns a tuple with the OwnerTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetOwnerTypesOk() (*ConditionOwnerTypeCondition, bool) {
	if o == nil || o.OwnerTypes == nil {
		return nil, false
	}
	return o.OwnerTypes, true
}

// HasOwnerTypes returns a boolean if a field has been set.
func (o *RuleCondition) HasOwnerTypes() bool {
	if o != nil && o.OwnerTypes != nil {
		return true
	}

	return false
}

// SetOwnerTypes gets a reference to the given ConditionOwnerTypeCondition and assigns it to the OwnerTypes field.
func (o *RuleCondition) SetOwnerTypes(v ConditionOwnerTypeCondition) {
	o.OwnerTypes = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *RuleCondition) GetTags() ConditionTagCondition {
	if o == nil || o.Tags == nil {
		var ret ConditionTagCondition
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetTagsOk() (*ConditionTagCondition, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *RuleCondition) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given ConditionTagCondition and assigns it to the Tags field.
func (o *RuleCondition) SetTags(v ConditionTagCondition) {
	o.Tags = &v
}

// GetSessionRequestCount returns the SessionRequestCount field value if set, zero value otherwise.
func (o *RuleCondition) GetSessionRequestCount() ConditionSessionRequestCountCondition {
	if o == nil || o.SessionRequestCount == nil {
		var ret ConditionSessionRequestCountCondition
		return ret
	}
	return *o.SessionRequestCount
}

// GetSessionRequestCountOk returns a tuple with the SessionRequestCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetSessionRequestCountOk() (*ConditionSessionRequestCountCondition, bool) {
	if o == nil || o.SessionRequestCount == nil {
		return nil, false
	}
	return o.SessionRequestCount, true
}

// HasSessionRequestCount returns a boolean if a field has been set.
func (o *RuleCondition) HasSessionRequestCount() bool {
	if o != nil && o.SessionRequestCount != nil {
		return true
	}

	return false
}

// SetSessionRequestCount gets a reference to the given ConditionSessionRequestCountCondition and assigns it to the SessionRequestCount field.
func (o *RuleCondition) SetSessionRequestCount(v ConditionSessionRequestCountCondition) {
	o.SessionRequestCount = &v
}

// GetNegation returns the Negation field value if set, zero value otherwise.
func (o *RuleCondition) GetNegation() bool {
	if o == nil || o.Negation == nil {
		var ret bool
		return ret
	}
	return *o.Negation
}

// GetNegationOk returns a tuple with the Negation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleCondition) GetNegationOk() (*bool, bool) {
	if o == nil || o.Negation == nil {
		return nil, false
	}
	return o.Negation, true
}

// HasNegation returns a boolean if a field has been set.
func (o *RuleCondition) HasNegation() bool {
	if o != nil && o.Negation != nil {
		return true
	}

	return false
}

// SetNegation gets a reference to the given bool and assigns it to the Negation field.
func (o *RuleCondition) SetNegation(v bool) {
	o.Negation = &v
}

func (o RuleCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.IpRange != nil {
		toSerialize["ipRange"] = o.IpRange
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.UserAgent != nil {
		toSerialize["userAgent"] = o.UserAgent
	}
	if o.Header != nil {
		toSerialize["header"] = o.Header
	}
	if o.HeaderExists != nil {
		toSerialize["headerExists"] = o.HeaderExists
	}
	if o.ResponseHeader != nil {
		toSerialize["responseHeader"] = o.ResponseHeader
	}
	if o.ResponseHeaderExists != nil {
		toSerialize["responseHeaderExists"] = o.ResponseHeaderExists
	}
	if o.HttpMethod != nil {
		toSerialize["httpMethod"] = o.HttpMethod
	}
	if o.FileExtension != nil {
		toSerialize["fileExtension"] = o.FileExtension
	}
	if o.ContentType != nil {
		toSerialize["contentType"] = o.ContentType
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	if o.RequestRate != nil {
		toSerialize["requestRate"] = o.RequestRate
	}
	if o.OwnerTypes != nil {
		toSerialize["ownerTypes"] = o.OwnerTypes
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.SessionRequestCount != nil {
		toSerialize["sessionRequestCount"] = o.SessionRequestCount
	}
	if o.Negation != nil {
		toSerialize["negation"] = o.Negation
	}
	return json.Marshal(toSerialize)
}

type NullableRuleCondition struct {
	value *RuleCondition
	isSet bool
}

func (v NullableRuleCondition) Get() *RuleCondition {
	return v.value
}

func (v *NullableRuleCondition) Set(val *RuleCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleCondition(val *RuleCondition) *NullableRuleCondition {
	return &NullableRuleCondition{value: val, isSet: true}
}

func (v NullableRuleCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
