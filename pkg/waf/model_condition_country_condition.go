/*
 * Web Application Firewall
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package waf

import (
	"encoding/json"
)

// ConditionCountryCondition Match the country that the requested originated from
type ConditionCountryCondition struct {
	// An ISO 3166-1 alpha-2 formatted string
	CountryCode *string `json:"countryCode,omitempty"`
}

// NewConditionCountryCondition instantiates a new ConditionCountryCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionCountryCondition() *ConditionCountryCondition {
	this := ConditionCountryCondition{}
	return &this
}

// NewConditionCountryConditionWithDefaults instantiates a new ConditionCountryCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionCountryConditionWithDefaults() *ConditionCountryCondition {
	this := ConditionCountryCondition{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *ConditionCountryCondition) GetCountryCode() string {
	if o == nil || o.CountryCode == nil {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionCountryCondition) GetCountryCodeOk() (*string, bool) {
	if o == nil || o.CountryCode == nil {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *ConditionCountryCondition) HasCountryCode() bool {
	if o != nil && o.CountryCode != nil {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *ConditionCountryCondition) SetCountryCode(v string) {
	o.CountryCode = &v
}

func (o ConditionCountryCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CountryCode != nil {
		toSerialize["countryCode"] = o.CountryCode
	}
	return json.Marshal(toSerialize)
}

type NullableConditionCountryCondition struct {
	value *ConditionCountryCondition
	isSet bool
}

func (v NullableConditionCountryCondition) Get() *ConditionCountryCondition {
	return v.value
}

func (v *NullableConditionCountryCondition) Set(val *ConditionCountryCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionCountryCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionCountryCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionCountryCondition(val *ConditionCountryCondition) *NullableConditionCountryCondition {
	return &NullableConditionCountryCondition{value: val, isSet: true}
}

func (v NullableConditionCountryCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionCountryCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
