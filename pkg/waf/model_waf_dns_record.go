/*
 * Web Application Firewall
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package waf

import (
	"encoding/json"
)

// WafDnsRecord A DNS record  A dns record describes an individual piece of DNS functionality in a DNS zone.
type WafDnsRecord struct {
	// The name of the network node to which a zone resource record pertains  Use the value \"@\" to denote current root domain name.
	Name *string `json:"name,omitempty"`
	// A zone record's type  Zone record types describe the zone record's behavior. For instance, a zone record's type can say that the record is a name to IP address value, a name alias, or which mail exchanger is responsible for the domain. See https://support.stackpath.com/hc/en-us/articles/360001085563-What-DNS-record-types-does-StackPath-support for more information.
	Type *string `json:"type,omitempty"`
	// A zone record's class code  This is typically \"IN\" for Internet related resource records.
	Class *string `json:"class,omitempty"`
	// A zone record's time to live  A record's TTL is the number of seconds that the record should be cached by DNS resolvers. Use lower TTL values if you expect zone records to change often. Use higher TTL values for records that won't change to prevent extra DNS lookups by clients.
	Ttl *int32 `json:"ttl,omitempty"`
	// A zone record's value  Expected data formats can vary depending on the zone record's type.
	Data *string `json:"data,omitempty"`
}

// NewWafDnsRecord instantiates a new WafDnsRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWafDnsRecord() *WafDnsRecord {
	this := WafDnsRecord{}
	return &this
}

// NewWafDnsRecordWithDefaults instantiates a new WafDnsRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWafDnsRecordWithDefaults() *WafDnsRecord {
	this := WafDnsRecord{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WafDnsRecord) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafDnsRecord) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WafDnsRecord) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WafDnsRecord) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WafDnsRecord) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafDnsRecord) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WafDnsRecord) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WafDnsRecord) SetType(v string) {
	o.Type = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *WafDnsRecord) GetClass() string {
	if o == nil || o.Class == nil {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafDnsRecord) GetClassOk() (*string, bool) {
	if o == nil || o.Class == nil {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *WafDnsRecord) HasClass() bool {
	if o != nil && o.Class != nil {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *WafDnsRecord) SetClass(v string) {
	o.Class = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *WafDnsRecord) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafDnsRecord) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *WafDnsRecord) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *WafDnsRecord) SetTtl(v int32) {
	o.Ttl = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *WafDnsRecord) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WafDnsRecord) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *WafDnsRecord) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *WafDnsRecord) SetData(v string) {
	o.Data = &v
}

func (o WafDnsRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Class != nil {
		toSerialize["class"] = o.Class
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableWafDnsRecord struct {
	value *WafDnsRecord
	isSet bool
}

func (v NullableWafDnsRecord) Get() *WafDnsRecord {
	return v.value
}

func (v *NullableWafDnsRecord) Set(val *WafDnsRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableWafDnsRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableWafDnsRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWafDnsRecord(val *WafDnsRecord) *NullableWafDnsRecord {
	return &NullableWafDnsRecord{value: val, isSet: true}
}

func (v NullableWafDnsRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWafDnsRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
