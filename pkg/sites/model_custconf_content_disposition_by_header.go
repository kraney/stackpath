/*
 * Sites
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sites

import (
	"encoding/json"
)

// CustconfContentDispositionByHeader The content disposition by HTTP header match policy allows you to control the Content-Disposition delivered by the CDN using a pattern match against the value of any HTTP header present in the request. If you are using URL query string parameters to control the Content-Disposition header (using the Content Disposition by URL policy) then the Content-Disposition header generated by this policy will not be used on that specific request. A typical use case for this policy is to set a different Content-Disposition header based on the User-Agent in the request.
type CustconfContentDispositionByHeader struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	// The setting allows you to specify the name of the HTTP header you'd like to use in the pattern match for this policy.
	HeaderFieldName *string `json:"headerFieldName,omitempty"`
	// String of values delimited by a ',' character. A list of glob patterns that apply this policy if any of them match against the value of the header specified.
	HeaderValueMatch *string `json:"headerValueMatch,omitempty"`
	DefaultType *ContentDispositionByHeaderDefaultTypeEnumWrapperValue `json:"defaultType,omitempty"`
	// This setting allows you to force the Content-Disposition generated by the CDN for this policy to override the Content-Disposition header cached from your origin.
	OverrideOriginHeader *bool `json:"overrideOriginHeader,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	// String of values delimited by a ',' character.
	MethodFilter *string `json:"methodFilter,omitempty"`
	// String of values delimited by a ',' character.
	PathFilter *string `json:"pathFilter,omitempty"`
	// String of values delimited by a ',' character.
	HeaderFilter *string `json:"headerFilter,omitempty"`
}

// NewCustconfContentDispositionByHeader instantiates a new CustconfContentDispositionByHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfContentDispositionByHeader() *CustconfContentDispositionByHeader {
	this := CustconfContentDispositionByHeader{}
	var defaultType ContentDispositionByHeaderDefaultTypeEnumWrapperValue = "UNKNOWN"
	this.DefaultType = &defaultType
	return &this
}

// NewCustconfContentDispositionByHeaderWithDefaults instantiates a new CustconfContentDispositionByHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfContentDispositionByHeaderWithDefaults() *CustconfContentDispositionByHeader {
	this := CustconfContentDispositionByHeader{}
	var defaultType ContentDispositionByHeaderDefaultTypeEnumWrapperValue = "UNKNOWN"
	this.DefaultType = &defaultType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfContentDispositionByHeader) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfContentDispositionByHeader) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfContentDispositionByHeader) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfContentDispositionByHeader) SetId(v string) {
	o.Id = &v
}

// GetHeaderFieldName returns the HeaderFieldName field value if set, zero value otherwise.
func (o *CustconfContentDispositionByHeader) GetHeaderFieldName() string {
	if o == nil || o.HeaderFieldName == nil {
		var ret string
		return ret
	}
	return *o.HeaderFieldName
}

// GetHeaderFieldNameOk returns a tuple with the HeaderFieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfContentDispositionByHeader) GetHeaderFieldNameOk() (*string, bool) {
	if o == nil || o.HeaderFieldName == nil {
		return nil, false
	}
	return o.HeaderFieldName, true
}

// HasHeaderFieldName returns a boolean if a field has been set.
func (o *CustconfContentDispositionByHeader) HasHeaderFieldName() bool {
	if o != nil && o.HeaderFieldName != nil {
		return true
	}

	return false
}

// SetHeaderFieldName gets a reference to the given string and assigns it to the HeaderFieldName field.
func (o *CustconfContentDispositionByHeader) SetHeaderFieldName(v string) {
	o.HeaderFieldName = &v
}

// GetHeaderValueMatch returns the HeaderValueMatch field value if set, zero value otherwise.
func (o *CustconfContentDispositionByHeader) GetHeaderValueMatch() string {
	if o == nil || o.HeaderValueMatch == nil {
		var ret string
		return ret
	}
	return *o.HeaderValueMatch
}

// GetHeaderValueMatchOk returns a tuple with the HeaderValueMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfContentDispositionByHeader) GetHeaderValueMatchOk() (*string, bool) {
	if o == nil || o.HeaderValueMatch == nil {
		return nil, false
	}
	return o.HeaderValueMatch, true
}

// HasHeaderValueMatch returns a boolean if a field has been set.
func (o *CustconfContentDispositionByHeader) HasHeaderValueMatch() bool {
	if o != nil && o.HeaderValueMatch != nil {
		return true
	}

	return false
}

// SetHeaderValueMatch gets a reference to the given string and assigns it to the HeaderValueMatch field.
func (o *CustconfContentDispositionByHeader) SetHeaderValueMatch(v string) {
	o.HeaderValueMatch = &v
}

// GetDefaultType returns the DefaultType field value if set, zero value otherwise.
func (o *CustconfContentDispositionByHeader) GetDefaultType() ContentDispositionByHeaderDefaultTypeEnumWrapperValue {
	if o == nil || o.DefaultType == nil {
		var ret ContentDispositionByHeaderDefaultTypeEnumWrapperValue
		return ret
	}
	return *o.DefaultType
}

// GetDefaultTypeOk returns a tuple with the DefaultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfContentDispositionByHeader) GetDefaultTypeOk() (*ContentDispositionByHeaderDefaultTypeEnumWrapperValue, bool) {
	if o == nil || o.DefaultType == nil {
		return nil, false
	}
	return o.DefaultType, true
}

// HasDefaultType returns a boolean if a field has been set.
func (o *CustconfContentDispositionByHeader) HasDefaultType() bool {
	if o != nil && o.DefaultType != nil {
		return true
	}

	return false
}

// SetDefaultType gets a reference to the given ContentDispositionByHeaderDefaultTypeEnumWrapperValue and assigns it to the DefaultType field.
func (o *CustconfContentDispositionByHeader) SetDefaultType(v ContentDispositionByHeaderDefaultTypeEnumWrapperValue) {
	o.DefaultType = &v
}

// GetOverrideOriginHeader returns the OverrideOriginHeader field value if set, zero value otherwise.
func (o *CustconfContentDispositionByHeader) GetOverrideOriginHeader() bool {
	if o == nil || o.OverrideOriginHeader == nil {
		var ret bool
		return ret
	}
	return *o.OverrideOriginHeader
}

// GetOverrideOriginHeaderOk returns a tuple with the OverrideOriginHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfContentDispositionByHeader) GetOverrideOriginHeaderOk() (*bool, bool) {
	if o == nil || o.OverrideOriginHeader == nil {
		return nil, false
	}
	return o.OverrideOriginHeader, true
}

// HasOverrideOriginHeader returns a boolean if a field has been set.
func (o *CustconfContentDispositionByHeader) HasOverrideOriginHeader() bool {
	if o != nil && o.OverrideOriginHeader != nil {
		return true
	}

	return false
}

// SetOverrideOriginHeader gets a reference to the given bool and assigns it to the OverrideOriginHeader field.
func (o *CustconfContentDispositionByHeader) SetOverrideOriginHeader(v bool) {
	o.OverrideOriginHeader = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustconfContentDispositionByHeader) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfContentDispositionByHeader) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustconfContentDispositionByHeader) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustconfContentDispositionByHeader) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMethodFilter returns the MethodFilter field value if set, zero value otherwise.
func (o *CustconfContentDispositionByHeader) GetMethodFilter() string {
	if o == nil || o.MethodFilter == nil {
		var ret string
		return ret
	}
	return *o.MethodFilter
}

// GetMethodFilterOk returns a tuple with the MethodFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfContentDispositionByHeader) GetMethodFilterOk() (*string, bool) {
	if o == nil || o.MethodFilter == nil {
		return nil, false
	}
	return o.MethodFilter, true
}

// HasMethodFilter returns a boolean if a field has been set.
func (o *CustconfContentDispositionByHeader) HasMethodFilter() bool {
	if o != nil && o.MethodFilter != nil {
		return true
	}

	return false
}

// SetMethodFilter gets a reference to the given string and assigns it to the MethodFilter field.
func (o *CustconfContentDispositionByHeader) SetMethodFilter(v string) {
	o.MethodFilter = &v
}

// GetPathFilter returns the PathFilter field value if set, zero value otherwise.
func (o *CustconfContentDispositionByHeader) GetPathFilter() string {
	if o == nil || o.PathFilter == nil {
		var ret string
		return ret
	}
	return *o.PathFilter
}

// GetPathFilterOk returns a tuple with the PathFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfContentDispositionByHeader) GetPathFilterOk() (*string, bool) {
	if o == nil || o.PathFilter == nil {
		return nil, false
	}
	return o.PathFilter, true
}

// HasPathFilter returns a boolean if a field has been set.
func (o *CustconfContentDispositionByHeader) HasPathFilter() bool {
	if o != nil && o.PathFilter != nil {
		return true
	}

	return false
}

// SetPathFilter gets a reference to the given string and assigns it to the PathFilter field.
func (o *CustconfContentDispositionByHeader) SetPathFilter(v string) {
	o.PathFilter = &v
}

// GetHeaderFilter returns the HeaderFilter field value if set, zero value otherwise.
func (o *CustconfContentDispositionByHeader) GetHeaderFilter() string {
	if o == nil || o.HeaderFilter == nil {
		var ret string
		return ret
	}
	return *o.HeaderFilter
}

// GetHeaderFilterOk returns a tuple with the HeaderFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfContentDispositionByHeader) GetHeaderFilterOk() (*string, bool) {
	if o == nil || o.HeaderFilter == nil {
		return nil, false
	}
	return o.HeaderFilter, true
}

// HasHeaderFilter returns a boolean if a field has been set.
func (o *CustconfContentDispositionByHeader) HasHeaderFilter() bool {
	if o != nil && o.HeaderFilter != nil {
		return true
	}

	return false
}

// SetHeaderFilter gets a reference to the given string and assigns it to the HeaderFilter field.
func (o *CustconfContentDispositionByHeader) SetHeaderFilter(v string) {
	o.HeaderFilter = &v
}

func (o CustconfContentDispositionByHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.HeaderFieldName != nil {
		toSerialize["headerFieldName"] = o.HeaderFieldName
	}
	if o.HeaderValueMatch != nil {
		toSerialize["headerValueMatch"] = o.HeaderValueMatch
	}
	if o.DefaultType != nil {
		toSerialize["defaultType"] = o.DefaultType
	}
	if o.OverrideOriginHeader != nil {
		toSerialize["overrideOriginHeader"] = o.OverrideOriginHeader
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.MethodFilter != nil {
		toSerialize["methodFilter"] = o.MethodFilter
	}
	if o.PathFilter != nil {
		toSerialize["pathFilter"] = o.PathFilter
	}
	if o.HeaderFilter != nil {
		toSerialize["headerFilter"] = o.HeaderFilter
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfContentDispositionByHeader struct {
	value *CustconfContentDispositionByHeader
	isSet bool
}

func (v NullableCustconfContentDispositionByHeader) Get() *CustconfContentDispositionByHeader {
	return v.value
}

func (v *NullableCustconfContentDispositionByHeader) Set(val *CustconfContentDispositionByHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfContentDispositionByHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfContentDispositionByHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfContentDispositionByHeader(val *CustconfContentDispositionByHeader) *NullableCustconfContentDispositionByHeader {
	return &NullableCustconfContentDispositionByHeader{value: val, isSet: true}
}

func (v NullableCustconfContentDispositionByHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfContentDispositionByHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
