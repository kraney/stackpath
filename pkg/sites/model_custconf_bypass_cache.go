/*
 * Sites
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sites

import (
	"encoding/json"
)

// CustconfBypassCache Bypass content caching on filter match
type CustconfBypassCache struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	// String of values delimited by a ',' character.
	MethodFilter *string `json:"methodFilter,omitempty"`
	// String of values delimited by a ',' character.
	PathFilter *string `json:"pathFilter,omitempty"`
	// String of values delimited by a ',' character.
	HeaderFilter *string `json:"headerFilter,omitempty"`
	// String of values delimited by a ',' character.
	CookieFilter *string `json:"cookieFilter,omitempty"`
}

// NewCustconfBypassCache instantiates a new CustconfBypassCache object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfBypassCache() *CustconfBypassCache {
	this := CustconfBypassCache{}
	return &this
}

// NewCustconfBypassCacheWithDefaults instantiates a new CustconfBypassCache object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfBypassCacheWithDefaults() *CustconfBypassCache {
	this := CustconfBypassCache{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfBypassCache) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfBypassCache) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfBypassCache) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfBypassCache) SetId(v string) {
	o.Id = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustconfBypassCache) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfBypassCache) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustconfBypassCache) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustconfBypassCache) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMethodFilter returns the MethodFilter field value if set, zero value otherwise.
func (o *CustconfBypassCache) GetMethodFilter() string {
	if o == nil || o.MethodFilter == nil {
		var ret string
		return ret
	}
	return *o.MethodFilter
}

// GetMethodFilterOk returns a tuple with the MethodFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfBypassCache) GetMethodFilterOk() (*string, bool) {
	if o == nil || o.MethodFilter == nil {
		return nil, false
	}
	return o.MethodFilter, true
}

// HasMethodFilter returns a boolean if a field has been set.
func (o *CustconfBypassCache) HasMethodFilter() bool {
	if o != nil && o.MethodFilter != nil {
		return true
	}

	return false
}

// SetMethodFilter gets a reference to the given string and assigns it to the MethodFilter field.
func (o *CustconfBypassCache) SetMethodFilter(v string) {
	o.MethodFilter = &v
}

// GetPathFilter returns the PathFilter field value if set, zero value otherwise.
func (o *CustconfBypassCache) GetPathFilter() string {
	if o == nil || o.PathFilter == nil {
		var ret string
		return ret
	}
	return *o.PathFilter
}

// GetPathFilterOk returns a tuple with the PathFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfBypassCache) GetPathFilterOk() (*string, bool) {
	if o == nil || o.PathFilter == nil {
		return nil, false
	}
	return o.PathFilter, true
}

// HasPathFilter returns a boolean if a field has been set.
func (o *CustconfBypassCache) HasPathFilter() bool {
	if o != nil && o.PathFilter != nil {
		return true
	}

	return false
}

// SetPathFilter gets a reference to the given string and assigns it to the PathFilter field.
func (o *CustconfBypassCache) SetPathFilter(v string) {
	o.PathFilter = &v
}

// GetHeaderFilter returns the HeaderFilter field value if set, zero value otherwise.
func (o *CustconfBypassCache) GetHeaderFilter() string {
	if o == nil || o.HeaderFilter == nil {
		var ret string
		return ret
	}
	return *o.HeaderFilter
}

// GetHeaderFilterOk returns a tuple with the HeaderFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfBypassCache) GetHeaderFilterOk() (*string, bool) {
	if o == nil || o.HeaderFilter == nil {
		return nil, false
	}
	return o.HeaderFilter, true
}

// HasHeaderFilter returns a boolean if a field has been set.
func (o *CustconfBypassCache) HasHeaderFilter() bool {
	if o != nil && o.HeaderFilter != nil {
		return true
	}

	return false
}

// SetHeaderFilter gets a reference to the given string and assigns it to the HeaderFilter field.
func (o *CustconfBypassCache) SetHeaderFilter(v string) {
	o.HeaderFilter = &v
}

// GetCookieFilter returns the CookieFilter field value if set, zero value otherwise.
func (o *CustconfBypassCache) GetCookieFilter() string {
	if o == nil || o.CookieFilter == nil {
		var ret string
		return ret
	}
	return *o.CookieFilter
}

// GetCookieFilterOk returns a tuple with the CookieFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfBypassCache) GetCookieFilterOk() (*string, bool) {
	if o == nil || o.CookieFilter == nil {
		return nil, false
	}
	return o.CookieFilter, true
}

// HasCookieFilter returns a boolean if a field has been set.
func (o *CustconfBypassCache) HasCookieFilter() bool {
	if o != nil && o.CookieFilter != nil {
		return true
	}

	return false
}

// SetCookieFilter gets a reference to the given string and assigns it to the CookieFilter field.
func (o *CustconfBypassCache) SetCookieFilter(v string) {
	o.CookieFilter = &v
}

func (o CustconfBypassCache) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.MethodFilter != nil {
		toSerialize["methodFilter"] = o.MethodFilter
	}
	if o.PathFilter != nil {
		toSerialize["pathFilter"] = o.PathFilter
	}
	if o.HeaderFilter != nil {
		toSerialize["headerFilter"] = o.HeaderFilter
	}
	if o.CookieFilter != nil {
		toSerialize["cookieFilter"] = o.CookieFilter
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfBypassCache struct {
	value *CustconfBypassCache
	isSet bool
}

func (v NullableCustconfBypassCache) Get() *CustconfBypassCache {
	return v.value
}

func (v *NullableCustconfBypassCache) Set(val *CustconfBypassCache) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfBypassCache) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfBypassCache) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfBypassCache(val *CustconfBypassCache) *NullableCustconfBypassCache {
	return &NullableCustconfBypassCache{value: val, isSet: true}
}

func (v NullableCustconfBypassCache) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfBypassCache) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
