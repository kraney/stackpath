/*
 * Sites
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sites

import (
	"encoding/json"
)

// CustconfGzipOriginPull The compressed origin pull policy allows you to enable the CDN caching servers to request compressed assets from your origin. By enabling this policy, the CDN caching servers send your origin the HTTP Accept-Encoding header with the gzip code (Accept-Encoding: gzip).
type CustconfGzipOriginPull struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	// This enables support for compressed origin pull
	Enabled *bool `json:"enabled,omitempty"`
}

// NewCustconfGzipOriginPull instantiates a new CustconfGzipOriginPull object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfGzipOriginPull() *CustconfGzipOriginPull {
	this := CustconfGzipOriginPull{}
	return &this
}

// NewCustconfGzipOriginPullWithDefaults instantiates a new CustconfGzipOriginPull object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfGzipOriginPullWithDefaults() *CustconfGzipOriginPull {
	this := CustconfGzipOriginPull{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfGzipOriginPull) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfGzipOriginPull) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfGzipOriginPull) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfGzipOriginPull) SetId(v string) {
	o.Id = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustconfGzipOriginPull) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfGzipOriginPull) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustconfGzipOriginPull) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustconfGzipOriginPull) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o CustconfGzipOriginPull) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfGzipOriginPull struct {
	value *CustconfGzipOriginPull
	isSet bool
}

func (v NullableCustconfGzipOriginPull) Get() *CustconfGzipOriginPull {
	return v.value
}

func (v *NullableCustconfGzipOriginPull) Set(val *CustconfGzipOriginPull) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfGzipOriginPull) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfGzipOriginPull) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfGzipOriginPull(val *CustconfGzipOriginPull) *NullableCustconfGzipOriginPull {
	return &NullableCustconfGzipOriginPull{value: val, isSet: true}
}

func (v NullableCustconfGzipOriginPull) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfGzipOriginPull) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
