/*
 * Sites
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sites

import (
	"encoding/json"
)

// SchemadeliveryOrigin A CDN site's origin  Origins are the original sources of the data that is cached by the CDN on request.
type SchemadeliveryOrigin struct {
	// An origin's unique identifier
	Id *string `json:"id,omitempty"`
	// The stack for which the origin belongs to
	StackId *string `json:"stackId,omitempty"`
	// Whether or not an origin is dedicated to a CDN site  Dedicated origins cannot be used by any site other than that to which it is dedicated.
	Dedicated *bool `json:"dedicated,omitempty"`
	// The ID of the CDN site to which an origin is dedicated
	SiteId *string `json:"siteId,omitempty"`
	Http *DeliveryHTTPOrigin `json:"http,omitempty"`
	StackpathStorage *DeliveryStackPathStorageOrigin `json:"stackpathStorage,omitempty"`
	S3Storage *DeliveryAWSS3Origin `json:"s3Storage,omitempty"`
	GoogleCloudStorage *DeliveryGoogleStorageOrigin `json:"googleCloudStorage,omitempty"`
}

// NewSchemadeliveryOrigin instantiates a new SchemadeliveryOrigin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemadeliveryOrigin() *SchemadeliveryOrigin {
	this := SchemadeliveryOrigin{}
	return &this
}

// NewSchemadeliveryOriginWithDefaults instantiates a new SchemadeliveryOrigin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemadeliveryOriginWithDefaults() *SchemadeliveryOrigin {
	this := SchemadeliveryOrigin{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemadeliveryOrigin) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemadeliveryOrigin) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemadeliveryOrigin) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemadeliveryOrigin) SetId(v string) {
	o.Id = &v
}

// GetStackId returns the StackId field value if set, zero value otherwise.
func (o *SchemadeliveryOrigin) GetStackId() string {
	if o == nil || o.StackId == nil {
		var ret string
		return ret
	}
	return *o.StackId
}

// GetStackIdOk returns a tuple with the StackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemadeliveryOrigin) GetStackIdOk() (*string, bool) {
	if o == nil || o.StackId == nil {
		return nil, false
	}
	return o.StackId, true
}

// HasStackId returns a boolean if a field has been set.
func (o *SchemadeliveryOrigin) HasStackId() bool {
	if o != nil && o.StackId != nil {
		return true
	}

	return false
}

// SetStackId gets a reference to the given string and assigns it to the StackId field.
func (o *SchemadeliveryOrigin) SetStackId(v string) {
	o.StackId = &v
}

// GetDedicated returns the Dedicated field value if set, zero value otherwise.
func (o *SchemadeliveryOrigin) GetDedicated() bool {
	if o == nil || o.Dedicated == nil {
		var ret bool
		return ret
	}
	return *o.Dedicated
}

// GetDedicatedOk returns a tuple with the Dedicated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemadeliveryOrigin) GetDedicatedOk() (*bool, bool) {
	if o == nil || o.Dedicated == nil {
		return nil, false
	}
	return o.Dedicated, true
}

// HasDedicated returns a boolean if a field has been set.
func (o *SchemadeliveryOrigin) HasDedicated() bool {
	if o != nil && o.Dedicated != nil {
		return true
	}

	return false
}

// SetDedicated gets a reference to the given bool and assigns it to the Dedicated field.
func (o *SchemadeliveryOrigin) SetDedicated(v bool) {
	o.Dedicated = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *SchemadeliveryOrigin) GetSiteId() string {
	if o == nil || o.SiteId == nil {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemadeliveryOrigin) GetSiteIdOk() (*string, bool) {
	if o == nil || o.SiteId == nil {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *SchemadeliveryOrigin) HasSiteId() bool {
	if o != nil && o.SiteId != nil {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *SchemadeliveryOrigin) SetSiteId(v string) {
	o.SiteId = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *SchemadeliveryOrigin) GetHttp() DeliveryHTTPOrigin {
	if o == nil || o.Http == nil {
		var ret DeliveryHTTPOrigin
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemadeliveryOrigin) GetHttpOk() (*DeliveryHTTPOrigin, bool) {
	if o == nil || o.Http == nil {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *SchemadeliveryOrigin) HasHttp() bool {
	if o != nil && o.Http != nil {
		return true
	}

	return false
}

// SetHttp gets a reference to the given DeliveryHTTPOrigin and assigns it to the Http field.
func (o *SchemadeliveryOrigin) SetHttp(v DeliveryHTTPOrigin) {
	o.Http = &v
}

// GetStackpathStorage returns the StackpathStorage field value if set, zero value otherwise.
func (o *SchemadeliveryOrigin) GetStackpathStorage() DeliveryStackPathStorageOrigin {
	if o == nil || o.StackpathStorage == nil {
		var ret DeliveryStackPathStorageOrigin
		return ret
	}
	return *o.StackpathStorage
}

// GetStackpathStorageOk returns a tuple with the StackpathStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemadeliveryOrigin) GetStackpathStorageOk() (*DeliveryStackPathStorageOrigin, bool) {
	if o == nil || o.StackpathStorage == nil {
		return nil, false
	}
	return o.StackpathStorage, true
}

// HasStackpathStorage returns a boolean if a field has been set.
func (o *SchemadeliveryOrigin) HasStackpathStorage() bool {
	if o != nil && o.StackpathStorage != nil {
		return true
	}

	return false
}

// SetStackpathStorage gets a reference to the given DeliveryStackPathStorageOrigin and assigns it to the StackpathStorage field.
func (o *SchemadeliveryOrigin) SetStackpathStorage(v DeliveryStackPathStorageOrigin) {
	o.StackpathStorage = &v
}

// GetS3Storage returns the S3Storage field value if set, zero value otherwise.
func (o *SchemadeliveryOrigin) GetS3Storage() DeliveryAWSS3Origin {
	if o == nil || o.S3Storage == nil {
		var ret DeliveryAWSS3Origin
		return ret
	}
	return *o.S3Storage
}

// GetS3StorageOk returns a tuple with the S3Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemadeliveryOrigin) GetS3StorageOk() (*DeliveryAWSS3Origin, bool) {
	if o == nil || o.S3Storage == nil {
		return nil, false
	}
	return o.S3Storage, true
}

// HasS3Storage returns a boolean if a field has been set.
func (o *SchemadeliveryOrigin) HasS3Storage() bool {
	if o != nil && o.S3Storage != nil {
		return true
	}

	return false
}

// SetS3Storage gets a reference to the given DeliveryAWSS3Origin and assigns it to the S3Storage field.
func (o *SchemadeliveryOrigin) SetS3Storage(v DeliveryAWSS3Origin) {
	o.S3Storage = &v
}

// GetGoogleCloudStorage returns the GoogleCloudStorage field value if set, zero value otherwise.
func (o *SchemadeliveryOrigin) GetGoogleCloudStorage() DeliveryGoogleStorageOrigin {
	if o == nil || o.GoogleCloudStorage == nil {
		var ret DeliveryGoogleStorageOrigin
		return ret
	}
	return *o.GoogleCloudStorage
}

// GetGoogleCloudStorageOk returns a tuple with the GoogleCloudStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemadeliveryOrigin) GetGoogleCloudStorageOk() (*DeliveryGoogleStorageOrigin, bool) {
	if o == nil || o.GoogleCloudStorage == nil {
		return nil, false
	}
	return o.GoogleCloudStorage, true
}

// HasGoogleCloudStorage returns a boolean if a field has been set.
func (o *SchemadeliveryOrigin) HasGoogleCloudStorage() bool {
	if o != nil && o.GoogleCloudStorage != nil {
		return true
	}

	return false
}

// SetGoogleCloudStorage gets a reference to the given DeliveryGoogleStorageOrigin and assigns it to the GoogleCloudStorage field.
func (o *SchemadeliveryOrigin) SetGoogleCloudStorage(v DeliveryGoogleStorageOrigin) {
	o.GoogleCloudStorage = &v
}

func (o SchemadeliveryOrigin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.StackId != nil {
		toSerialize["stackId"] = o.StackId
	}
	if o.Dedicated != nil {
		toSerialize["dedicated"] = o.Dedicated
	}
	if o.SiteId != nil {
		toSerialize["siteId"] = o.SiteId
	}
	if o.Http != nil {
		toSerialize["http"] = o.Http
	}
	if o.StackpathStorage != nil {
		toSerialize["stackpathStorage"] = o.StackpathStorage
	}
	if o.S3Storage != nil {
		toSerialize["s3Storage"] = o.S3Storage
	}
	if o.GoogleCloudStorage != nil {
		toSerialize["googleCloudStorage"] = o.GoogleCloudStorage
	}
	return json.Marshal(toSerialize)
}

type NullableSchemadeliveryOrigin struct {
	value *SchemadeliveryOrigin
	isSet bool
}

func (v NullableSchemadeliveryOrigin) Get() *SchemadeliveryOrigin {
	return v.value
}

func (v *NullableSchemadeliveryOrigin) Set(val *SchemadeliveryOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemadeliveryOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemadeliveryOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemadeliveryOrigin(val *SchemadeliveryOrigin) *NullableSchemadeliveryOrigin {
	return &NullableSchemadeliveryOrigin{value: val, isSet: true}
}

func (v NullableSchemadeliveryOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemadeliveryOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
