/*
 * Sites
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sites

import (
	"encoding/json"
)

// CustconfStaticHeader The static header injection policy allows you to insert headers into the CDN request and response processor.
type CustconfStaticHeader struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	// This is the static HTTP header you want inserted into the CDN request.
	ClientRequest *string `json:"clientRequest,omitempty"`
	// This is the static HTTP header you want inserted into the CDN response.
	Http *string `json:"http,omitempty"`
	// This is the HTTP header you want inserted into the origin pull request.
	OriginPull *string `json:"originPull,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	// String of values delimited by a ',' character.
	MethodFilter *string `json:"methodFilter,omitempty"`
	// String of values delimited by a ',' character.
	PathFilter *string `json:"pathFilter,omitempty"`
	// String of values delimited by a ',' character.
	HeaderFilter *string `json:"headerFilter,omitempty"`
}

// NewCustconfStaticHeader instantiates a new CustconfStaticHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfStaticHeader() *CustconfStaticHeader {
	this := CustconfStaticHeader{}
	return &this
}

// NewCustconfStaticHeaderWithDefaults instantiates a new CustconfStaticHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfStaticHeaderWithDefaults() *CustconfStaticHeader {
	this := CustconfStaticHeader{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfStaticHeader) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfStaticHeader) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfStaticHeader) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfStaticHeader) SetId(v string) {
	o.Id = &v
}

// GetClientRequest returns the ClientRequest field value if set, zero value otherwise.
func (o *CustconfStaticHeader) GetClientRequest() string {
	if o == nil || o.ClientRequest == nil {
		var ret string
		return ret
	}
	return *o.ClientRequest
}

// GetClientRequestOk returns a tuple with the ClientRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfStaticHeader) GetClientRequestOk() (*string, bool) {
	if o == nil || o.ClientRequest == nil {
		return nil, false
	}
	return o.ClientRequest, true
}

// HasClientRequest returns a boolean if a field has been set.
func (o *CustconfStaticHeader) HasClientRequest() bool {
	if o != nil && o.ClientRequest != nil {
		return true
	}

	return false
}

// SetClientRequest gets a reference to the given string and assigns it to the ClientRequest field.
func (o *CustconfStaticHeader) SetClientRequest(v string) {
	o.ClientRequest = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *CustconfStaticHeader) GetHttp() string {
	if o == nil || o.Http == nil {
		var ret string
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfStaticHeader) GetHttpOk() (*string, bool) {
	if o == nil || o.Http == nil {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *CustconfStaticHeader) HasHttp() bool {
	if o != nil && o.Http != nil {
		return true
	}

	return false
}

// SetHttp gets a reference to the given string and assigns it to the Http field.
func (o *CustconfStaticHeader) SetHttp(v string) {
	o.Http = &v
}

// GetOriginPull returns the OriginPull field value if set, zero value otherwise.
func (o *CustconfStaticHeader) GetOriginPull() string {
	if o == nil || o.OriginPull == nil {
		var ret string
		return ret
	}
	return *o.OriginPull
}

// GetOriginPullOk returns a tuple with the OriginPull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfStaticHeader) GetOriginPullOk() (*string, bool) {
	if o == nil || o.OriginPull == nil {
		return nil, false
	}
	return o.OriginPull, true
}

// HasOriginPull returns a boolean if a field has been set.
func (o *CustconfStaticHeader) HasOriginPull() bool {
	if o != nil && o.OriginPull != nil {
		return true
	}

	return false
}

// SetOriginPull gets a reference to the given string and assigns it to the OriginPull field.
func (o *CustconfStaticHeader) SetOriginPull(v string) {
	o.OriginPull = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustconfStaticHeader) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfStaticHeader) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustconfStaticHeader) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustconfStaticHeader) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMethodFilter returns the MethodFilter field value if set, zero value otherwise.
func (o *CustconfStaticHeader) GetMethodFilter() string {
	if o == nil || o.MethodFilter == nil {
		var ret string
		return ret
	}
	return *o.MethodFilter
}

// GetMethodFilterOk returns a tuple with the MethodFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfStaticHeader) GetMethodFilterOk() (*string, bool) {
	if o == nil || o.MethodFilter == nil {
		return nil, false
	}
	return o.MethodFilter, true
}

// HasMethodFilter returns a boolean if a field has been set.
func (o *CustconfStaticHeader) HasMethodFilter() bool {
	if o != nil && o.MethodFilter != nil {
		return true
	}

	return false
}

// SetMethodFilter gets a reference to the given string and assigns it to the MethodFilter field.
func (o *CustconfStaticHeader) SetMethodFilter(v string) {
	o.MethodFilter = &v
}

// GetPathFilter returns the PathFilter field value if set, zero value otherwise.
func (o *CustconfStaticHeader) GetPathFilter() string {
	if o == nil || o.PathFilter == nil {
		var ret string
		return ret
	}
	return *o.PathFilter
}

// GetPathFilterOk returns a tuple with the PathFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfStaticHeader) GetPathFilterOk() (*string, bool) {
	if o == nil || o.PathFilter == nil {
		return nil, false
	}
	return o.PathFilter, true
}

// HasPathFilter returns a boolean if a field has been set.
func (o *CustconfStaticHeader) HasPathFilter() bool {
	if o != nil && o.PathFilter != nil {
		return true
	}

	return false
}

// SetPathFilter gets a reference to the given string and assigns it to the PathFilter field.
func (o *CustconfStaticHeader) SetPathFilter(v string) {
	o.PathFilter = &v
}

// GetHeaderFilter returns the HeaderFilter field value if set, zero value otherwise.
func (o *CustconfStaticHeader) GetHeaderFilter() string {
	if o == nil || o.HeaderFilter == nil {
		var ret string
		return ret
	}
	return *o.HeaderFilter
}

// GetHeaderFilterOk returns a tuple with the HeaderFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfStaticHeader) GetHeaderFilterOk() (*string, bool) {
	if o == nil || o.HeaderFilter == nil {
		return nil, false
	}
	return o.HeaderFilter, true
}

// HasHeaderFilter returns a boolean if a field has been set.
func (o *CustconfStaticHeader) HasHeaderFilter() bool {
	if o != nil && o.HeaderFilter != nil {
		return true
	}

	return false
}

// SetHeaderFilter gets a reference to the given string and assigns it to the HeaderFilter field.
func (o *CustconfStaticHeader) SetHeaderFilter(v string) {
	o.HeaderFilter = &v
}

func (o CustconfStaticHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ClientRequest != nil {
		toSerialize["clientRequest"] = o.ClientRequest
	}
	if o.Http != nil {
		toSerialize["http"] = o.Http
	}
	if o.OriginPull != nil {
		toSerialize["originPull"] = o.OriginPull
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.MethodFilter != nil {
		toSerialize["methodFilter"] = o.MethodFilter
	}
	if o.PathFilter != nil {
		toSerialize["pathFilter"] = o.PathFilter
	}
	if o.HeaderFilter != nil {
		toSerialize["headerFilter"] = o.HeaderFilter
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfStaticHeader struct {
	value *CustconfStaticHeader
	isSet bool
}

func (v NullableCustconfStaticHeader) Get() *CustconfStaticHeader {
	return v.value
}

func (v *NullableCustconfStaticHeader) Set(val *CustconfStaticHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfStaticHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfStaticHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfStaticHeader(val *CustconfStaticHeader) *NullableCustconfStaticHeader {
	return &NullableCustconfStaticHeader{value: val, isSet: true}
}

func (v NullableCustconfStaticHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfStaticHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
