/*
 * Sites
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sites

import (
	"encoding/json"
)

// CustconfRedirectMappings The response code redirection policy allows you to map cache response codes to an HTTP redirect response. When this policy is applied to a host, the caching servers will redirect clients to the URL specified in this policy instead of delivering the response code you mapped in the policy.
type CustconfRedirectMappings struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	// The HTTP cache response code that applies to this policy.
	Code *float32 `json:"code,omitempty"`
	// The URL that clients would be redirected to when applying this policy.
	RedirectURL *string `json:"redirectURL,omitempty"`
	// A token that will be replaced by the caching server with the URL of the request that triggered the policy. This token can be positioned anywhere in the redirect URL.
	ReplacementToken *string `json:"replacementToken,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	// String of values delimited by a ',' character.
	MethodFilter *string `json:"methodFilter,omitempty"`
	// String of values delimited by a ',' character.
	PathFilter *string `json:"pathFilter,omitempty"`
	// String of values delimited by a ',' character.
	HeaderFilter *string `json:"headerFilter,omitempty"`
}

// NewCustconfRedirectMappings instantiates a new CustconfRedirectMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfRedirectMappings() *CustconfRedirectMappings {
	this := CustconfRedirectMappings{}
	return &this
}

// NewCustconfRedirectMappingsWithDefaults instantiates a new CustconfRedirectMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfRedirectMappingsWithDefaults() *CustconfRedirectMappings {
	this := CustconfRedirectMappings{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfRedirectMappings) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfRedirectMappings) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfRedirectMappings) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfRedirectMappings) SetId(v string) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CustconfRedirectMappings) GetCode() float32 {
	if o == nil || o.Code == nil {
		var ret float32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfRedirectMappings) GetCodeOk() (*float32, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CustconfRedirectMappings) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given float32 and assigns it to the Code field.
func (o *CustconfRedirectMappings) SetCode(v float32) {
	o.Code = &v
}

// GetRedirectURL returns the RedirectURL field value if set, zero value otherwise.
func (o *CustconfRedirectMappings) GetRedirectURL() string {
	if o == nil || o.RedirectURL == nil {
		var ret string
		return ret
	}
	return *o.RedirectURL
}

// GetRedirectURLOk returns a tuple with the RedirectURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfRedirectMappings) GetRedirectURLOk() (*string, bool) {
	if o == nil || o.RedirectURL == nil {
		return nil, false
	}
	return o.RedirectURL, true
}

// HasRedirectURL returns a boolean if a field has been set.
func (o *CustconfRedirectMappings) HasRedirectURL() bool {
	if o != nil && o.RedirectURL != nil {
		return true
	}

	return false
}

// SetRedirectURL gets a reference to the given string and assigns it to the RedirectURL field.
func (o *CustconfRedirectMappings) SetRedirectURL(v string) {
	o.RedirectURL = &v
}

// GetReplacementToken returns the ReplacementToken field value if set, zero value otherwise.
func (o *CustconfRedirectMappings) GetReplacementToken() string {
	if o == nil || o.ReplacementToken == nil {
		var ret string
		return ret
	}
	return *o.ReplacementToken
}

// GetReplacementTokenOk returns a tuple with the ReplacementToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfRedirectMappings) GetReplacementTokenOk() (*string, bool) {
	if o == nil || o.ReplacementToken == nil {
		return nil, false
	}
	return o.ReplacementToken, true
}

// HasReplacementToken returns a boolean if a field has been set.
func (o *CustconfRedirectMappings) HasReplacementToken() bool {
	if o != nil && o.ReplacementToken != nil {
		return true
	}

	return false
}

// SetReplacementToken gets a reference to the given string and assigns it to the ReplacementToken field.
func (o *CustconfRedirectMappings) SetReplacementToken(v string) {
	o.ReplacementToken = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustconfRedirectMappings) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfRedirectMappings) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustconfRedirectMappings) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustconfRedirectMappings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMethodFilter returns the MethodFilter field value if set, zero value otherwise.
func (o *CustconfRedirectMappings) GetMethodFilter() string {
	if o == nil || o.MethodFilter == nil {
		var ret string
		return ret
	}
	return *o.MethodFilter
}

// GetMethodFilterOk returns a tuple with the MethodFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfRedirectMappings) GetMethodFilterOk() (*string, bool) {
	if o == nil || o.MethodFilter == nil {
		return nil, false
	}
	return o.MethodFilter, true
}

// HasMethodFilter returns a boolean if a field has been set.
func (o *CustconfRedirectMappings) HasMethodFilter() bool {
	if o != nil && o.MethodFilter != nil {
		return true
	}

	return false
}

// SetMethodFilter gets a reference to the given string and assigns it to the MethodFilter field.
func (o *CustconfRedirectMappings) SetMethodFilter(v string) {
	o.MethodFilter = &v
}

// GetPathFilter returns the PathFilter field value if set, zero value otherwise.
func (o *CustconfRedirectMappings) GetPathFilter() string {
	if o == nil || o.PathFilter == nil {
		var ret string
		return ret
	}
	return *o.PathFilter
}

// GetPathFilterOk returns a tuple with the PathFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfRedirectMappings) GetPathFilterOk() (*string, bool) {
	if o == nil || o.PathFilter == nil {
		return nil, false
	}
	return o.PathFilter, true
}

// HasPathFilter returns a boolean if a field has been set.
func (o *CustconfRedirectMappings) HasPathFilter() bool {
	if o != nil && o.PathFilter != nil {
		return true
	}

	return false
}

// SetPathFilter gets a reference to the given string and assigns it to the PathFilter field.
func (o *CustconfRedirectMappings) SetPathFilter(v string) {
	o.PathFilter = &v
}

// GetHeaderFilter returns the HeaderFilter field value if set, zero value otherwise.
func (o *CustconfRedirectMappings) GetHeaderFilter() string {
	if o == nil || o.HeaderFilter == nil {
		var ret string
		return ret
	}
	return *o.HeaderFilter
}

// GetHeaderFilterOk returns a tuple with the HeaderFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfRedirectMappings) GetHeaderFilterOk() (*string, bool) {
	if o == nil || o.HeaderFilter == nil {
		return nil, false
	}
	return o.HeaderFilter, true
}

// HasHeaderFilter returns a boolean if a field has been set.
func (o *CustconfRedirectMappings) HasHeaderFilter() bool {
	if o != nil && o.HeaderFilter != nil {
		return true
	}

	return false
}

// SetHeaderFilter gets a reference to the given string and assigns it to the HeaderFilter field.
func (o *CustconfRedirectMappings) SetHeaderFilter(v string) {
	o.HeaderFilter = &v
}

func (o CustconfRedirectMappings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.RedirectURL != nil {
		toSerialize["redirectURL"] = o.RedirectURL
	}
	if o.ReplacementToken != nil {
		toSerialize["replacementToken"] = o.ReplacementToken
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.MethodFilter != nil {
		toSerialize["methodFilter"] = o.MethodFilter
	}
	if o.PathFilter != nil {
		toSerialize["pathFilter"] = o.PathFilter
	}
	if o.HeaderFilter != nil {
		toSerialize["headerFilter"] = o.HeaderFilter
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfRedirectMappings struct {
	value *CustconfRedirectMappings
	isSet bool
}

func (v NullableCustconfRedirectMappings) Get() *CustconfRedirectMappings {
	return v.value
}

func (v *NullableCustconfRedirectMappings) Set(val *CustconfRedirectMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfRedirectMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfRedirectMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfRedirectMappings(val *CustconfRedirectMappings) *NullableCustconfRedirectMappings {
	return &NullableCustconfRedirectMappings{value: val, isSet: true}
}

func (v NullableCustconfRedirectMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfRedirectMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
