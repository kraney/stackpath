/*
 * Sites
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sites

import (
	"encoding/json"
)

// CustconfCacheControl The browser caching policy allows you to control the browser caching behavior of your assets independently from the CDN cache. For example, this policy allows you to set lower or higher TTLs for the browser than those of the CDN cache.
type CustconfCacheControl struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	// String of values delimited by a ',' character.
	StatusCodeMatch *string `json:"statusCodeMatch,omitempty"`
	// The client TTL controls the lifetime of the asset in the browser's cache. The value entered here will be sent to the browser in the Cache-Control max-age directive for HTTP 1.1 clients and the Expires header for HTTP 1.0 clients.
	MaxAge *int32 `json:"maxAge,omitempty"`
	// Selecting this option instructs the CDN caching servers to insert the must-revalidate directive on all HTTP responses sent to clients.
	MustRevalidate *bool `json:"mustRevalidate,omitempty"`
	// Selecting this option allows the CDN to synchronize the Max-Age header it sends to clients with the remaining TTL of the asset in the cache. This allows assets to expire from the browser cache at the same time they expire from the CDN.
	SynchronizeMaxAge *bool `json:"synchronizeMaxAge,omitempty"`
	// This allows you to specify a custom Cache-Control header to be used by the CDN on all HTTP responses targeted by this policy. Note: Do not include the header name (Cache-Control) in this field. Only the value of the header should be specified.
	Override *string `json:"override,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

// NewCustconfCacheControl instantiates a new CustconfCacheControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfCacheControl() *CustconfCacheControl {
	this := CustconfCacheControl{}
	return &this
}

// NewCustconfCacheControlWithDefaults instantiates a new CustconfCacheControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfCacheControlWithDefaults() *CustconfCacheControl {
	this := CustconfCacheControl{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfCacheControl) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCacheControl) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfCacheControl) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfCacheControl) SetId(v string) {
	o.Id = &v
}

// GetStatusCodeMatch returns the StatusCodeMatch field value if set, zero value otherwise.
func (o *CustconfCacheControl) GetStatusCodeMatch() string {
	if o == nil || o.StatusCodeMatch == nil {
		var ret string
		return ret
	}
	return *o.StatusCodeMatch
}

// GetStatusCodeMatchOk returns a tuple with the StatusCodeMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCacheControl) GetStatusCodeMatchOk() (*string, bool) {
	if o == nil || o.StatusCodeMatch == nil {
		return nil, false
	}
	return o.StatusCodeMatch, true
}

// HasStatusCodeMatch returns a boolean if a field has been set.
func (o *CustconfCacheControl) HasStatusCodeMatch() bool {
	if o != nil && o.StatusCodeMatch != nil {
		return true
	}

	return false
}

// SetStatusCodeMatch gets a reference to the given string and assigns it to the StatusCodeMatch field.
func (o *CustconfCacheControl) SetStatusCodeMatch(v string) {
	o.StatusCodeMatch = &v
}

// GetMaxAge returns the MaxAge field value if set, zero value otherwise.
func (o *CustconfCacheControl) GetMaxAge() int32 {
	if o == nil || o.MaxAge == nil {
		var ret int32
		return ret
	}
	return *o.MaxAge
}

// GetMaxAgeOk returns a tuple with the MaxAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCacheControl) GetMaxAgeOk() (*int32, bool) {
	if o == nil || o.MaxAge == nil {
		return nil, false
	}
	return o.MaxAge, true
}

// HasMaxAge returns a boolean if a field has been set.
func (o *CustconfCacheControl) HasMaxAge() bool {
	if o != nil && o.MaxAge != nil {
		return true
	}

	return false
}

// SetMaxAge gets a reference to the given int32 and assigns it to the MaxAge field.
func (o *CustconfCacheControl) SetMaxAge(v int32) {
	o.MaxAge = &v
}

// GetMustRevalidate returns the MustRevalidate field value if set, zero value otherwise.
func (o *CustconfCacheControl) GetMustRevalidate() bool {
	if o == nil || o.MustRevalidate == nil {
		var ret bool
		return ret
	}
	return *o.MustRevalidate
}

// GetMustRevalidateOk returns a tuple with the MustRevalidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCacheControl) GetMustRevalidateOk() (*bool, bool) {
	if o == nil || o.MustRevalidate == nil {
		return nil, false
	}
	return o.MustRevalidate, true
}

// HasMustRevalidate returns a boolean if a field has been set.
func (o *CustconfCacheControl) HasMustRevalidate() bool {
	if o != nil && o.MustRevalidate != nil {
		return true
	}

	return false
}

// SetMustRevalidate gets a reference to the given bool and assigns it to the MustRevalidate field.
func (o *CustconfCacheControl) SetMustRevalidate(v bool) {
	o.MustRevalidate = &v
}

// GetSynchronizeMaxAge returns the SynchronizeMaxAge field value if set, zero value otherwise.
func (o *CustconfCacheControl) GetSynchronizeMaxAge() bool {
	if o == nil || o.SynchronizeMaxAge == nil {
		var ret bool
		return ret
	}
	return *o.SynchronizeMaxAge
}

// GetSynchronizeMaxAgeOk returns a tuple with the SynchronizeMaxAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCacheControl) GetSynchronizeMaxAgeOk() (*bool, bool) {
	if o == nil || o.SynchronizeMaxAge == nil {
		return nil, false
	}
	return o.SynchronizeMaxAge, true
}

// HasSynchronizeMaxAge returns a boolean if a field has been set.
func (o *CustconfCacheControl) HasSynchronizeMaxAge() bool {
	if o != nil && o.SynchronizeMaxAge != nil {
		return true
	}

	return false
}

// SetSynchronizeMaxAge gets a reference to the given bool and assigns it to the SynchronizeMaxAge field.
func (o *CustconfCacheControl) SetSynchronizeMaxAge(v bool) {
	o.SynchronizeMaxAge = &v
}

// GetOverride returns the Override field value if set, zero value otherwise.
func (o *CustconfCacheControl) GetOverride() string {
	if o == nil || o.Override == nil {
		var ret string
		return ret
	}
	return *o.Override
}

// GetOverrideOk returns a tuple with the Override field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCacheControl) GetOverrideOk() (*string, bool) {
	if o == nil || o.Override == nil {
		return nil, false
	}
	return o.Override, true
}

// HasOverride returns a boolean if a field has been set.
func (o *CustconfCacheControl) HasOverride() bool {
	if o != nil && o.Override != nil {
		return true
	}

	return false
}

// SetOverride gets a reference to the given string and assigns it to the Override field.
func (o *CustconfCacheControl) SetOverride(v string) {
	o.Override = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustconfCacheControl) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCacheControl) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustconfCacheControl) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustconfCacheControl) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o CustconfCacheControl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.StatusCodeMatch != nil {
		toSerialize["statusCodeMatch"] = o.StatusCodeMatch
	}
	if o.MaxAge != nil {
		toSerialize["maxAge"] = o.MaxAge
	}
	if o.MustRevalidate != nil {
		toSerialize["mustRevalidate"] = o.MustRevalidate
	}
	if o.SynchronizeMaxAge != nil {
		toSerialize["synchronizeMaxAge"] = o.SynchronizeMaxAge
	}
	if o.Override != nil {
		toSerialize["override"] = o.Override
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfCacheControl struct {
	value *CustconfCacheControl
	isSet bool
}

func (v NullableCustconfCacheControl) Get() *CustconfCacheControl {
	return v.value
}

func (v *NullableCustconfCacheControl) Set(val *CustconfCacheControl) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfCacheControl) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfCacheControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfCacheControl(val *CustconfCacheControl) *NullableCustconfCacheControl {
	return &NullableCustconfCacheControl{value: val, isSet: true}
}

func (v NullableCustconfCacheControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfCacheControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
