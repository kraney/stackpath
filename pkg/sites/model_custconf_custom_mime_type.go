/*
 * Sites
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sites

import (
	"encoding/json"
)

// CustconfCustomMimeType The custom mime type policy allows you to map file extensions to specific mime types for the CDN caching servers to use when delivering assets. The mime types you map using this policy may also be limited to specific response codes to address scenarios in which the mime type changes based on the response code.
type CustconfCustomMimeType struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	// String of values delimited by a ',' character. A comma separated list of status codes that apply to this policy
	Code *string `json:"code,omitempty"`
	// String of values delimited by a ',' character. This is a comma separated list of file extension and mime type pairs that describe the mime type mapping for the CDN caching servers. The file extension and mime type values should be delimited by a colon (:). For example, to map files ending with jpg to the image/jpeg mime type and files ending with png to image/png, set this value to: jpg:image/jpeg,png:image/png.
	ExtensionMap *string `json:"extensionMap,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	// String of values delimited by a ',' character.
	MethodFilter *string `json:"methodFilter,omitempty"`
	// String of values delimited by a ',' character.
	PathFilter *string `json:"pathFilter,omitempty"`
	// String of values delimited by a ',' character.
	HeaderFilter *string `json:"headerFilter,omitempty"`
}

// NewCustconfCustomMimeType instantiates a new CustconfCustomMimeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfCustomMimeType() *CustconfCustomMimeType {
	this := CustconfCustomMimeType{}
	return &this
}

// NewCustconfCustomMimeTypeWithDefaults instantiates a new CustconfCustomMimeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfCustomMimeTypeWithDefaults() *CustconfCustomMimeType {
	this := CustconfCustomMimeType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfCustomMimeType) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCustomMimeType) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfCustomMimeType) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfCustomMimeType) SetId(v string) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CustconfCustomMimeType) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCustomMimeType) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CustconfCustomMimeType) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CustconfCustomMimeType) SetCode(v string) {
	o.Code = &v
}

// GetExtensionMap returns the ExtensionMap field value if set, zero value otherwise.
func (o *CustconfCustomMimeType) GetExtensionMap() string {
	if o == nil || o.ExtensionMap == nil {
		var ret string
		return ret
	}
	return *o.ExtensionMap
}

// GetExtensionMapOk returns a tuple with the ExtensionMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCustomMimeType) GetExtensionMapOk() (*string, bool) {
	if o == nil || o.ExtensionMap == nil {
		return nil, false
	}
	return o.ExtensionMap, true
}

// HasExtensionMap returns a boolean if a field has been set.
func (o *CustconfCustomMimeType) HasExtensionMap() bool {
	if o != nil && o.ExtensionMap != nil {
		return true
	}

	return false
}

// SetExtensionMap gets a reference to the given string and assigns it to the ExtensionMap field.
func (o *CustconfCustomMimeType) SetExtensionMap(v string) {
	o.ExtensionMap = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustconfCustomMimeType) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCustomMimeType) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustconfCustomMimeType) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustconfCustomMimeType) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMethodFilter returns the MethodFilter field value if set, zero value otherwise.
func (o *CustconfCustomMimeType) GetMethodFilter() string {
	if o == nil || o.MethodFilter == nil {
		var ret string
		return ret
	}
	return *o.MethodFilter
}

// GetMethodFilterOk returns a tuple with the MethodFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCustomMimeType) GetMethodFilterOk() (*string, bool) {
	if o == nil || o.MethodFilter == nil {
		return nil, false
	}
	return o.MethodFilter, true
}

// HasMethodFilter returns a boolean if a field has been set.
func (o *CustconfCustomMimeType) HasMethodFilter() bool {
	if o != nil && o.MethodFilter != nil {
		return true
	}

	return false
}

// SetMethodFilter gets a reference to the given string and assigns it to the MethodFilter field.
func (o *CustconfCustomMimeType) SetMethodFilter(v string) {
	o.MethodFilter = &v
}

// GetPathFilter returns the PathFilter field value if set, zero value otherwise.
func (o *CustconfCustomMimeType) GetPathFilter() string {
	if o == nil || o.PathFilter == nil {
		var ret string
		return ret
	}
	return *o.PathFilter
}

// GetPathFilterOk returns a tuple with the PathFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCustomMimeType) GetPathFilterOk() (*string, bool) {
	if o == nil || o.PathFilter == nil {
		return nil, false
	}
	return o.PathFilter, true
}

// HasPathFilter returns a boolean if a field has been set.
func (o *CustconfCustomMimeType) HasPathFilter() bool {
	if o != nil && o.PathFilter != nil {
		return true
	}

	return false
}

// SetPathFilter gets a reference to the given string and assigns it to the PathFilter field.
func (o *CustconfCustomMimeType) SetPathFilter(v string) {
	o.PathFilter = &v
}

// GetHeaderFilter returns the HeaderFilter field value if set, zero value otherwise.
func (o *CustconfCustomMimeType) GetHeaderFilter() string {
	if o == nil || o.HeaderFilter == nil {
		var ret string
		return ret
	}
	return *o.HeaderFilter
}

// GetHeaderFilterOk returns a tuple with the HeaderFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCustomMimeType) GetHeaderFilterOk() (*string, bool) {
	if o == nil || o.HeaderFilter == nil {
		return nil, false
	}
	return o.HeaderFilter, true
}

// HasHeaderFilter returns a boolean if a field has been set.
func (o *CustconfCustomMimeType) HasHeaderFilter() bool {
	if o != nil && o.HeaderFilter != nil {
		return true
	}

	return false
}

// SetHeaderFilter gets a reference to the given string and assigns it to the HeaderFilter field.
func (o *CustconfCustomMimeType) SetHeaderFilter(v string) {
	o.HeaderFilter = &v
}

func (o CustconfCustomMimeType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.ExtensionMap != nil {
		toSerialize["extensionMap"] = o.ExtensionMap
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.MethodFilter != nil {
		toSerialize["methodFilter"] = o.MethodFilter
	}
	if o.PathFilter != nil {
		toSerialize["pathFilter"] = o.PathFilter
	}
	if o.HeaderFilter != nil {
		toSerialize["headerFilter"] = o.HeaderFilter
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfCustomMimeType struct {
	value *CustconfCustomMimeType
	isSet bool
}

func (v NullableCustconfCustomMimeType) Get() *CustconfCustomMimeType {
	return v.value
}

func (v *NullableCustconfCustomMimeType) Set(val *CustconfCustomMimeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfCustomMimeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfCustomMimeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfCustomMimeType(val *CustconfCustomMimeType) *NullableCustconfCustomMimeType {
	return &NullableCustconfCustomMimeType{value: val, isSet: true}
}

func (v NullableCustconfCustomMimeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfCustomMimeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
