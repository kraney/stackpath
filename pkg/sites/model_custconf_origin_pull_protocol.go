/*
 * Sites
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sites

import (
	"encoding/json"
)

// CustconfOriginPullProtocol The Origin Pull Protocol allows you to configure the CDN caching servers to use secured or non-secured connection to Origin.
type CustconfOriginPullProtocol struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	Protocol *CustconfOriginPullProtocolProtocolEnumWrapperValue `json:"protocol,omitempty"`
	// This key allows you to configure the CDN caching servers to use SNI while making Secured Connection to Origin.
	EnableSNI *bool `json:"enableSNI,omitempty"`
}

// NewCustconfOriginPullProtocol instantiates a new CustconfOriginPullProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfOriginPullProtocol() *CustconfOriginPullProtocol {
	this := CustconfOriginPullProtocol{}
	var protocol CustconfOriginPullProtocolProtocolEnumWrapperValue = "UNKNOWN"
	this.Protocol = &protocol
	return &this
}

// NewCustconfOriginPullProtocolWithDefaults instantiates a new CustconfOriginPullProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfOriginPullProtocolWithDefaults() *CustconfOriginPullProtocol {
	this := CustconfOriginPullProtocol{}
	var protocol CustconfOriginPullProtocolProtocolEnumWrapperValue = "UNKNOWN"
	this.Protocol = &protocol
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfOriginPullProtocol) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfOriginPullProtocol) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfOriginPullProtocol) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfOriginPullProtocol) SetId(v string) {
	o.Id = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *CustconfOriginPullProtocol) GetProtocol() CustconfOriginPullProtocolProtocolEnumWrapperValue {
	if o == nil || o.Protocol == nil {
		var ret CustconfOriginPullProtocolProtocolEnumWrapperValue
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfOriginPullProtocol) GetProtocolOk() (*CustconfOriginPullProtocolProtocolEnumWrapperValue, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *CustconfOriginPullProtocol) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given CustconfOriginPullProtocolProtocolEnumWrapperValue and assigns it to the Protocol field.
func (o *CustconfOriginPullProtocol) SetProtocol(v CustconfOriginPullProtocolProtocolEnumWrapperValue) {
	o.Protocol = &v
}

// GetEnableSNI returns the EnableSNI field value if set, zero value otherwise.
func (o *CustconfOriginPullProtocol) GetEnableSNI() bool {
	if o == nil || o.EnableSNI == nil {
		var ret bool
		return ret
	}
	return *o.EnableSNI
}

// GetEnableSNIOk returns a tuple with the EnableSNI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfOriginPullProtocol) GetEnableSNIOk() (*bool, bool) {
	if o == nil || o.EnableSNI == nil {
		return nil, false
	}
	return o.EnableSNI, true
}

// HasEnableSNI returns a boolean if a field has been set.
func (o *CustconfOriginPullProtocol) HasEnableSNI() bool {
	if o != nil && o.EnableSNI != nil {
		return true
	}

	return false
}

// SetEnableSNI gets a reference to the given bool and assigns it to the EnableSNI field.
func (o *CustconfOriginPullProtocol) SetEnableSNI(v bool) {
	o.EnableSNI = &v
}

func (o CustconfOriginPullProtocol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	if o.EnableSNI != nil {
		toSerialize["enableSNI"] = o.EnableSNI
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfOriginPullProtocol struct {
	value *CustconfOriginPullProtocol
	isSet bool
}

func (v NullableCustconfOriginPullProtocol) Get() *CustconfOriginPullProtocol {
	return v.value
}

func (v *NullableCustconfOriginPullProtocol) Set(val *CustconfOriginPullProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfOriginPullProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfOriginPullProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfOriginPullProtocol(val *CustconfOriginPullProtocol) *NullableCustconfOriginPullProtocol {
	return &NullableCustconfOriginPullProtocol{value: val, isSet: true}
}

func (v NullableCustconfOriginPullProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfOriginPullProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
