/*
 * Stacks
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package stacks

import (
	"encoding/json"
)

// StackSetIAMPolicyRequest struct for StackSetIAMPolicyRequest
type StackSetIAMPolicyRequest struct {
	Policy *IamPolicy `json:"policy,omitempty"`
}

// NewStackSetIAMPolicyRequest instantiates a new StackSetIAMPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackSetIAMPolicyRequest() *StackSetIAMPolicyRequest {
	this := StackSetIAMPolicyRequest{}
	return &this
}

// NewStackSetIAMPolicyRequestWithDefaults instantiates a new StackSetIAMPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackSetIAMPolicyRequestWithDefaults() *StackSetIAMPolicyRequest {
	this := StackSetIAMPolicyRequest{}
	return &this
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *StackSetIAMPolicyRequest) GetPolicy() IamPolicy {
	if o == nil || o.Policy == nil {
		var ret IamPolicy
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackSetIAMPolicyRequest) GetPolicyOk() (*IamPolicy, bool) {
	if o == nil || o.Policy == nil {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *StackSetIAMPolicyRequest) HasPolicy() bool {
	if o != nil && o.Policy != nil {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given IamPolicy and assigns it to the Policy field.
func (o *StackSetIAMPolicyRequest) SetPolicy(v IamPolicy) {
	o.Policy = &v
}

func (o StackSetIAMPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Policy != nil {
		toSerialize["policy"] = o.Policy
	}
	return json.Marshal(toSerialize)
}

type NullableStackSetIAMPolicyRequest struct {
	value *StackSetIAMPolicyRequest
	isSet bool
}

func (v NullableStackSetIAMPolicyRequest) Get() *StackSetIAMPolicyRequest {
	return v.value
}

func (v *NullableStackSetIAMPolicyRequest) Set(val *StackSetIAMPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStackSetIAMPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStackSetIAMPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackSetIAMPolicyRequest(val *StackSetIAMPolicyRequest) *NullableStackSetIAMPolicyRequest {
	return &NullableStackSetIAMPolicyRequest{value: val, isSet: true}
}

func (v NullableStackSetIAMPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackSetIAMPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
