/*
 * Monitoring
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package monitoring

import (
	"encoding/json"
)

// V2TcpConfiguration TCP monitor configuration
type V2TcpConfiguration struct {
	// The host address of the service to monitor
	Host *string `json:"host,omitempty"`
	// The port of the service to monitor
	Port *int32 `json:"port,omitempty"`
	// Base64 encoded TCP data to send to the monitored service
	Data *string `json:"data,omitempty"`
}

// NewV2TcpConfiguration instantiates a new V2TcpConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2TcpConfiguration() *V2TcpConfiguration {
	this := V2TcpConfiguration{}
	return &this
}

// NewV2TcpConfigurationWithDefaults instantiates a new V2TcpConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2TcpConfigurationWithDefaults() *V2TcpConfiguration {
	this := V2TcpConfiguration{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *V2TcpConfiguration) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2TcpConfiguration) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *V2TcpConfiguration) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *V2TcpConfiguration) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *V2TcpConfiguration) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2TcpConfiguration) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *V2TcpConfiguration) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *V2TcpConfiguration) SetPort(v int32) {
	o.Port = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *V2TcpConfiguration) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2TcpConfiguration) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *V2TcpConfiguration) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *V2TcpConfiguration) SetData(v string) {
	o.Data = &v
}

func (o V2TcpConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableV2TcpConfiguration struct {
	value *V2TcpConfiguration
	isSet bool
}

func (v NullableV2TcpConfiguration) Get() *V2TcpConfiguration {
	return v.value
}

func (v *NullableV2TcpConfiguration) Set(val *V2TcpConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableV2TcpConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableV2TcpConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2TcpConfiguration(val *V2TcpConfiguration) *NullableV2TcpConfiguration {
	return &NullableV2TcpConfiguration{value: val, isSet: true}
}

func (v NullableV2TcpConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2TcpConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
