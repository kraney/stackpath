/*
 * Monitoring
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package monitoring

import (
	"encoding/json"
	"time"
)

// V2Monitor An instance of a service monitor
type V2Monitor struct {
	// A monitor's unique identifier
	Id *string `json:"id,omitempty"`
	// The name of a monitor  A monitor's name
	Name *string `json:"name,omitempty"`
	CurrentStatus *V2MonitorStatus `json:"currentStatus,omitempty"`
	// The percent of time a monitored service has had a status of UP or SLOW in the last hour
	UptimePercentage *float64 `json:"uptimePercentage,omitempty"`
	// The average response time for a monitor
	AvgResponseTime *string `json:"avgResponseTime,omitempty"`
	// The locations a service is monitored from.
	Locations *[]Monitoringv2Location `json:"locations,omitempty"`
	// The amount of time between each monitor check.  By default each service monitor will be checked every five minutes.
	Interval *string `json:"interval,omitempty"`
	// Then length of time to wait until the monitor check times out.
	Timeout *string `json:"timeout,omitempty"`
	IpVersion *V2IpVersion `json:"ipVersion,omitempty"`
	Http *V2HttpConfiguration `json:"http,omitempty"`
	Tcp *V2TcpConfiguration `json:"tcp,omitempty"`
	// The date a monitor was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The date a monitor was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Whether or not a monitor is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewV2Monitor instantiates a new V2Monitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2Monitor() *V2Monitor {
	this := V2Monitor{}
	var currentStatus V2MonitorStatus = "UNKNOWN"
	this.CurrentStatus = &currentStatus
	var ipVersion V2IpVersion = "IPV4"
	this.IpVersion = &ipVersion
	return &this
}

// NewV2MonitorWithDefaults instantiates a new V2Monitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2MonitorWithDefaults() *V2Monitor {
	this := V2Monitor{}
	var currentStatus V2MonitorStatus = "UNKNOWN"
	this.CurrentStatus = &currentStatus
	var ipVersion V2IpVersion = "IPV4"
	this.IpVersion = &ipVersion
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V2Monitor) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V2Monitor) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V2Monitor) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V2Monitor) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V2Monitor) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V2Monitor) SetName(v string) {
	o.Name = &v
}

// GetCurrentStatus returns the CurrentStatus field value if set, zero value otherwise.
func (o *V2Monitor) GetCurrentStatus() V2MonitorStatus {
	if o == nil || o.CurrentStatus == nil {
		var ret V2MonitorStatus
		return ret
	}
	return *o.CurrentStatus
}

// GetCurrentStatusOk returns a tuple with the CurrentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetCurrentStatusOk() (*V2MonitorStatus, bool) {
	if o == nil || o.CurrentStatus == nil {
		return nil, false
	}
	return o.CurrentStatus, true
}

// HasCurrentStatus returns a boolean if a field has been set.
func (o *V2Monitor) HasCurrentStatus() bool {
	if o != nil && o.CurrentStatus != nil {
		return true
	}

	return false
}

// SetCurrentStatus gets a reference to the given V2MonitorStatus and assigns it to the CurrentStatus field.
func (o *V2Monitor) SetCurrentStatus(v V2MonitorStatus) {
	o.CurrentStatus = &v
}

// GetUptimePercentage returns the UptimePercentage field value if set, zero value otherwise.
func (o *V2Monitor) GetUptimePercentage() float64 {
	if o == nil || o.UptimePercentage == nil {
		var ret float64
		return ret
	}
	return *o.UptimePercentage
}

// GetUptimePercentageOk returns a tuple with the UptimePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetUptimePercentageOk() (*float64, bool) {
	if o == nil || o.UptimePercentage == nil {
		return nil, false
	}
	return o.UptimePercentage, true
}

// HasUptimePercentage returns a boolean if a field has been set.
func (o *V2Monitor) HasUptimePercentage() bool {
	if o != nil && o.UptimePercentage != nil {
		return true
	}

	return false
}

// SetUptimePercentage gets a reference to the given float64 and assigns it to the UptimePercentage field.
func (o *V2Monitor) SetUptimePercentage(v float64) {
	o.UptimePercentage = &v
}

// GetAvgResponseTime returns the AvgResponseTime field value if set, zero value otherwise.
func (o *V2Monitor) GetAvgResponseTime() string {
	if o == nil || o.AvgResponseTime == nil {
		var ret string
		return ret
	}
	return *o.AvgResponseTime
}

// GetAvgResponseTimeOk returns a tuple with the AvgResponseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetAvgResponseTimeOk() (*string, bool) {
	if o == nil || o.AvgResponseTime == nil {
		return nil, false
	}
	return o.AvgResponseTime, true
}

// HasAvgResponseTime returns a boolean if a field has been set.
func (o *V2Monitor) HasAvgResponseTime() bool {
	if o != nil && o.AvgResponseTime != nil {
		return true
	}

	return false
}

// SetAvgResponseTime gets a reference to the given string and assigns it to the AvgResponseTime field.
func (o *V2Monitor) SetAvgResponseTime(v string) {
	o.AvgResponseTime = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *V2Monitor) GetLocations() []Monitoringv2Location {
	if o == nil || o.Locations == nil {
		var ret []Monitoringv2Location
		return ret
	}
	return *o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetLocationsOk() (*[]Monitoringv2Location, bool) {
	if o == nil || o.Locations == nil {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *V2Monitor) HasLocations() bool {
	if o != nil && o.Locations != nil {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []Monitoringv2Location and assigns it to the Locations field.
func (o *V2Monitor) SetLocations(v []Monitoringv2Location) {
	o.Locations = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *V2Monitor) GetInterval() string {
	if o == nil || o.Interval == nil {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetIntervalOk() (*string, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *V2Monitor) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *V2Monitor) SetInterval(v string) {
	o.Interval = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *V2Monitor) GetTimeout() string {
	if o == nil || o.Timeout == nil {
		var ret string
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetTimeoutOk() (*string, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *V2Monitor) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given string and assigns it to the Timeout field.
func (o *V2Monitor) SetTimeout(v string) {
	o.Timeout = &v
}

// GetIpVersion returns the IpVersion field value if set, zero value otherwise.
func (o *V2Monitor) GetIpVersion() V2IpVersion {
	if o == nil || o.IpVersion == nil {
		var ret V2IpVersion
		return ret
	}
	return *o.IpVersion
}

// GetIpVersionOk returns a tuple with the IpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetIpVersionOk() (*V2IpVersion, bool) {
	if o == nil || o.IpVersion == nil {
		return nil, false
	}
	return o.IpVersion, true
}

// HasIpVersion returns a boolean if a field has been set.
func (o *V2Monitor) HasIpVersion() bool {
	if o != nil && o.IpVersion != nil {
		return true
	}

	return false
}

// SetIpVersion gets a reference to the given V2IpVersion and assigns it to the IpVersion field.
func (o *V2Monitor) SetIpVersion(v V2IpVersion) {
	o.IpVersion = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *V2Monitor) GetHttp() V2HttpConfiguration {
	if o == nil || o.Http == nil {
		var ret V2HttpConfiguration
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetHttpOk() (*V2HttpConfiguration, bool) {
	if o == nil || o.Http == nil {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *V2Monitor) HasHttp() bool {
	if o != nil && o.Http != nil {
		return true
	}

	return false
}

// SetHttp gets a reference to the given V2HttpConfiguration and assigns it to the Http field.
func (o *V2Monitor) SetHttp(v V2HttpConfiguration) {
	o.Http = &v
}

// GetTcp returns the Tcp field value if set, zero value otherwise.
func (o *V2Monitor) GetTcp() V2TcpConfiguration {
	if o == nil || o.Tcp == nil {
		var ret V2TcpConfiguration
		return ret
	}
	return *o.Tcp
}

// GetTcpOk returns a tuple with the Tcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetTcpOk() (*V2TcpConfiguration, bool) {
	if o == nil || o.Tcp == nil {
		return nil, false
	}
	return o.Tcp, true
}

// HasTcp returns a boolean if a field has been set.
func (o *V2Monitor) HasTcp() bool {
	if o != nil && o.Tcp != nil {
		return true
	}

	return false
}

// SetTcp gets a reference to the given V2TcpConfiguration and assigns it to the Tcp field.
func (o *V2Monitor) SetTcp(v V2TcpConfiguration) {
	o.Tcp = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *V2Monitor) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *V2Monitor) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *V2Monitor) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *V2Monitor) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *V2Monitor) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *V2Monitor) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *V2Monitor) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2Monitor) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *V2Monitor) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *V2Monitor) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o V2Monitor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CurrentStatus != nil {
		toSerialize["currentStatus"] = o.CurrentStatus
	}
	if o.UptimePercentage != nil {
		toSerialize["uptimePercentage"] = o.UptimePercentage
	}
	if o.AvgResponseTime != nil {
		toSerialize["avgResponseTime"] = o.AvgResponseTime
	}
	if o.Locations != nil {
		toSerialize["locations"] = o.Locations
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	if o.IpVersion != nil {
		toSerialize["ipVersion"] = o.IpVersion
	}
	if o.Http != nil {
		toSerialize["http"] = o.Http
	}
	if o.Tcp != nil {
		toSerialize["tcp"] = o.Tcp
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableV2Monitor struct {
	value *V2Monitor
	isSet bool
}

func (v NullableV2Monitor) Get() *V2Monitor {
	return v.value
}

func (v *NullableV2Monitor) Set(val *V2Monitor) {
	v.value = val
	v.isSet = true
}

func (v NullableV2Monitor) IsSet() bool {
	return v.isSet
}

func (v *NullableV2Monitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2Monitor(val *V2Monitor) *NullableV2Monitor {
	return &NullableV2Monitor{value: val, isSet: true}
}

func (v NullableV2Monitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2Monitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
