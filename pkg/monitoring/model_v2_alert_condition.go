/*
 * Monitoring
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package monitoring

import (
	"encoding/json"
	"time"
)

// V2AlertCondition The conditions required to generate an alert.
type V2AlertCondition struct {
	// The unique identifier for an alert condition.
	Id *string `json:"id,omitempty"`
	// The monitor identifier associated with an alert condition.
	MonitorId *string `json:"monitorId,omitempty"`
	Metric *V2AlertConditionMetric `json:"metric,omitempty"`
	Comparator *AlertConditionComparator `json:"comparator,omitempty"`
	// The value to check to determine if an alert should be generated.
	Value *string `json:"value,omitempty"`
	// The amount of time to wait before sending an alert.  This is useful to prevent alerts due to a flapping service.
	AlarmDelay *int32 `json:"alarmDelay,omitempty"`
	// How often an alert should be generated if an alert condition is still being met.
	AlarmEvery *int32 `json:"alarmEvery,omitempty"`
	// A flag that determines if an alert should continue to trigger until it is resolved.
	AlarmUntilSilenced *bool `json:"alarmUntilSilenced,omitempty"`
	// Whether an alert condition is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
	// The minimum number of locations that the alert condition must be triggered for before an alert is generated.  This should always be less than or equal to the number of locations a monitor has.
	MinimumLocations *int32 `json:"minimumLocations,omitempty"`
	// The date an alert condition was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The date an alert condition was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewV2AlertCondition instantiates a new V2AlertCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2AlertCondition() *V2AlertCondition {
	this := V2AlertCondition{}
	var metric V2AlertConditionMetric = "STATUS"
	this.Metric = &metric
	var comparator AlertConditionComparator = "EQUAL"
	this.Comparator = &comparator
	return &this
}

// NewV2AlertConditionWithDefaults instantiates a new V2AlertCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2AlertConditionWithDefaults() *V2AlertCondition {
	this := V2AlertCondition{}
	var metric V2AlertConditionMetric = "STATUS"
	this.Metric = &metric
	var comparator AlertConditionComparator = "EQUAL"
	this.Comparator = &comparator
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V2AlertCondition) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V2AlertCondition) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V2AlertCondition) SetId(v string) {
	o.Id = &v
}

// GetMonitorId returns the MonitorId field value if set, zero value otherwise.
func (o *V2AlertCondition) GetMonitorId() string {
	if o == nil || o.MonitorId == nil {
		var ret string
		return ret
	}
	return *o.MonitorId
}

// GetMonitorIdOk returns a tuple with the MonitorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetMonitorIdOk() (*string, bool) {
	if o == nil || o.MonitorId == nil {
		return nil, false
	}
	return o.MonitorId, true
}

// HasMonitorId returns a boolean if a field has been set.
func (o *V2AlertCondition) HasMonitorId() bool {
	if o != nil && o.MonitorId != nil {
		return true
	}

	return false
}

// SetMonitorId gets a reference to the given string and assigns it to the MonitorId field.
func (o *V2AlertCondition) SetMonitorId(v string) {
	o.MonitorId = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *V2AlertCondition) GetMetric() V2AlertConditionMetric {
	if o == nil || o.Metric == nil {
		var ret V2AlertConditionMetric
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetMetricOk() (*V2AlertConditionMetric, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *V2AlertCondition) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given V2AlertConditionMetric and assigns it to the Metric field.
func (o *V2AlertCondition) SetMetric(v V2AlertConditionMetric) {
	o.Metric = &v
}

// GetComparator returns the Comparator field value if set, zero value otherwise.
func (o *V2AlertCondition) GetComparator() AlertConditionComparator {
	if o == nil || o.Comparator == nil {
		var ret AlertConditionComparator
		return ret
	}
	return *o.Comparator
}

// GetComparatorOk returns a tuple with the Comparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetComparatorOk() (*AlertConditionComparator, bool) {
	if o == nil || o.Comparator == nil {
		return nil, false
	}
	return o.Comparator, true
}

// HasComparator returns a boolean if a field has been set.
func (o *V2AlertCondition) HasComparator() bool {
	if o != nil && o.Comparator != nil {
		return true
	}

	return false
}

// SetComparator gets a reference to the given AlertConditionComparator and assigns it to the Comparator field.
func (o *V2AlertCondition) SetComparator(v AlertConditionComparator) {
	o.Comparator = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *V2AlertCondition) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *V2AlertCondition) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *V2AlertCondition) SetValue(v string) {
	o.Value = &v
}

// GetAlarmDelay returns the AlarmDelay field value if set, zero value otherwise.
func (o *V2AlertCondition) GetAlarmDelay() int32 {
	if o == nil || o.AlarmDelay == nil {
		var ret int32
		return ret
	}
	return *o.AlarmDelay
}

// GetAlarmDelayOk returns a tuple with the AlarmDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetAlarmDelayOk() (*int32, bool) {
	if o == nil || o.AlarmDelay == nil {
		return nil, false
	}
	return o.AlarmDelay, true
}

// HasAlarmDelay returns a boolean if a field has been set.
func (o *V2AlertCondition) HasAlarmDelay() bool {
	if o != nil && o.AlarmDelay != nil {
		return true
	}

	return false
}

// SetAlarmDelay gets a reference to the given int32 and assigns it to the AlarmDelay field.
func (o *V2AlertCondition) SetAlarmDelay(v int32) {
	o.AlarmDelay = &v
}

// GetAlarmEvery returns the AlarmEvery field value if set, zero value otherwise.
func (o *V2AlertCondition) GetAlarmEvery() int32 {
	if o == nil || o.AlarmEvery == nil {
		var ret int32
		return ret
	}
	return *o.AlarmEvery
}

// GetAlarmEveryOk returns a tuple with the AlarmEvery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetAlarmEveryOk() (*int32, bool) {
	if o == nil || o.AlarmEvery == nil {
		return nil, false
	}
	return o.AlarmEvery, true
}

// HasAlarmEvery returns a boolean if a field has been set.
func (o *V2AlertCondition) HasAlarmEvery() bool {
	if o != nil && o.AlarmEvery != nil {
		return true
	}

	return false
}

// SetAlarmEvery gets a reference to the given int32 and assigns it to the AlarmEvery field.
func (o *V2AlertCondition) SetAlarmEvery(v int32) {
	o.AlarmEvery = &v
}

// GetAlarmUntilSilenced returns the AlarmUntilSilenced field value if set, zero value otherwise.
func (o *V2AlertCondition) GetAlarmUntilSilenced() bool {
	if o == nil || o.AlarmUntilSilenced == nil {
		var ret bool
		return ret
	}
	return *o.AlarmUntilSilenced
}

// GetAlarmUntilSilencedOk returns a tuple with the AlarmUntilSilenced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetAlarmUntilSilencedOk() (*bool, bool) {
	if o == nil || o.AlarmUntilSilenced == nil {
		return nil, false
	}
	return o.AlarmUntilSilenced, true
}

// HasAlarmUntilSilenced returns a boolean if a field has been set.
func (o *V2AlertCondition) HasAlarmUntilSilenced() bool {
	if o != nil && o.AlarmUntilSilenced != nil {
		return true
	}

	return false
}

// SetAlarmUntilSilenced gets a reference to the given bool and assigns it to the AlarmUntilSilenced field.
func (o *V2AlertCondition) SetAlarmUntilSilenced(v bool) {
	o.AlarmUntilSilenced = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *V2AlertCondition) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *V2AlertCondition) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *V2AlertCondition) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMinimumLocations returns the MinimumLocations field value if set, zero value otherwise.
func (o *V2AlertCondition) GetMinimumLocations() int32 {
	if o == nil || o.MinimumLocations == nil {
		var ret int32
		return ret
	}
	return *o.MinimumLocations
}

// GetMinimumLocationsOk returns a tuple with the MinimumLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetMinimumLocationsOk() (*int32, bool) {
	if o == nil || o.MinimumLocations == nil {
		return nil, false
	}
	return o.MinimumLocations, true
}

// HasMinimumLocations returns a boolean if a field has been set.
func (o *V2AlertCondition) HasMinimumLocations() bool {
	if o != nil && o.MinimumLocations != nil {
		return true
	}

	return false
}

// SetMinimumLocations gets a reference to the given int32 and assigns it to the MinimumLocations field.
func (o *V2AlertCondition) SetMinimumLocations(v int32) {
	o.MinimumLocations = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *V2AlertCondition) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *V2AlertCondition) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *V2AlertCondition) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *V2AlertCondition) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2AlertCondition) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *V2AlertCondition) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *V2AlertCondition) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o V2AlertCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MonitorId != nil {
		toSerialize["monitorId"] = o.MonitorId
	}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	if o.Comparator != nil {
		toSerialize["comparator"] = o.Comparator
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.AlarmDelay != nil {
		toSerialize["alarmDelay"] = o.AlarmDelay
	}
	if o.AlarmEvery != nil {
		toSerialize["alarmEvery"] = o.AlarmEvery
	}
	if o.AlarmUntilSilenced != nil {
		toSerialize["alarmUntilSilenced"] = o.AlarmUntilSilenced
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.MinimumLocations != nil {
		toSerialize["minimumLocations"] = o.MinimumLocations
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableV2AlertCondition struct {
	value *V2AlertCondition
	isSet bool
}

func (v NullableV2AlertCondition) Get() *V2AlertCondition {
	return v.value
}

func (v *NullableV2AlertCondition) Set(val *V2AlertCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableV2AlertCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableV2AlertCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2AlertCondition(val *V2AlertCondition) *NullableV2AlertCondition {
	return &NullableV2AlertCondition{value: val, isSet: true}
}

func (v NullableV2AlertCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2AlertCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
