/*
 * Monitoring
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package monitoring

import (
	"encoding/json"
)

// V2HttpConfigurationClientCertificate The certificates used by a monitor for authentication against the service being monitored.
type V2HttpConfigurationClientCertificate struct {
	// The X.509 PEM formatted public certificate used for authentication.
	PublicCertificate *string `json:"publicCertificate,omitempty"`
	// The X.509 PEM formatted private key used for authentication.
	PrivateKey *string `json:"privateKey,omitempty"`
	// The X.509 PEM formatted certificate authority bundle used for authentication.
	CaBundle *string `json:"caBundle,omitempty"`
}

// NewV2HttpConfigurationClientCertificate instantiates a new V2HttpConfigurationClientCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2HttpConfigurationClientCertificate() *V2HttpConfigurationClientCertificate {
	this := V2HttpConfigurationClientCertificate{}
	return &this
}

// NewV2HttpConfigurationClientCertificateWithDefaults instantiates a new V2HttpConfigurationClientCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2HttpConfigurationClientCertificateWithDefaults() *V2HttpConfigurationClientCertificate {
	this := V2HttpConfigurationClientCertificate{}
	return &this
}

// GetPublicCertificate returns the PublicCertificate field value if set, zero value otherwise.
func (o *V2HttpConfigurationClientCertificate) GetPublicCertificate() string {
	if o == nil || o.PublicCertificate == nil {
		var ret string
		return ret
	}
	return *o.PublicCertificate
}

// GetPublicCertificateOk returns a tuple with the PublicCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2HttpConfigurationClientCertificate) GetPublicCertificateOk() (*string, bool) {
	if o == nil || o.PublicCertificate == nil {
		return nil, false
	}
	return o.PublicCertificate, true
}

// HasPublicCertificate returns a boolean if a field has been set.
func (o *V2HttpConfigurationClientCertificate) HasPublicCertificate() bool {
	if o != nil && o.PublicCertificate != nil {
		return true
	}

	return false
}

// SetPublicCertificate gets a reference to the given string and assigns it to the PublicCertificate field.
func (o *V2HttpConfigurationClientCertificate) SetPublicCertificate(v string) {
	o.PublicCertificate = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *V2HttpConfigurationClientCertificate) GetPrivateKey() string {
	if o == nil || o.PrivateKey == nil {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2HttpConfigurationClientCertificate) GetPrivateKeyOk() (*string, bool) {
	if o == nil || o.PrivateKey == nil {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *V2HttpConfigurationClientCertificate) HasPrivateKey() bool {
	if o != nil && o.PrivateKey != nil {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *V2HttpConfigurationClientCertificate) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetCaBundle returns the CaBundle field value if set, zero value otherwise.
func (o *V2HttpConfigurationClientCertificate) GetCaBundle() string {
	if o == nil || o.CaBundle == nil {
		var ret string
		return ret
	}
	return *o.CaBundle
}

// GetCaBundleOk returns a tuple with the CaBundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2HttpConfigurationClientCertificate) GetCaBundleOk() (*string, bool) {
	if o == nil || o.CaBundle == nil {
		return nil, false
	}
	return o.CaBundle, true
}

// HasCaBundle returns a boolean if a field has been set.
func (o *V2HttpConfigurationClientCertificate) HasCaBundle() bool {
	if o != nil && o.CaBundle != nil {
		return true
	}

	return false
}

// SetCaBundle gets a reference to the given string and assigns it to the CaBundle field.
func (o *V2HttpConfigurationClientCertificate) SetCaBundle(v string) {
	o.CaBundle = &v
}

func (o V2HttpConfigurationClientCertificate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PublicCertificate != nil {
		toSerialize["publicCertificate"] = o.PublicCertificate
	}
	if o.PrivateKey != nil {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if o.CaBundle != nil {
		toSerialize["caBundle"] = o.CaBundle
	}
	return json.Marshal(toSerialize)
}

type NullableV2HttpConfigurationClientCertificate struct {
	value *V2HttpConfigurationClientCertificate
	isSet bool
}

func (v NullableV2HttpConfigurationClientCertificate) Get() *V2HttpConfigurationClientCertificate {
	return v.value
}

func (v *NullableV2HttpConfigurationClientCertificate) Set(val *V2HttpConfigurationClientCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableV2HttpConfigurationClientCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableV2HttpConfigurationClientCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2HttpConfigurationClientCertificate(val *V2HttpConfigurationClientCertificate) *NullableV2HttpConfigurationClientCertificate {
	return &NullableV2HttpConfigurationClientCertificate{value: val, isSet: true}
}

func (v NullableV2HttpConfigurationClientCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2HttpConfigurationClientCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
