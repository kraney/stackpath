openapi: 3.0.0
info:
  contact:
    name: StackPath Support
    url: https://support.stackpath.com/
  title: Monitoring
  version: 1.0.0
externalDocs:
  description: The StackPath API Reference
  url: https://stackpath.dev/reference
servers:
- url: https://gateway.stackpath.com
security:
- oauth2: []
paths:
  /monitoring/v2/stacks/{stack_id}/disable:
    post:
      operationId: Disable
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Disable all monitors
      tags:
      - Monitors
  /monitoring/v2/stacks/{stack_id}/enable:
    post:
      operationId: Enable
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Enable all monitors
      tags:
      - Monitors
  /monitoring/v2/stacks/{stack_id}/locations:
    get:
      operationId: GetLocations
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetLocationsResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get monitoring locations
      tags:
      - Infrastructure
  /monitoring/v2/stacks/{stack_id}/monitors:
    get:
      operationId: GetMonitors
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: The number of items desired.
        explode: true
        in: query
        name: page_request.first
        required: false
        schema:
          type: string
        style: form
      - description: The cursor value after which data will be returned.
        explode: true
        in: query
        name: page_request.after
        required: false
        schema:
          type: string
        style: form
      - description: SQL-style constraint filters.
        explode: true
        in: query
        name: page_request.filter
        required: false
        schema:
          type: string
        style: form
      - description: Sort the response by the given field.
        explode: true
        in: query
        name: page_request.sort_by
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetMonitorsResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get all monitors
      tags:
      - Monitors
    post:
      operationId: CreateMonitor
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2CreateMonitorRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2CreateMonitorResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Create a monitor
      tags:
      - Monitors
  /monitoring/v2/stacks/{stack_id}/monitors/batch_delete:
    post:
      operationId: BatchDeleteMonitors
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2BatchDeleteMonitorsRequest'
        required: true
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Delete multiple monitors
      tags:
      - Monitors
  /monitoring/v2/stacks/{stack_id}/monitors/{monitor_id}:
    delete:
      operationId: DeleteMonitor
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Delete a monitor
      tags:
      - Monitors
    get:
      operationId: GetMonitor
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetMonitorResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get a monitor
      tags:
      - Monitors
    patch:
      operationId: UpdateMonitor
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2UpdateMonitorRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2UpdateMonitorResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Update a monitor
      tags:
      - Monitors
    put:
      description: When replacing a monitor you must provide all fields or they will
        be overwritten with empty or default values.
      operationId: ReplaceMonitor
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2ReplaceMonitorRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2ReplaceMonitorResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Replace a monitor
      tags:
      - Monitors
  /monitoring/v2/stacks/{stack_id}/monitors/{monitor_id}/alerts/conditions:
    get:
      operationId: GetAlertConditions
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      - description: The number of items desired.
        explode: true
        in: query
        name: page_request.first
        required: false
        schema:
          type: string
        style: form
      - description: The cursor value after which data will be returned.
        explode: true
        in: query
        name: page_request.after
        required: false
        schema:
          type: string
        style: form
      - description: SQL-style constraint filters.
        explode: true
        in: query
        name: page_request.filter
        required: false
        schema:
          type: string
        style: form
      - description: Sort the response by the given field.
        explode: true
        in: query
        name: page_request.sort_by
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetAlertConditionsResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get all alert conditions
      tags:
      - Alert Conditions
    post:
      description: An alert condition defines when to be alerted by a change in the
        monitored service.
      operationId: CreateAlertCondition
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2CreateAlertConditionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2CreateAlertConditionResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Create an alert condition
      tags:
      - Alert Conditions
  /monitoring/v2/stacks/{stack_id}/monitors/{monitor_id}/alerts/conditions/batch_delete:
    post:
      operationId: BatchDeleteAlertConditions
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2BatchDeleteAlertConditionsRequest'
        required: true
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Delete multiple alert conditions
      tags:
      - Alert Conditions
  /monitoring/v2/stacks/{stack_id}/monitors/{monitor_id}/alerts/conditions/{condition_id}:
    delete:
      operationId: DeleteAlertCondition
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitoring alert condition ID
        explode: false
        in: path
        name: condition_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Delete an alert condition
      tags:
      - Alert Conditions
    get:
      operationId: GetAlertCondition
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitoring alert condition ID
        explode: false
        in: path
        name: condition_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetAlertConditionResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get an alert condition
      tags:
      - Alert Conditions
    patch:
      operationId: UpdateAlertCondition
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitoring alert condition ID
        explode: false
        in: path
        name: condition_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2UpdateAlertConditionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2UpdateAlertConditionResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Update an alert condition
      tags:
      - Alert Conditions
  /monitoring/v2/stacks/{stack_id}/monitors/{monitor_id}/alerts/conditions/{condition_id}/disable:
    post:
      operationId: DisableAlertCondition
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitoring alert condition ID
        explode: false
        in: path
        name: condition_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Disable an alert condition
      tags:
      - Alert Conditions
  /monitoring/v2/stacks/{stack_id}/monitors/{monitor_id}/alerts/conditions/{condition_id}/enable:
    post:
      operationId: EnableAlertCondition
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitoring alert condition ID
        explode: false
        in: path
        name: condition_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Enable an alert condition
      tags:
      - Alert Conditions
  /monitoring/v2/stacks/{stack_id}/monitors/{monitor_id}/errors:
    get:
      operationId: GetMonitorErrors
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetMonitorErrorsResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get monitoring errors
      tags:
      - Monitors
  /monitoring/v2/stacks/{stack_id}/monitors/{monitor_id}/locations:
    get:
      operationId: GetMonitorLocations
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2GetMonitorLocationsResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get a monitor's locations
      tags:
      - Monitors
  /monitoring/v2/stacks/{stack_id}/monitors/{monitor_id}/metrics:
    get:
      operationId: GetMetrics
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A monitor ID
        explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          type: string
        style: simple
      - description: The start date of the time range to look for metrics.
        explode: true
        in: query
        name: start_date
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date of the time range to look for metrics.
        explode: true
        in: query
        name: end_date
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: A list of point of presence to retrieve metrics for.
        explode: true
        in: query
        name: pops
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: A list of metrics to retrieve.
        explode: true
        in: query
        name: metrics
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: aggregation
        required: false
        schema:
          default: DEFAULT
          enum:
          - DEFAULT
          - AVERAGE
          - SUM
          - MAXIMUM
          - MINIMUM
          type: string
        style: form
      - explode: true
        in: query
        name: group_by
        required: false
        schema:
          default: NONE
          enum:
          - NONE
          - POP
          type: string
        style: form
      - explode: true
        in: query
        name: granularity
        required: false
        schema:
          default: DEFAULT_GRANULARITY
          enum:
          - DEFAULT_GRANULARITY
          - PT5M
          - PT1H
          - P1D
          - PT1M
          type: string
        style: form
      - explode: true
        in: query
        name: granularity_function
        required: false
        schema:
          default: DEFAULT
          enum:
          - DEFAULT
          - AVERAGE
          - SUM
          - MAXIMUM
          - MINIMUM
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/prometheusMetrics'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get metrics
      tags:
      - Metrics
components:
  schemas:
    AlertConditionComparator:
      default: EQUAL
      description: |-
        How to compare the alert condition metric to the value.

         - EQUAL: The metric equals the value.
         - NOT_EQUAL: The metric does not equal the value.
         - GREATER_THAN: The metric is greater than the value.
         - GREATER_THAN_EQUAL_TO: The metric is greater than or equal to the value.
         - LESS_THAN: The metric is less than the value.
         - LESS_THAN_EQUAL_TO: The metric is less than or equal to the value.
         - DOES_EXIST: The value of the metric exists.
         - DOES_NOT_EXIST: The value of the metric does not exist.
         - REGEX: A result is produced when the metric is applied to the regular expression value.
         - DOES_NOT_REGEX: No result is produced when the metric is applied to the regular expression value.
         - CONTAINS: The metric contains the value.
         - DOES_NOT_CONTAIN: The metric does not contain the value.
      enum:
      - EQUAL
      - NOT_EQUAL
      - GREATER_THAN
      - GREATER_THAN_EQUAL_TO
      - LESS_THAN
      - LESS_THAN_EQUAL_TO
      - DOES_EXIST
      - DOES_NOT_EXIST
      - REGEX
      - DOES_NOT_REGEX
      - CONTAINS
      - DOES_NOT_CONTAIN
      type: string
    DataMatrix:
      description: A set of time series containing a range of data points over time
        for each time series
      example:
        results:
        - metric:
            key: metric
          values:
          - unixTime: unixTime
            value: value
          - unixTime: unixTime
            value: value
        - metric:
            key: metric
          values:
          - unixTime: unixTime
            value: value
          - unixTime: unixTime
            value: value
      properties:
        results:
          description: A data point's value
          items:
            $ref: '#/components/schemas/DataMatrixResult'
          type: array
      type: object
    DataMatrixResult:
      description: Time series containing a range of data points over time for each
        time series
      example:
        metric:
          key: metric
        values:
        - unixTime: unixTime
          value: value
        - unixTime: unixTime
          value: value
      properties:
        metric:
          additionalProperties:
            type: string
          description: The data points' labels
          type: object
        values:
          description: Time series data point values
          items:
            $ref: '#/components/schemas/DataValue'
          type: array
      type: object
    DataValue:
      description: An individual metric data point
      example:
        unixTime: unixTime
        value: value
      properties:
        unixTime:
          description: The time that a data point was recorded
          type: string
        value:
          description: A data point's value
          type: string
      type: object
    DataVector:
      description: A set of time series containing a single sample for each time series,
        all sharing the same timestamp
      example:
        results:
        - metric:
            key: metric
          value:
            unixTime: unixTime
            value: value
        - metric:
            key: metric
          value:
            unixTime: unixTime
            value: value
      properties:
        results:
          description: A data point's value
          items:
            $ref: '#/components/schemas/DataVectorResult'
          type: array
      type: object
    DataVectorResult:
      description: Time series containing a single sample for each time series, all
        sharing the same timestamp
      example:
        metric:
          key: metric
        value:
          unixTime: unixTime
          value: value
      properties:
        metric:
          additionalProperties:
            type: string
          description: The data points' labels
          type: object
        value:
          $ref: '#/components/schemas/DataValue'
      type: object
    MetricsData:
      description: The data points in a metrics collection
      example:
        vector:
          results:
          - metric:
              key: metric
            value:
              unixTime: unixTime
              value: value
          - metric:
              key: metric
            value:
              unixTime: unixTime
              value: value
        matrix:
          results:
          - metric:
              key: metric
            values:
            - unixTime: unixTime
              value: value
            - unixTime: unixTime
              value: value
          - metric:
              key: metric
            values:
            - unixTime: unixTime
              value: value
            - unixTime: unixTime
              value: value
      properties:
        matrix:
          $ref: '#/components/schemas/DataMatrix'
        vector:
          $ref: '#/components/schemas/DataVector'
      type: object
    PatchHttpConfigurationHeaderValue:
      description: The value of the headers for a monitor update request.
      properties:
        value:
          description: The headers value.
          items:
            $ref: '#/components/schemas/v2Header'
          type: array
      type: object
    UpdateMonitorRequestIpVersionValue:
      description: The value of the IP version for a monitor update request.
      properties:
        value:
          $ref: '#/components/schemas/v2IpVersion'
      type: object
    UpdateMonitorRequestLocationsValue:
      description: The value of the locations for a monitor update request.
      properties:
        value:
          description: The locations value
          items:
            type: string
          type: array
      type: object
    UpdateMonitorRequestPatchHttpConfiguration:
      description: The HTTP configuration for a monitor update request.
      properties:
        url:
          description: |-
            The URL of the service that will be monitored.

            The URL must begin with an HTTP scheme of 'http' or 'https'.
          type: string
        method:
          description: The HTTP method used when the monitor makes a request to the
            service.
          type: string
        body:
          description: A base64 encoded HTTP request body to use when a monitor checks
            the service.
          format: base64
          type: string
        headers:
          $ref: '#/components/schemas/PatchHttpConfigurationHeaderValue'
        basic:
          $ref: '#/components/schemas/UpdateMonitorRequestPatchHttpConfigurationBasicAuth'
        digest:
          $ref: '#/components/schemas/UpdateMonitorRequestPatchHttpConfigurationDigestAuth'
        clientCertificate:
          $ref: '#/components/schemas/UpdateMonitorRequestPatchHttpConfigurationClientCertificate'
        validateCertificate:
          description: A flag for validating a service's certificate.
          format: boolean
          type: boolean
      type: object
    UpdateMonitorRequestPatchHttpConfigurationBasicAuth:
      description: Basic authentication for the HTTP configuration of a monitor update
        request.
      properties:
        username:
          description: The username used for basic authentication by a monitor.
          type: string
        password:
          description: The password used for basic authentication by a monitor.
          type: string
      type: object
    UpdateMonitorRequestPatchHttpConfigurationClientCertificate:
      description: The certificates for the HTTP configuration of a monitor update
        request.
      properties:
        publicCertificate:
          description: The X.509 PEM formatted public certificate used for authentication.
          type: string
        privateKey:
          description: The X.509 PEM formatted private key used for authentication.
          type: string
        caBundle:
          description: The X.509 PEM formatted certificate authority bundle used for
            authentication.
          type: string
      type: object
    UpdateMonitorRequestPatchHttpConfigurationDigestAuth:
      description: Digest authentication for the HTTP configuration of a monitor update
        request.
      properties:
        username:
          description: The username used for digest authentication by a monitor.
          type: string
        password:
          description: The password used for digest authentication by a monitor.
          type: string
      type: object
    UpdateMonitorRequestPatchTcpConfiguration:
      description: The TCP configuration for a monitor update request.
      properties:
        host:
          description: The host address of the service to monitor.
          type: string
        port:
          description: The port of the service to monitor.
          format: int32
          type: integer
        data:
          description: Base64 encoded TCP data to send to the monitored service
          format: base64
          type: string
      type: object
    apiStatusDetail:
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          type: string
      required:
      - '@type'
      type: object
    monitoringv2Location:
      description: A location which performs monitoring checks.
      example:
        country: country
        hasIpv6: true
        city: city
        provider: provider
        cityCode: cityCode
        countryCode: countryCode
        name: name
        ipAddresses:
        - ipAddresses
        - ipAddresses
        hasIpv4: true
        id: id
      properties:
        id:
          description: A location's unique identifier
          type: string
        name:
          description: A location's name
          type: string
        city:
          description: A location's city
          type: string
        cityCode:
          description: A location's city, expressed as an IATA airport code
          type: string
        country:
          description: A location's country
          type: string
        countryCode:
          description: A location's ISO-3166-1 alpha-2 country code
          type: string
        provider:
          description: A location's network provider
          type: string
        ipAddresses:
          description: |-
            The IP addresses of a location

            The IP addresses where monitoring checks originate from.
          items:
            type: string
          type: array
        hasIpv4:
          description: Whether or not a location supports IPv4 monitoring checks.
          format: boolean
          type: boolean
        hasIpv6:
          description: Whether or not a location supports IPv6 monitoring checks.
          format: boolean
          type: boolean
      type: object
    paginationPageInfo:
      description: |-
        Information about a paginated response

        This is modeled after the GraphQL Relay spec to support both cursor based pagination and traditional offset based pagination.
      example:
        hasNextPage: true
        hasPreviousPage: true
        endCursor: endCursor
        totalCount: totalCount
        startCursor: startCursor
      properties:
        totalCount:
          description: The total number of items in the dataset
          type: string
        hasPreviousPage:
          description: Whether or not a previous page of data exists
          format: boolean
          type: boolean
        hasNextPage:
          description: Whether or not another page of data is available
          format: boolean
          type: boolean
        startCursor:
          description: The cursor for the first item in the set of data returned
          type: string
        endCursor:
          description: The cursor for the last item in the set of data returned
          type: string
      type: object
    prometheusMetrics:
      description: A collection of metrics
      example:
        data:
          vector:
            results:
            - metric:
                key: metric
              value:
                unixTime: unixTime
                value: value
            - metric:
                key: metric
              value:
                unixTime: unixTime
                value: value
          matrix:
            results:
            - metric:
                key: metric
              values:
              - unixTime: unixTime
                value: value
              - unixTime: unixTime
                value: value
            - metric:
                key: metric
              values:
              - unixTime: unixTime
                value: value
              - unixTime: unixTime
                value: value
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
      properties:
        status:
          $ref: '#/components/schemas/prometheusMetricsStatus'
        data:
          $ref: '#/components/schemas/MetricsData'
        errorType:
          description: The type of error encountered when querying for metrics
          type: string
        error:
          description: The error encountered when querying for metrics
          type: string
        warnings:
          description: Warnings encountered when querying for metrics
          items:
            type: string
          type: array
      type: object
    prometheusMetricsStatus:
      default: SUCCESS
      description: A metrics query's resulting status
      enum:
      - SUCCESS
      - ERROR
      type: string
    stackpath.rpc.BadRequest:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_BadRequest_allOf'
    stackpath.rpc.BadRequest.FieldViolation:
      properties:
        field:
          type: string
        description:
          type: string
      type: object
    stackpath.rpc.Help:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_Help_allOf'
    stackpath.rpc.Help.Link:
      properties:
        description:
          type: string
        url:
          type: string
      type: object
    stackpath.rpc.LocalizedMessage:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_LocalizedMessage_allOf'
    stackpath.rpc.PreconditionFailure:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_PreconditionFailure_allOf'
    stackpath.rpc.PreconditionFailure.Violation:
      properties:
        type:
          type: string
        subject:
          type: string
        description:
          type: string
      type: object
    stackpath.rpc.QuotaFailure:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_QuotaFailure_allOf'
    stackpath.rpc.QuotaFailure.Violation:
      properties:
        subject:
          type: string
        description:
          type: string
      type: object
    stackpath.rpc.RequestInfo:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_RequestInfo_allOf'
    stackpath.rpc.ResourceInfo:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_ResourceInfo_allOf'
    stackpath.rpc.RetryInfo:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_RetryInfo_allOf'
    stackpathapiStatus:
      properties:
        code:
          format: int32
          type: integer
        details:
          items:
            $ref: '#/components/schemas/apiStatusDetail'
          type: array
        message:
          type: string
      type: object
    v2AlertCondition:
      description: The conditions required to generate an alert.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        monitorId: monitorId
        alarmEvery: 6
        minimumLocations: 1
        id: id
        alarmDelay: 0
        value: value
        alarmUntilSilenced: true
        enabled: true
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: The unique identifier for an alert condition.
          type: string
        monitorId:
          description: The monitor identifier associated with an alert condition.
          type: string
        metric:
          $ref: '#/components/schemas/v2AlertConditionMetric'
        comparator:
          $ref: '#/components/schemas/AlertConditionComparator'
        value:
          description: The value to check to determine if an alert should be generated.
          type: string
        alarmDelay:
          description: |-
            The amount of time to wait before sending an alert.

            This is useful to prevent alerts due to a flapping service.
          format: int32
          type: integer
        alarmEvery:
          description: How often an alert should be generated if an alert condition
            is still being met.
          format: int32
          type: integer
        alarmUntilSilenced:
          description: A flag that determines if an alert should continue to trigger
            until it is resolved.
          format: boolean
          type: boolean
        enabled:
          description: Whether an alert condition is enabled or not.
          format: boolean
          type: boolean
        minimumLocations:
          description: |-
            The minimum number of locations that the alert condition must be triggered for before an alert is generated.

            This should always be less than or equal to the number of locations a monitor has.
          format: int32
          type: integer
        createdAt:
          description: The date an alert condition was created.
          format: date-time
          type: string
        updatedAt:
          description: The date an alert condition was last updated.
          format: date-time
          type: string
      type: object
    v2AlertConditionMetric:
      default: STATUS
      description: |-
        The metric to compare in an alert condition.

         - STATUS: The status metric for an alert condition. This condition allows for alerting based on a monitor being 'UP', 'DOWN', or 'SLOW'.
         - CODE: The HTTP status code for an alert condition
      enum:
      - STATUS
      - CODE
      type: string
    v2BatchDeleteAlertConditionsRequest:
      properties:
        conditionIds:
          description: The alert condition IDs to delete.
          items:
            type: string
          type: array
      type: object
    v2BatchDeleteMonitorsRequest:
      properties:
        monitorIds:
          description: The list of monitor IDs to delete.
          items:
            type: string
          type: array
      type: object
    v2CreateAlertConditionRequest:
      properties:
        metric:
          $ref: '#/components/schemas/v2AlertConditionMetric'
        comparator:
          $ref: '#/components/schemas/AlertConditionComparator'
        value:
          description: The value to check to determine if an alert should be generated.
          type: string
        alarmDelay:
          description: |-
            The amount of time to wait before sending an alert.

            This is useful to prevent alerts due to a flapping service.
          format: int32
          type: integer
        alarmEvery:
          description: How often an alert should be generated if an alert condition
            is still being met.
          format: int32
          type: integer
        alarmUntilSilenced:
          description: A flag that determines if an alert should continue to trigger
            until it is resolved.
          format: boolean
          type: boolean
        enabled:
          description: Whether an alert condition is enabled or not.
          format: boolean
          type: boolean
        minimumLocations:
          description: |-
            The minimum number of locations that the alert condition must be triggered for before an alert is generated.

            This should always be less than or equal to the number of locations a monitor has.
          format: int32
          type: integer
      type: object
    v2CreateAlertConditionResponse:
      description: A response from a request to create an alert condition.
      example:
        record:
          createdAt: 2000-01-23T04:56:07.000+00:00
          monitorId: monitorId
          alarmEvery: 6
          minimumLocations: 1
          id: id
          alarmDelay: 0
          value: value
          alarmUntilSilenced: true
          enabled: true
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        record:
          $ref: '#/components/schemas/v2AlertCondition'
      type: object
    v2CreateMonitorRequest:
      properties:
        name:
          description: The monitor's name
          type: string
        locations:
          description: The IDs of locations to monitor from
          items:
            type: string
          type: array
        interval:
          description: How often a monitor should be checked.
          type: string
        timeout:
          description: How long to wait before timing out a monitor check request
            to a service.
          type: string
        ipVersion:
          $ref: '#/components/schemas/v2IpVersion'
        http:
          $ref: '#/components/schemas/v2HttpConfiguration'
        tcp:
          $ref: '#/components/schemas/v2TcpConfiguration'
        enabled:
          description: Whether a monitor is enabled or not.
          format: boolean
          type: boolean
      type: object
    v2CreateMonitorResponse:
      description: A response from a request to create a monitor.
      example:
        record:
          tcp:
            data: data
            port: 6
            host: host
          uptimePercentage: 0.8008281904610115
          avgResponseTime: avgResponseTime
          timeout: timeout
          enabled: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          http:
            headers:
            - header: header
              value: value
            - header: header
              value: value
            clientCertificate:
              privateKey: privateKey
              caBundle: caBundle
              publicCertificate: publicCertificate
            method: method
            digest:
              password: password
              username: username
            validateCertificate: true
            body: body
            basic:
              password: password
              username: username
            url: url
          locations:
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          interval: interval
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        record:
          $ref: '#/components/schemas/v2Monitor'
      type: object
    v2GetAlertConditionResponse:
      description: A response from a request to retrieve an alert condition.
      example:
        record:
          createdAt: 2000-01-23T04:56:07.000+00:00
          monitorId: monitorId
          alarmEvery: 6
          minimumLocations: 1
          id: id
          alarmDelay: 0
          value: value
          alarmUntilSilenced: true
          enabled: true
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        record:
          $ref: '#/components/schemas/v2AlertCondition'
      type: object
    v2GetAlertConditionsResponse:
      description: A response from a request to retrieve a monitor's alert conditions.
      example:
        pageInfo:
          hasNextPage: true
          hasPreviousPage: true
          endCursor: endCursor
          totalCount: totalCount
          startCursor: startCursor
        results:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          monitorId: monitorId
          alarmEvery: 6
          minimumLocations: 1
          id: id
          alarmDelay: 0
          value: value
          alarmUntilSilenced: true
          enabled: true
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          monitorId: monitorId
          alarmEvery: 6
          minimumLocations: 1
          id: id
          alarmDelay: 0
          value: value
          alarmUntilSilenced: true
          enabled: true
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        pageInfo:
          $ref: '#/components/schemas/paginationPageInfo'
        results:
          description: The requested alert conditions.
          items:
            $ref: '#/components/schemas/v2AlertCondition'
          type: array
      type: object
    v2GetLocationsResponse:
      description: A response from a request to retrieve locations.
      example:
        results:
        - country: country
          hasIpv6: true
          city: city
          provider: provider
          cityCode: cityCode
          countryCode: countryCode
          name: name
          ipAddresses:
          - ipAddresses
          - ipAddresses
          hasIpv4: true
          id: id
        - country: country
          hasIpv6: true
          city: city
          provider: provider
          cityCode: cityCode
          countryCode: countryCode
          name: name
          ipAddresses:
          - ipAddresses
          - ipAddresses
          hasIpv4: true
          id: id
      properties:
        results:
          description: The list of monitoring locations for a stack.
          items:
            $ref: '#/components/schemas/monitoringv2Location'
          type: array
      type: object
    v2GetMonitorErrorsResponse:
      description: A response from a request to retrieve errors for a monitor.
      example:
        results:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          monitorId: monitorId
          locations:
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          error: error
        - createdAt: 2000-01-23T04:56:07.000+00:00
          monitorId: monitorId
          locations:
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          error: error
      properties:
        results:
          description: The requested monitor errors.
          items:
            $ref: '#/components/schemas/v2MonitorError'
          type: array
      type: object
    v2GetMonitorLocationsResponse:
      description: A response from a request to retrieve a monitor's locations.
      example:
        monitor:
          tcp:
            data: data
            port: 6
            host: host
          uptimePercentage: 0.8008281904610115
          avgResponseTime: avgResponseTime
          timeout: timeout
          enabled: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          http:
            headers:
            - header: header
              value: value
            - header: header
              value: value
            clientCertificate:
              privateKey: privateKey
              caBundle: caBundle
              publicCertificate: publicCertificate
            method: method
            digest:
              password: password
              username: username
            validateCertificate: true
            body: body
            basic:
              password: password
              username: username
            url: url
          locations:
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          interval: interval
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
        locations:
        - responseTime: responseTime
          location:
            country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          statusCode: 0
        - responseTime: responseTime
          location:
            country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          statusCode: 0
      properties:
        monitor:
          $ref: '#/components/schemas/v2Monitor'
        locations:
          description: The requested locations of the monitor.
          items:
            $ref: '#/components/schemas/v2LocationWithAnalytics'
          type: array
      type: object
    v2GetMonitorResponse:
      description: A response from a request to retrieve a monitor.
      example:
        record:
          tcp:
            data: data
            port: 6
            host: host
          uptimePercentage: 0.8008281904610115
          avgResponseTime: avgResponseTime
          timeout: timeout
          enabled: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          http:
            headers:
            - header: header
              value: value
            - header: header
              value: value
            clientCertificate:
              privateKey: privateKey
              caBundle: caBundle
              publicCertificate: publicCertificate
            method: method
            digest:
              password: password
              username: username
            validateCertificate: true
            body: body
            basic:
              password: password
              username: username
            url: url
          locations:
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          interval: interval
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        record:
          $ref: '#/components/schemas/v2Monitor'
      type: object
    v2GetMonitorsResponse:
      description: A response from a request to retrieve a stack's monitors.
      example:
        pageInfo:
          hasNextPage: true
          hasPreviousPage: true
          endCursor: endCursor
          totalCount: totalCount
          startCursor: startCursor
        results:
        - tcp:
            data: data
            port: 6
            host: host
          uptimePercentage: 0.8008281904610115
          avgResponseTime: avgResponseTime
          timeout: timeout
          enabled: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          http:
            headers:
            - header: header
              value: value
            - header: header
              value: value
            clientCertificate:
              privateKey: privateKey
              caBundle: caBundle
              publicCertificate: publicCertificate
            method: method
            digest:
              password: password
              username: username
            validateCertificate: true
            body: body
            basic:
              password: password
              username: username
            url: url
          locations:
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          interval: interval
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - tcp:
            data: data
            port: 6
            host: host
          uptimePercentage: 0.8008281904610115
          avgResponseTime: avgResponseTime
          timeout: timeout
          enabled: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          http:
            headers:
            - header: header
              value: value
            - header: header
              value: value
            clientCertificate:
              privateKey: privateKey
              caBundle: caBundle
              publicCertificate: publicCertificate
            method: method
            digest:
              password: password
              username: username
            validateCertificate: true
            body: body
            basic:
              password: password
              username: username
            url: url
          locations:
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          interval: interval
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        pageInfo:
          $ref: '#/components/schemas/paginationPageInfo'
        results:
          description: The requested monitors.
          items:
            $ref: '#/components/schemas/v2Monitor'
          type: array
      type: object
    v2Header:
      description: An HTTP header
      example:
        header: header
        value: value
      properties:
        header:
          description: An HTTP header's field name
          type: string
        value:
          description: An HTTP header's value
          type: string
      type: object
    v2HttpConfiguration:
      description: HTTP monitor configuration
      example:
        headers:
        - header: header
          value: value
        - header: header
          value: value
        clientCertificate:
          privateKey: privateKey
          caBundle: caBundle
          publicCertificate: publicCertificate
        method: method
        digest:
          password: password
          username: username
        validateCertificate: true
        body: body
        basic:
          password: password
          username: username
        url: url
      properties:
        url:
          description: |-
            The URL of the service to monitor

            The URL must begin with a case insensitive HTTP scheme of 'http' or 'https'.
          type: string
        method:
          description: The HTTP method used when the monitor makes a request to the
            service.
          type: string
        body:
          description: A base64 encoded HTTP request body to use when a monitor checks
            the service.
          format: byte
          type: string
        headers:
          description: A list of HTTP headers to add to the request when a monitor
            checks a service.
          items:
            $ref: '#/components/schemas/v2Header'
          type: array
        basic:
          $ref: '#/components/schemas/v2HttpConfigurationBasicAuth'
        digest:
          $ref: '#/components/schemas/v2HttpConfigurationDigestAuth'
        clientCertificate:
          $ref: '#/components/schemas/v2HttpConfigurationClientCertificate'
        validateCertificate:
          description: Whether or not to validate a service's certificate.
          format: boolean
          type: boolean
      type: object
    v2HttpConfigurationBasicAuth:
      description: HTTP basic authentication configutation
      example:
        password: password
        username: username
      properties:
        username:
          description: The username used for basic authentication by a monitor.
          type: string
        password:
          description: The password used for basic authentication by a monitor.
          type: string
      type: object
    v2HttpConfigurationClientCertificate:
      description: The certificates used by a monitor for authentication against the
        service being monitored.
      example:
        privateKey: privateKey
        caBundle: caBundle
        publicCertificate: publicCertificate
      properties:
        publicCertificate:
          description: The X.509 PEM formatted public certificate used for authentication.
          type: string
        privateKey:
          description: The X.509 PEM formatted private key used for authentication.
          type: string
        caBundle:
          description: The X.509 PEM formatted certificate authority bundle used for
            authentication.
          type: string
      type: object
    v2HttpConfigurationDigestAuth:
      description: HTTP digest authentication configuration
      example:
        password: password
        username: username
      properties:
        username:
          description: The username used for digest authentication by a monitor.
          type: string
        password:
          description: The password used for digest authentication by a monitor.
          type: string
      type: object
    v2IpVersion:
      default: IPV4
      description: |-
        The IP version of a monitor

        The IP version defines which type of location a monitor can run from.  Not all locations support both IP versions.

         - IPV4: An IPv4 monitor
         - IPV6: An IPv6 monitor
      enum:
      - IPV4
      - IPV6
      type: string
    v2LocationWithAnalytics:
      description: |-
        A location with additional metrics

        The additional metrics provide status and response times about recent monitor checks for a location.
      example:
        responseTime: responseTime
        location:
          country: country
          hasIpv6: true
          city: city
          provider: provider
          cityCode: cityCode
          countryCode: countryCode
          name: name
          ipAddresses:
          - ipAddresses
          - ipAddresses
          hasIpv4: true
          id: id
        statusCode: 0
      properties:
        location:
          $ref: '#/components/schemas/monitoringv2Location'
        statusCode:
          description: The HTTP status code of the most recent monitoring check from
            the location.
          format: int32
          type: integer
        responseTime:
          description: The response time of the most recent monitoring check from
            the location.
          type: string
      type: object
    v2Monitor:
      description: An instance of a service monitor
      example:
        tcp:
          data: data
          port: 6
          host: host
        uptimePercentage: 0.8008281904610115
        avgResponseTime: avgResponseTime
        timeout: timeout
        enabled: true
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        http:
          headers:
          - header: header
            value: value
          - header: header
            value: value
          clientCertificate:
            privateKey: privateKey
            caBundle: caBundle
            publicCertificate: publicCertificate
          method: method
          digest:
            password: password
            username: username
          validateCertificate: true
          body: body
          basic:
            password: password
            username: username
          url: url
        locations:
        - country: country
          hasIpv6: true
          city: city
          provider: provider
          cityCode: cityCode
          countryCode: countryCode
          name: name
          ipAddresses:
          - ipAddresses
          - ipAddresses
          hasIpv4: true
          id: id
        - country: country
          hasIpv6: true
          city: city
          provider: provider
          cityCode: cityCode
          countryCode: countryCode
          name: name
          ipAddresses:
          - ipAddresses
          - ipAddresses
          hasIpv4: true
          id: id
        interval: interval
        id: id
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: A monitor's unique identifier
          type: string
        name:
          description: |-
            The name of a monitor

            A monitor's name
          type: string
        currentStatus:
          $ref: '#/components/schemas/v2MonitorStatus'
        uptimePercentage:
          description: The percent of time a monitored service has had a status of
            UP or SLOW in the last hour
          format: double
          type: number
        avgResponseTime:
          description: The average response time for a monitor
          type: string
        locations:
          description: The locations a service is monitored from.
          items:
            $ref: '#/components/schemas/monitoringv2Location'
          type: array
        interval:
          description: |-
            The amount of time between each monitor check.

            By default each service monitor will be checked every five minutes.
          type: string
        timeout:
          description: Then length of time to wait until the monitor check times out.
          type: string
        ipVersion:
          $ref: '#/components/schemas/v2IpVersion'
        http:
          $ref: '#/components/schemas/v2HttpConfiguration'
        tcp:
          $ref: '#/components/schemas/v2TcpConfiguration'
        createdAt:
          description: The date a monitor was created.
          format: date-time
          type: string
        updatedAt:
          description: The date a monitor was last updated.
          format: date-time
          type: string
        enabled:
          description: Whether or not a monitor is enabled.
          format: boolean
          type: boolean
      type: object
    v2MonitorError:
      description: An error that ocurred during a monitoring check.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        monitorId: monitorId
        locations:
        - country: country
          hasIpv6: true
          city: city
          provider: provider
          cityCode: cityCode
          countryCode: countryCode
          name: name
          ipAddresses:
          - ipAddresses
          - ipAddresses
          hasIpv4: true
          id: id
        - country: country
          hasIpv6: true
          city: city
          provider: provider
          cityCode: cityCode
          countryCode: countryCode
          name: name
          ipAddresses:
          - ipAddresses
          - ipAddresses
          hasIpv4: true
          id: id
        error: error
      properties:
        monitorId:
          description: The monitor identifier associated with the error.
          type: string
        locations:
          description: A list of locations that have the error.
          items:
            $ref: '#/components/schemas/monitoringv2Location'
          type: array
        error:
          description: The error text for a monitor error.
          type: string
        createdAt:
          description: The date a monitor error was created.
          format: date-time
          type: string
      type: object
    v2MonitorStatus:
      default: UNKNOWN
      description: |-
        The status of a monitor

        - UNKNOWN: Unable to determine the status of the service being monitored. This is likely due to a new monitor that has not been checked yet.
         - UP: The status of the service being monitored is up.
         - DOWN: The status of the service being monitored is down.
         - SLOW: The status of the service being monitored is slow. A service with a slow status means the service is up but responses are taking longer than 500 milliseconds.
      enum:
      - UNKNOWN
      - UP
      - DOWN
      - SLOW
      type: string
    v2ReplaceMonitorRequest:
      properties:
        name:
          description: The name of the monitor.
          type: string
        locations:
          description: The list of locations a monitor is checked from.
          items:
            type: string
          type: array
        interval:
          description: How often a monitor is checked.
          type: string
        timeout:
          description: The amount of time to wait before a monitor check times out.
          type: string
        ipVersion:
          $ref: '#/components/schemas/v2IpVersion'
        http:
          $ref: '#/components/schemas/v2HttpConfiguration'
        tcp:
          $ref: '#/components/schemas/v2TcpConfiguration'
        enabled:
          description: Whether a monitor is enabled or not.
          format: boolean
          type: boolean
      type: object
    v2ReplaceMonitorResponse:
      description: A response from a request to replace a monitor.
      example:
        record:
          tcp:
            data: data
            port: 6
            host: host
          uptimePercentage: 0.8008281904610115
          avgResponseTime: avgResponseTime
          timeout: timeout
          enabled: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          http:
            headers:
            - header: header
              value: value
            - header: header
              value: value
            clientCertificate:
              privateKey: privateKey
              caBundle: caBundle
              publicCertificate: publicCertificate
            method: method
            digest:
              password: password
              username: username
            validateCertificate: true
            body: body
            basic:
              password: password
              username: username
            url: url
          locations:
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          interval: interval
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        record:
          $ref: '#/components/schemas/v2Monitor'
      type: object
    v2TcpConfiguration:
      description: TCP monitor configuration
      example:
        data: data
        port: 6
        host: host
      properties:
        host:
          description: The host address of the service to monitor
          type: string
        port:
          description: The port of the service to monitor
          format: int32
          type: integer
        data:
          description: Base64 encoded TCP data to send to the monitored service
          format: byte
          type: string
      type: object
    v2UpdateAlertConditionRequest:
      properties:
        metric:
          $ref: '#/components/schemas/v2AlertConditionMetric'
        comparator:
          $ref: '#/components/schemas/AlertConditionComparator'
        value:
          description: The value to check to determine if an alert should be generated.
          type: string
        alarmDelay:
          description: |-
            The amount of time to wait before sending an alert.

            This is useful to prevent alerts due to a flapping service.
          format: int32
          type: integer
        alarmEvery:
          description: How often an alert should be generated if an alert condition
            is still being met.
          format: int32
          type: integer
        alarmUntilSilenced:
          description: A flag that determines if an alert should continue to trigger
            until it is resolved.
          format: boolean
          type: boolean
        enabled:
          description: Whether an alert condition is enabled or not.
          format: boolean
          type: boolean
        minimumLocations:
          description: |-
            The minimum number of locations that the alert condition must be triggered for before an alert is generated.

            This should always be less than or equal to the number of locations a monitor has.
          format: int32
          type: integer
      type: object
    v2UpdateAlertConditionResponse:
      description: A response from a request to update an alert condition.
      example:
        record:
          createdAt: 2000-01-23T04:56:07.000+00:00
          monitorId: monitorId
          alarmEvery: 6
          minimumLocations: 1
          id: id
          alarmDelay: 0
          value: value
          alarmUntilSilenced: true
          enabled: true
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        record:
          $ref: '#/components/schemas/v2AlertCondition'
      type: object
    v2UpdateMonitorRequest:
      properties:
        name:
          description: The monitor's name
          type: string
        locations:
          $ref: '#/components/schemas/UpdateMonitorRequestLocationsValue'
        interval:
          description: How often a monitor should be checked.
          type: string
        timeout:
          description: The length of time a monitor check should wait before timing
            out.
          type: string
        ipVersion:
          $ref: '#/components/schemas/UpdateMonitorRequestIpVersionValue'
        http:
          $ref: '#/components/schemas/UpdateMonitorRequestPatchHttpConfiguration'
        tcp:
          $ref: '#/components/schemas/UpdateMonitorRequestPatchTcpConfiguration'
        enabled:
          description: Whether a monitor is enabled or not.
          format: boolean
          type: boolean
      type: object
    v2UpdateMonitorResponse:
      description: A response from a request to update a monitor.
      example:
        record:
          tcp:
            data: data
            port: 6
            host: host
          uptimePercentage: 0.8008281904610115
          avgResponseTime: avgResponseTime
          timeout: timeout
          enabled: true
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          http:
            headers:
            - header: header
              value: value
            - header: header
              value: value
            clientCertificate:
              privateKey: privateKey
              caBundle: caBundle
              publicCertificate: publicCertificate
            method: method
            digest:
              password: password
              username: username
            validateCertificate: true
            body: body
            basic:
              password: password
              username: username
            url: url
          locations:
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          - country: country
            hasIpv6: true
            city: city
            provider: provider
            cityCode: cityCode
            countryCode: countryCode
            name: name
            ipAddresses:
            - ipAddresses
            - ipAddresses
            hasIpv4: true
            id: id
          interval: interval
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        record:
          $ref: '#/components/schemas/v2Monitor'
      type: object
    stackpath_rpc_BadRequest_allOf:
      properties:
        fieldViolations:
          items:
            $ref: '#/components/schemas/stackpath.rpc.BadRequest.FieldViolation'
          type: array
    stackpath_rpc_Help_allOf:
      properties:
        links:
          items:
            $ref: '#/components/schemas/stackpath.rpc.Help.Link'
          type: array
    stackpath_rpc_LocalizedMessage_allOf:
      properties:
        locale:
          type: string
        message:
          type: string
    stackpath_rpc_PreconditionFailure_allOf:
      properties:
        violations:
          items:
            $ref: '#/components/schemas/stackpath.rpc.PreconditionFailure.Violation'
          type: array
    stackpath_rpc_QuotaFailure_allOf:
      properties:
        violations:
          items:
            $ref: '#/components/schemas/stackpath.rpc.QuotaFailure.Violation'
          type: array
    stackpath_rpc_RequestInfo_allOf:
      properties:
        requestId:
          type: string
        servingData:
          type: string
    stackpath_rpc_ResourceInfo_allOf:
      properties:
        resourceType:
          type: string
        resourceName:
          type: string
        owner:
          type: string
        description:
          type: string
    stackpath_rpc_RetryInfo_allOf:
      properties:
        retryDelay:
          type: string
  securitySchemes:
    oauth2:
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: https://gateway.stackpath.com/identity/v1/oauth2/token
      type: oauth2
x-explorer-enabled: true
x-proxy-enabled: true
x-samples-enabled: true
x-samples-languages:
- curl
- node
- ruby
- javascript
- python
