/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge-compute

import (
	"encoding/json"
)

// V1EnvironmentVariable The location to obtain a value for an environment variable
type V1EnvironmentVariable struct {
	// An environment variable's value
	Value *string `json:"value,omitempty"`
	// A sensitive environment variable that should not be exposed
	SecretValue *string `json:"secretValue,omitempty"`
}

// NewV1EnvironmentVariable instantiates a new V1EnvironmentVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1EnvironmentVariable() *V1EnvironmentVariable {
	this := V1EnvironmentVariable{}
	return &this
}

// NewV1EnvironmentVariableWithDefaults instantiates a new V1EnvironmentVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1EnvironmentVariableWithDefaults() *V1EnvironmentVariable {
	this := V1EnvironmentVariable{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *V1EnvironmentVariable) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EnvironmentVariable) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *V1EnvironmentVariable) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *V1EnvironmentVariable) SetValue(v string) {
	o.Value = &v
}

// GetSecretValue returns the SecretValue field value if set, zero value otherwise.
func (o *V1EnvironmentVariable) GetSecretValue() string {
	if o == nil || o.SecretValue == nil {
		var ret string
		return ret
	}
	return *o.SecretValue
}

// GetSecretValueOk returns a tuple with the SecretValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EnvironmentVariable) GetSecretValueOk() (*string, bool) {
	if o == nil || o.SecretValue == nil {
		return nil, false
	}
	return o.SecretValue, true
}

// HasSecretValue returns a boolean if a field has been set.
func (o *V1EnvironmentVariable) HasSecretValue() bool {
	if o != nil && o.SecretValue != nil {
		return true
	}

	return false
}

// SetSecretValue gets a reference to the given string and assigns it to the SecretValue field.
func (o *V1EnvironmentVariable) SetSecretValue(v string) {
	o.SecretValue = &v
}

func (o V1EnvironmentVariable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.SecretValue != nil {
		toSerialize["secretValue"] = o.SecretValue
	}
	return json.Marshal(toSerialize)
}

type NullableV1EnvironmentVariable struct {
	value *V1EnvironmentVariable
	isSet bool
}

func (v NullableV1EnvironmentVariable) Get() *V1EnvironmentVariable {
	return v.value
}

func (v *NullableV1EnvironmentVariable) Set(val *V1EnvironmentVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableV1EnvironmentVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableV1EnvironmentVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1EnvironmentVariable(val *V1EnvironmentVariable) *NullableV1EnvironmentVariable {
	return &NullableV1EnvironmentVariable{value: val, isSet: true}
}

func (v NullableV1EnvironmentVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1EnvironmentVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
