/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge-compute

import (
	"encoding/json"
)

// V1Workload A computing workload  Workloads define a computing application to deploy to StackPath's edge network.
type V1Workload struct {
	// The ID of the stack that a workload belongs to
	StackId *string `json:"stackId,omitempty"`
	// A workload's unique identifier
	Id *string `json:"id,omitempty"`
	// A workload's name as it appears in the StackPath portal
	Name *string `json:"name,omitempty"`
	// A workload's programmatic name  Workload slugs are used to build its instances names
	Slug *string `json:"slug,omitempty"`
	Metadata *V1Metadata `json:"metadata,omitempty"`
	Spec *V1WorkloadSpec `json:"spec,omitempty"`
	// A string to deployment target key/value pair
	Targets *map[string]V1Target `json:"targets,omitempty"`
	Status *V1WorkloadStatus `json:"status,omitempty"`
}

// NewV1Workload instantiates a new V1Workload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Workload() *V1Workload {
	this := V1Workload{}
	var status V1WorkloadStatus = "ACTIVE"
	this.Status = &status
	return &this
}

// NewV1WorkloadWithDefaults instantiates a new V1Workload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1WorkloadWithDefaults() *V1Workload {
	this := V1Workload{}
	var status V1WorkloadStatus = "ACTIVE"
	this.Status = &status
	return &this
}

// GetStackId returns the StackId field value if set, zero value otherwise.
func (o *V1Workload) GetStackId() string {
	if o == nil || o.StackId == nil {
		var ret string
		return ret
	}
	return *o.StackId
}

// GetStackIdOk returns a tuple with the StackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Workload) GetStackIdOk() (*string, bool) {
	if o == nil || o.StackId == nil {
		return nil, false
	}
	return o.StackId, true
}

// HasStackId returns a boolean if a field has been set.
func (o *V1Workload) HasStackId() bool {
	if o != nil && o.StackId != nil {
		return true
	}

	return false
}

// SetStackId gets a reference to the given string and assigns it to the StackId field.
func (o *V1Workload) SetStackId(v string) {
	o.StackId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1Workload) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Workload) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1Workload) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1Workload) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1Workload) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Workload) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1Workload) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1Workload) SetName(v string) {
	o.Name = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *V1Workload) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Workload) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *V1Workload) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *V1Workload) SetSlug(v string) {
	o.Slug = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1Workload) GetMetadata() V1Metadata {
	if o == nil || o.Metadata == nil {
		var ret V1Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Workload) GetMetadataOk() (*V1Metadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1Workload) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1Metadata and assigns it to the Metadata field.
func (o *V1Workload) SetMetadata(v V1Metadata) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *V1Workload) GetSpec() V1WorkloadSpec {
	if o == nil || o.Spec == nil {
		var ret V1WorkloadSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Workload) GetSpecOk() (*V1WorkloadSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *V1Workload) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given V1WorkloadSpec and assigns it to the Spec field.
func (o *V1Workload) SetSpec(v V1WorkloadSpec) {
	o.Spec = &v
}

// GetTargets returns the Targets field value if set, zero value otherwise.
func (o *V1Workload) GetTargets() map[string]V1Target {
	if o == nil || o.Targets == nil {
		var ret map[string]V1Target
		return ret
	}
	return *o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Workload) GetTargetsOk() (*map[string]V1Target, bool) {
	if o == nil || o.Targets == nil {
		return nil, false
	}
	return o.Targets, true
}

// HasTargets returns a boolean if a field has been set.
func (o *V1Workload) HasTargets() bool {
	if o != nil && o.Targets != nil {
		return true
	}

	return false
}

// SetTargets gets a reference to the given map[string]V1Target and assigns it to the Targets field.
func (o *V1Workload) SetTargets(v map[string]V1Target) {
	o.Targets = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V1Workload) GetStatus() V1WorkloadStatus {
	if o == nil || o.Status == nil {
		var ret V1WorkloadStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Workload) GetStatusOk() (*V1WorkloadStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V1Workload) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given V1WorkloadStatus and assigns it to the Status field.
func (o *V1Workload) SetStatus(v V1WorkloadStatus) {
	o.Status = &v
}

func (o V1Workload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StackId != nil {
		toSerialize["stackId"] = o.StackId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	if o.Targets != nil {
		toSerialize["targets"] = o.Targets
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableV1Workload struct {
	value *V1Workload
	isSet bool
}

func (v NullableV1Workload) Get() *V1Workload {
	return v.value
}

func (v *NullableV1Workload) Set(val *V1Workload) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Workload) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Workload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Workload(val *V1Workload) *NullableV1Workload {
	return &NullableV1Workload{value: val, isSet: true}
}

func (v NullableV1Workload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Workload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
