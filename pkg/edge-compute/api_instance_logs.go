/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge-compute

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// InstanceLogsApiService InstanceLogsApi service
type InstanceLogsApiService service

type apiGetLogsRequest struct {
	ctx _context.Context
	apiService *InstanceLogsApiService
	stackId string
	workloadId string
	instanceName string
	containerName *string
	follow *bool
	previous *bool
	sinceSeconds *string
	sinceTime *time.Time
	timestamps *bool
	tailLines *string
	limitBytes *string
}


func (r apiGetLogsRequest) ContainerName(containerName string) apiGetLogsRequest {
	r.containerName = &containerName
	return r
}

func (r apiGetLogsRequest) Follow(follow bool) apiGetLogsRequest {
	r.follow = &follow
	return r
}

func (r apiGetLogsRequest) Previous(previous bool) apiGetLogsRequest {
	r.previous = &previous
	return r
}

func (r apiGetLogsRequest) SinceSeconds(sinceSeconds string) apiGetLogsRequest {
	r.sinceSeconds = &sinceSeconds
	return r
}

func (r apiGetLogsRequest) SinceTime(sinceTime time.Time) apiGetLogsRequest {
	r.sinceTime = &sinceTime
	return r
}

func (r apiGetLogsRequest) Timestamps(timestamps bool) apiGetLogsRequest {
	r.timestamps = &timestamps
	return r
}

func (r apiGetLogsRequest) TailLines(tailLines string) apiGetLogsRequest {
	r.tailLines = &tailLines
	return r
}

func (r apiGetLogsRequest) LimitBytes(limitBytes string) apiGetLogsRequest {
	r.limitBytes = &limitBytes
	return r
}

/*
GetLogs Get log stream
Retrieve a stream of logs generated by a workload instance's containers. Logs are generated by the containers and are not modified by StackPath. Log contents vary by the application running in the container, though many containerized applications are configured to log to STDOUT and STDERR.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param stackId A stack ID or slug
 * @param workloadId An EdgeCompute workload ID
 * @param instanceName An EdgeCompute workload instance name
@return apiGetLogsRequest
*/
func (a *InstanceLogsApiService) GetLogs(ctx _context.Context, stackId string, workloadId string, instanceName string) apiGetLogsRequest {
	return apiGetLogsRequest{
		apiService: a,
		ctx: ctx,
		stackId: stackId,
		workloadId: workloadId,
		instanceName: instanceName,
	}
}

/*
Execute executes the request
 @return V1LogChunk
*/
func (r apiGetLogsRequest) Execute() (V1LogChunk, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V1LogChunk
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "InstanceLogsApiService.GetLogs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workload/v1/stacks/{stack_id}/workloads/{workload_id}/instances/{instance_name}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", _neturl.QueryEscape(parameterToString(r.stackId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workload_id"+"}", _neturl.QueryEscape(parameterToString(r.workloadId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instance_name"+"}", _neturl.QueryEscape(parameterToString(r.instanceName, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
								
	if r.containerName != nil {
		localVarQueryParams.Add("container_name", parameterToString(*r.containerName, ""))
	}
	if r.follow != nil {
		localVarQueryParams.Add("follow", parameterToString(*r.follow, ""))
	}
	if r.previous != nil {
		localVarQueryParams.Add("previous", parameterToString(*r.previous, ""))
	}
	if r.sinceSeconds != nil {
		localVarQueryParams.Add("since_seconds", parameterToString(*r.sinceSeconds, ""))
	}
	if r.sinceTime != nil {
		localVarQueryParams.Add("since_time", parameterToString(*r.sinceTime, ""))
	}
	if r.timestamps != nil {
		localVarQueryParams.Add("timestamps", parameterToString(*r.timestamps, ""))
	}
	if r.tailLines != nil {
		localVarQueryParams.Add("tail_lines", parameterToString(*r.tailLines, ""))
	}
	if r.limitBytes != nil {
		localVarQueryParams.Add("limit_bytes", parameterToString(*r.limitBytes, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
