/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge-compute

import (
	"encoding/json"
	"time"
)

// V1ContainerStatus The status of a container in a workload
type V1ContainerStatus struct {
	// A container status' name
	Name *string `json:"name,omitempty"`
	Phase *V1ContainerStatusContainerPhase `json:"phase,omitempty"`
	// The date a container started
	StartedAt *time.Time `json:"startedAt,omitempty"`
	// The date a container terminated
	FinishedAt *time.Time `json:"finishedAt,omitempty"`
	Waiting *ContainerStatusWaiting `json:"waiting,omitempty"`
	Running *ContainerStatusRunning `json:"running,omitempty"`
	Terminated *ContainerStatusTerminated `json:"terminated,omitempty"`
	// Whether or not a container is running and ready for service
	Ready *bool `json:"ready,omitempty"`
	// How many times a container has restarted since it was first started
	RestartCount *int32 `json:"restartCount,omitempty"`
	// A unique value that identifies a container
	ContainerId *string `json:"containerId,omitempty"`
}

// NewV1ContainerStatus instantiates a new V1ContainerStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ContainerStatus() *V1ContainerStatus {
	this := V1ContainerStatus{}
	var phase V1ContainerStatusContainerPhase = "CONTAINER_PHASE_UNSPECIFIED"
	this.Phase = &phase
	return &this
}

// NewV1ContainerStatusWithDefaults instantiates a new V1ContainerStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ContainerStatusWithDefaults() *V1ContainerStatus {
	this := V1ContainerStatus{}
	var phase V1ContainerStatusContainerPhase = "CONTAINER_PHASE_UNSPECIFIED"
	this.Phase = &phase
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1ContainerStatus) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStatus) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1ContainerStatus) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1ContainerStatus) SetName(v string) {
	o.Name = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *V1ContainerStatus) GetPhase() V1ContainerStatusContainerPhase {
	if o == nil || o.Phase == nil {
		var ret V1ContainerStatusContainerPhase
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStatus) GetPhaseOk() (*V1ContainerStatusContainerPhase, bool) {
	if o == nil || o.Phase == nil {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *V1ContainerStatus) HasPhase() bool {
	if o != nil && o.Phase != nil {
		return true
	}

	return false
}

// SetPhase gets a reference to the given V1ContainerStatusContainerPhase and assigns it to the Phase field.
func (o *V1ContainerStatus) SetPhase(v V1ContainerStatusContainerPhase) {
	o.Phase = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *V1ContainerStatus) GetStartedAt() time.Time {
	if o == nil || o.StartedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStatus) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || o.StartedAt == nil {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *V1ContainerStatus) HasStartedAt() bool {
	if o != nil && o.StartedAt != nil {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *V1ContainerStatus) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *V1ContainerStatus) GetFinishedAt() time.Time {
	if o == nil || o.FinishedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStatus) GetFinishedAtOk() (*time.Time, bool) {
	if o == nil || o.FinishedAt == nil {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *V1ContainerStatus) HasFinishedAt() bool {
	if o != nil && o.FinishedAt != nil {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given time.Time and assigns it to the FinishedAt field.
func (o *V1ContainerStatus) SetFinishedAt(v time.Time) {
	o.FinishedAt = &v
}

// GetWaiting returns the Waiting field value if set, zero value otherwise.
func (o *V1ContainerStatus) GetWaiting() ContainerStatusWaiting {
	if o == nil || o.Waiting == nil {
		var ret ContainerStatusWaiting
		return ret
	}
	return *o.Waiting
}

// GetWaitingOk returns a tuple with the Waiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStatus) GetWaitingOk() (*ContainerStatusWaiting, bool) {
	if o == nil || o.Waiting == nil {
		return nil, false
	}
	return o.Waiting, true
}

// HasWaiting returns a boolean if a field has been set.
func (o *V1ContainerStatus) HasWaiting() bool {
	if o != nil && o.Waiting != nil {
		return true
	}

	return false
}

// SetWaiting gets a reference to the given ContainerStatusWaiting and assigns it to the Waiting field.
func (o *V1ContainerStatus) SetWaiting(v ContainerStatusWaiting) {
	o.Waiting = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *V1ContainerStatus) GetRunning() ContainerStatusRunning {
	if o == nil || o.Running == nil {
		var ret ContainerStatusRunning
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStatus) GetRunningOk() (*ContainerStatusRunning, bool) {
	if o == nil || o.Running == nil {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *V1ContainerStatus) HasRunning() bool {
	if o != nil && o.Running != nil {
		return true
	}

	return false
}

// SetRunning gets a reference to the given ContainerStatusRunning and assigns it to the Running field.
func (o *V1ContainerStatus) SetRunning(v ContainerStatusRunning) {
	o.Running = &v
}

// GetTerminated returns the Terminated field value if set, zero value otherwise.
func (o *V1ContainerStatus) GetTerminated() ContainerStatusTerminated {
	if o == nil || o.Terminated == nil {
		var ret ContainerStatusTerminated
		return ret
	}
	return *o.Terminated
}

// GetTerminatedOk returns a tuple with the Terminated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStatus) GetTerminatedOk() (*ContainerStatusTerminated, bool) {
	if o == nil || o.Terminated == nil {
		return nil, false
	}
	return o.Terminated, true
}

// HasTerminated returns a boolean if a field has been set.
func (o *V1ContainerStatus) HasTerminated() bool {
	if o != nil && o.Terminated != nil {
		return true
	}

	return false
}

// SetTerminated gets a reference to the given ContainerStatusTerminated and assigns it to the Terminated field.
func (o *V1ContainerStatus) SetTerminated(v ContainerStatusTerminated) {
	o.Terminated = &v
}

// GetReady returns the Ready field value if set, zero value otherwise.
func (o *V1ContainerStatus) GetReady() bool {
	if o == nil || o.Ready == nil {
		var ret bool
		return ret
	}
	return *o.Ready
}

// GetReadyOk returns a tuple with the Ready field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStatus) GetReadyOk() (*bool, bool) {
	if o == nil || o.Ready == nil {
		return nil, false
	}
	return o.Ready, true
}

// HasReady returns a boolean if a field has been set.
func (o *V1ContainerStatus) HasReady() bool {
	if o != nil && o.Ready != nil {
		return true
	}

	return false
}

// SetReady gets a reference to the given bool and assigns it to the Ready field.
func (o *V1ContainerStatus) SetReady(v bool) {
	o.Ready = &v
}

// GetRestartCount returns the RestartCount field value if set, zero value otherwise.
func (o *V1ContainerStatus) GetRestartCount() int32 {
	if o == nil || o.RestartCount == nil {
		var ret int32
		return ret
	}
	return *o.RestartCount
}

// GetRestartCountOk returns a tuple with the RestartCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStatus) GetRestartCountOk() (*int32, bool) {
	if o == nil || o.RestartCount == nil {
		return nil, false
	}
	return o.RestartCount, true
}

// HasRestartCount returns a boolean if a field has been set.
func (o *V1ContainerStatus) HasRestartCount() bool {
	if o != nil && o.RestartCount != nil {
		return true
	}

	return false
}

// SetRestartCount gets a reference to the given int32 and assigns it to the RestartCount field.
func (o *V1ContainerStatus) SetRestartCount(v int32) {
	o.RestartCount = &v
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise.
func (o *V1ContainerStatus) GetContainerId() string {
	if o == nil || o.ContainerId == nil {
		var ret string
		return ret
	}
	return *o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ContainerStatus) GetContainerIdOk() (*string, bool) {
	if o == nil || o.ContainerId == nil {
		return nil, false
	}
	return o.ContainerId, true
}

// HasContainerId returns a boolean if a field has been set.
func (o *V1ContainerStatus) HasContainerId() bool {
	if o != nil && o.ContainerId != nil {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given string and assigns it to the ContainerId field.
func (o *V1ContainerStatus) SetContainerId(v string) {
	o.ContainerId = &v
}

func (o V1ContainerStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Phase != nil {
		toSerialize["phase"] = o.Phase
	}
	if o.StartedAt != nil {
		toSerialize["startedAt"] = o.StartedAt
	}
	if o.FinishedAt != nil {
		toSerialize["finishedAt"] = o.FinishedAt
	}
	if o.Waiting != nil {
		toSerialize["waiting"] = o.Waiting
	}
	if o.Running != nil {
		toSerialize["running"] = o.Running
	}
	if o.Terminated != nil {
		toSerialize["terminated"] = o.Terminated
	}
	if o.Ready != nil {
		toSerialize["ready"] = o.Ready
	}
	if o.RestartCount != nil {
		toSerialize["restartCount"] = o.RestartCount
	}
	if o.ContainerId != nil {
		toSerialize["containerId"] = o.ContainerId
	}
	return json.Marshal(toSerialize)
}

type NullableV1ContainerStatus struct {
	value *V1ContainerStatus
	isSet bool
}

func (v NullableV1ContainerStatus) Get() *V1ContainerStatus {
	return v.value
}

func (v *NullableV1ContainerStatus) Set(val *V1ContainerStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ContainerStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ContainerStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ContainerStatus(val *V1ContainerStatus) *NullableV1ContainerStatus {
	return &NullableV1ContainerStatus{value: val, isSet: true}
}

func (v NullableV1ContainerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ContainerStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
