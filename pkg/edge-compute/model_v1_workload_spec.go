/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge-compute

import (
	"encoding/json"
)

// V1WorkloadSpec The specification for the desired state of a workload
type V1WorkloadSpec struct {
	// Network interfaces to bind to the workload's instances
	NetworkInterfaces *[]V1NetworkInterface `json:"networkInterfaces,omitempty"`
	// A string to container configuration key/value pair
	Containers *map[string]V1ContainerSpec `json:"containers,omitempty"`
	// A string to virtual machine configuration key/value pair
	VirtualMachines *map[string]V1VirtualMachineSpec `json:"virtualMachines,omitempty"`
	// A list of claims that instances may reference  The slug of the claim will be used in combination with the name of the instance to create a stable identifier. The slug should be used in the volume mount specifications for containers and VMs.
	VolumeClaimTemplates *[]V1VolumeClaim `json:"volumeClaimTemplates,omitempty"`
	// The credentials needed to pull a container image
	ImagePullCredentials *[]V1ImagePullCredential `json:"imagePullCredentials,omitempty"`
}

// NewV1WorkloadSpec instantiates a new V1WorkloadSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1WorkloadSpec() *V1WorkloadSpec {
	this := V1WorkloadSpec{}
	return &this
}

// NewV1WorkloadSpecWithDefaults instantiates a new V1WorkloadSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1WorkloadSpecWithDefaults() *V1WorkloadSpec {
	this := V1WorkloadSpec{}
	return &this
}

// GetNetworkInterfaces returns the NetworkInterfaces field value if set, zero value otherwise.
func (o *V1WorkloadSpec) GetNetworkInterfaces() []V1NetworkInterface {
	if o == nil || o.NetworkInterfaces == nil {
		var ret []V1NetworkInterface
		return ret
	}
	return *o.NetworkInterfaces
}

// GetNetworkInterfacesOk returns a tuple with the NetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1WorkloadSpec) GetNetworkInterfacesOk() (*[]V1NetworkInterface, bool) {
	if o == nil || o.NetworkInterfaces == nil {
		return nil, false
	}
	return o.NetworkInterfaces, true
}

// HasNetworkInterfaces returns a boolean if a field has been set.
func (o *V1WorkloadSpec) HasNetworkInterfaces() bool {
	if o != nil && o.NetworkInterfaces != nil {
		return true
	}

	return false
}

// SetNetworkInterfaces gets a reference to the given []V1NetworkInterface and assigns it to the NetworkInterfaces field.
func (o *V1WorkloadSpec) SetNetworkInterfaces(v []V1NetworkInterface) {
	o.NetworkInterfaces = &v
}

// GetContainers returns the Containers field value if set, zero value otherwise.
func (o *V1WorkloadSpec) GetContainers() map[string]V1ContainerSpec {
	if o == nil || o.Containers == nil {
		var ret map[string]V1ContainerSpec
		return ret
	}
	return *o.Containers
}

// GetContainersOk returns a tuple with the Containers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1WorkloadSpec) GetContainersOk() (*map[string]V1ContainerSpec, bool) {
	if o == nil || o.Containers == nil {
		return nil, false
	}
	return o.Containers, true
}

// HasContainers returns a boolean if a field has been set.
func (o *V1WorkloadSpec) HasContainers() bool {
	if o != nil && o.Containers != nil {
		return true
	}

	return false
}

// SetContainers gets a reference to the given map[string]V1ContainerSpec and assigns it to the Containers field.
func (o *V1WorkloadSpec) SetContainers(v map[string]V1ContainerSpec) {
	o.Containers = &v
}

// GetVirtualMachines returns the VirtualMachines field value if set, zero value otherwise.
func (o *V1WorkloadSpec) GetVirtualMachines() map[string]V1VirtualMachineSpec {
	if o == nil || o.VirtualMachines == nil {
		var ret map[string]V1VirtualMachineSpec
		return ret
	}
	return *o.VirtualMachines
}

// GetVirtualMachinesOk returns a tuple with the VirtualMachines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1WorkloadSpec) GetVirtualMachinesOk() (*map[string]V1VirtualMachineSpec, bool) {
	if o == nil || o.VirtualMachines == nil {
		return nil, false
	}
	return o.VirtualMachines, true
}

// HasVirtualMachines returns a boolean if a field has been set.
func (o *V1WorkloadSpec) HasVirtualMachines() bool {
	if o != nil && o.VirtualMachines != nil {
		return true
	}

	return false
}

// SetVirtualMachines gets a reference to the given map[string]V1VirtualMachineSpec and assigns it to the VirtualMachines field.
func (o *V1WorkloadSpec) SetVirtualMachines(v map[string]V1VirtualMachineSpec) {
	o.VirtualMachines = &v
}

// GetVolumeClaimTemplates returns the VolumeClaimTemplates field value if set, zero value otherwise.
func (o *V1WorkloadSpec) GetVolumeClaimTemplates() []V1VolumeClaim {
	if o == nil || o.VolumeClaimTemplates == nil {
		var ret []V1VolumeClaim
		return ret
	}
	return *o.VolumeClaimTemplates
}

// GetVolumeClaimTemplatesOk returns a tuple with the VolumeClaimTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1WorkloadSpec) GetVolumeClaimTemplatesOk() (*[]V1VolumeClaim, bool) {
	if o == nil || o.VolumeClaimTemplates == nil {
		return nil, false
	}
	return o.VolumeClaimTemplates, true
}

// HasVolumeClaimTemplates returns a boolean if a field has been set.
func (o *V1WorkloadSpec) HasVolumeClaimTemplates() bool {
	if o != nil && o.VolumeClaimTemplates != nil {
		return true
	}

	return false
}

// SetVolumeClaimTemplates gets a reference to the given []V1VolumeClaim and assigns it to the VolumeClaimTemplates field.
func (o *V1WorkloadSpec) SetVolumeClaimTemplates(v []V1VolumeClaim) {
	o.VolumeClaimTemplates = &v
}

// GetImagePullCredentials returns the ImagePullCredentials field value if set, zero value otherwise.
func (o *V1WorkloadSpec) GetImagePullCredentials() []V1ImagePullCredential {
	if o == nil || o.ImagePullCredentials == nil {
		var ret []V1ImagePullCredential
		return ret
	}
	return *o.ImagePullCredentials
}

// GetImagePullCredentialsOk returns a tuple with the ImagePullCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1WorkloadSpec) GetImagePullCredentialsOk() (*[]V1ImagePullCredential, bool) {
	if o == nil || o.ImagePullCredentials == nil {
		return nil, false
	}
	return o.ImagePullCredentials, true
}

// HasImagePullCredentials returns a boolean if a field has been set.
func (o *V1WorkloadSpec) HasImagePullCredentials() bool {
	if o != nil && o.ImagePullCredentials != nil {
		return true
	}

	return false
}

// SetImagePullCredentials gets a reference to the given []V1ImagePullCredential and assigns it to the ImagePullCredentials field.
func (o *V1WorkloadSpec) SetImagePullCredentials(v []V1ImagePullCredential) {
	o.ImagePullCredentials = &v
}

func (o V1WorkloadSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkInterfaces != nil {
		toSerialize["networkInterfaces"] = o.NetworkInterfaces
	}
	if o.Containers != nil {
		toSerialize["containers"] = o.Containers
	}
	if o.VirtualMachines != nil {
		toSerialize["virtualMachines"] = o.VirtualMachines
	}
	if o.VolumeClaimTemplates != nil {
		toSerialize["volumeClaimTemplates"] = o.VolumeClaimTemplates
	}
	if o.ImagePullCredentials != nil {
		toSerialize["imagePullCredentials"] = o.ImagePullCredentials
	}
	return json.Marshal(toSerialize)
}

type NullableV1WorkloadSpec struct {
	value *V1WorkloadSpec
	isSet bool
}

func (v NullableV1WorkloadSpec) Get() *V1WorkloadSpec {
	return v.value
}

func (v *NullableV1WorkloadSpec) Set(val *V1WorkloadSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1WorkloadSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1WorkloadSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1WorkloadSpec(val *V1WorkloadSpec) *NullableV1WorkloadSpec {
	return &NullableV1WorkloadSpec{value: val, isSet: true}
}

func (v NullableV1WorkloadSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1WorkloadSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
