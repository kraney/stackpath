/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge-compute

import (
	"encoding/json"
)

// ContainerStatusWaiting Properties related to containers that are starting up
type ContainerStatusWaiting struct {
	// The reason that a container is waiting to start
	Reason *string `json:"reason,omitempty"`
	// A more detailed explanation of a container's waiting state
	Message *string `json:"message,omitempty"`
}

// NewContainerStatusWaiting instantiates a new ContainerStatusWaiting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerStatusWaiting() *ContainerStatusWaiting {
	this := ContainerStatusWaiting{}
	return &this
}

// NewContainerStatusWaitingWithDefaults instantiates a new ContainerStatusWaiting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerStatusWaitingWithDefaults() *ContainerStatusWaiting {
	this := ContainerStatusWaiting{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ContainerStatusWaiting) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerStatusWaiting) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ContainerStatusWaiting) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ContainerStatusWaiting) SetReason(v string) {
	o.Reason = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ContainerStatusWaiting) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerStatusWaiting) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ContainerStatusWaiting) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ContainerStatusWaiting) SetMessage(v string) {
	o.Message = &v
}

func (o ContainerStatusWaiting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableContainerStatusWaiting struct {
	value *ContainerStatusWaiting
	isSet bool
}

func (v NullableContainerStatusWaiting) Get() *ContainerStatusWaiting {
	return v.value
}

func (v *NullableContainerStatusWaiting) Set(val *ContainerStatusWaiting) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerStatusWaiting) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerStatusWaiting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerStatusWaiting(val *ContainerStatusWaiting) *NullableContainerStatusWaiting {
	return &NullableContainerStatusWaiting{value: val, isSet: true}
}

func (v NullableContainerStatusWaiting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerStatusWaiting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
