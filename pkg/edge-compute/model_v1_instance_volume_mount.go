/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge-compute

import (
	"encoding/json"
)

// V1InstanceVolumeMount Describes mounting a volume on containers or vms in an instance
type V1InstanceVolumeMount struct {
	// The slug of the volume claim to mount
	Slug *string `json:"slug,omitempty"`
	// The path in an instance to mount a volume
	MountPath *string `json:"mountPath,omitempty"`
}

// NewV1InstanceVolumeMount instantiates a new V1InstanceVolumeMount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1InstanceVolumeMount() *V1InstanceVolumeMount {
	this := V1InstanceVolumeMount{}
	return &this
}

// NewV1InstanceVolumeMountWithDefaults instantiates a new V1InstanceVolumeMount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1InstanceVolumeMountWithDefaults() *V1InstanceVolumeMount {
	this := V1InstanceVolumeMount{}
	return &this
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *V1InstanceVolumeMount) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstanceVolumeMount) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *V1InstanceVolumeMount) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *V1InstanceVolumeMount) SetSlug(v string) {
	o.Slug = &v
}

// GetMountPath returns the MountPath field value if set, zero value otherwise.
func (o *V1InstanceVolumeMount) GetMountPath() string {
	if o == nil || o.MountPath == nil {
		var ret string
		return ret
	}
	return *o.MountPath
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstanceVolumeMount) GetMountPathOk() (*string, bool) {
	if o == nil || o.MountPath == nil {
		return nil, false
	}
	return o.MountPath, true
}

// HasMountPath returns a boolean if a field has been set.
func (o *V1InstanceVolumeMount) HasMountPath() bool {
	if o != nil && o.MountPath != nil {
		return true
	}

	return false
}

// SetMountPath gets a reference to the given string and assigns it to the MountPath field.
func (o *V1InstanceVolumeMount) SetMountPath(v string) {
	o.MountPath = &v
}

func (o V1InstanceVolumeMount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.MountPath != nil {
		toSerialize["mountPath"] = o.MountPath
	}
	return json.Marshal(toSerialize)
}

type NullableV1InstanceVolumeMount struct {
	value *V1InstanceVolumeMount
	isSet bool
}

func (v NullableV1InstanceVolumeMount) Get() *V1InstanceVolumeMount {
	return v.value
}

func (v *NullableV1InstanceVolumeMount) Set(val *V1InstanceVolumeMount) {
	v.value = val
	v.isSet = true
}

func (v NullableV1InstanceVolumeMount) IsSet() bool {
	return v.isSet
}

func (v *NullableV1InstanceVolumeMount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1InstanceVolumeMount(val *V1InstanceVolumeMount) *NullableV1InstanceVolumeMount {
	return &NullableV1InstanceVolumeMount{value: val, isSet: true}
}

func (v NullableV1InstanceVolumeMount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1InstanceVolumeMount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
