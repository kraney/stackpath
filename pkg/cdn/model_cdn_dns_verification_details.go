/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	"encoding/json"
)

// CdnDnsVerificationDetails DNS-based domain ownership verification details
type CdnDnsVerificationDetails struct {
	// A list of DNS records that will validate domain ownership
	DnsRecords *[]string `json:"dnsRecords,omitempty"`
	// A list of parsed dns records required for SSL verification
	Records *[]CdnDnsRecord `json:"records,omitempty"`
}

// NewCdnDnsVerificationDetails instantiates a new CdnDnsVerificationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdnDnsVerificationDetails() *CdnDnsVerificationDetails {
	this := CdnDnsVerificationDetails{}
	return &this
}

// NewCdnDnsVerificationDetailsWithDefaults instantiates a new CdnDnsVerificationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdnDnsVerificationDetailsWithDefaults() *CdnDnsVerificationDetails {
	this := CdnDnsVerificationDetails{}
	return &this
}

// GetDnsRecords returns the DnsRecords field value if set, zero value otherwise.
func (o *CdnDnsVerificationDetails) GetDnsRecords() []string {
	if o == nil || o.DnsRecords == nil {
		var ret []string
		return ret
	}
	return *o.DnsRecords
}

// GetDnsRecordsOk returns a tuple with the DnsRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdnDnsVerificationDetails) GetDnsRecordsOk() (*[]string, bool) {
	if o == nil || o.DnsRecords == nil {
		return nil, false
	}
	return o.DnsRecords, true
}

// HasDnsRecords returns a boolean if a field has been set.
func (o *CdnDnsVerificationDetails) HasDnsRecords() bool {
	if o != nil && o.DnsRecords != nil {
		return true
	}

	return false
}

// SetDnsRecords gets a reference to the given []string and assigns it to the DnsRecords field.
func (o *CdnDnsVerificationDetails) SetDnsRecords(v []string) {
	o.DnsRecords = &v
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *CdnDnsVerificationDetails) GetRecords() []CdnDnsRecord {
	if o == nil || o.Records == nil {
		var ret []CdnDnsRecord
		return ret
	}
	return *o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdnDnsVerificationDetails) GetRecordsOk() (*[]CdnDnsRecord, bool) {
	if o == nil || o.Records == nil {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *CdnDnsVerificationDetails) HasRecords() bool {
	if o != nil && o.Records != nil {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []CdnDnsRecord and assigns it to the Records field.
func (o *CdnDnsVerificationDetails) SetRecords(v []CdnDnsRecord) {
	o.Records = &v
}

func (o CdnDnsVerificationDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DnsRecords != nil {
		toSerialize["dnsRecords"] = o.DnsRecords
	}
	if o.Records != nil {
		toSerialize["records"] = o.Records
	}
	return json.Marshal(toSerialize)
}

type NullableCdnDnsVerificationDetails struct {
	value *CdnDnsVerificationDetails
	isSet bool
}

func (v NullableCdnDnsVerificationDetails) Get() *CdnDnsVerificationDetails {
	return v.value
}

func (v *NullableCdnDnsVerificationDetails) Set(val *CdnDnsVerificationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCdnDnsVerificationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCdnDnsVerificationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdnDnsVerificationDetails(val *CdnDnsVerificationDetails) *NullableCdnDnsVerificationDetails {
	return &NullableCdnDnsVerificationDetails{value: val, isSet: true}
}

func (v NullableCdnDnsVerificationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdnDnsVerificationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
