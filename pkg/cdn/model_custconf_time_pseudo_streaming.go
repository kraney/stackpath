/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	"encoding/json"
)

// CustconfTimePseudoStreaming The HTTP pseudo-streaming policy enables Flash based video players to support seeking to random locations within a MP4 or FLV file without having to download the entire video. Flash players such as Flowplayer and JWPlayer can be configured to send a query string parameter that indicates to the server the time offset the user advanced the video to. Typically a query string parameter called \"start\" is used by these players.
type CustconfTimePseudoStreaming struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	// The name of the query string parameter that indicates to the CDN the specific time interval of the video that is being requested.
	JumpToTimeStartParam *string `json:"jumpToTimeStartParam,omitempty"`
	// The name of the query string parameter that indicates to the CDN the end time of the video that should be returned.
	JumpToTimeEndParam *string `json:"jumpToTimeEndParam,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

// NewCustconfTimePseudoStreaming instantiates a new CustconfTimePseudoStreaming object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfTimePseudoStreaming() *CustconfTimePseudoStreaming {
	this := CustconfTimePseudoStreaming{}
	return &this
}

// NewCustconfTimePseudoStreamingWithDefaults instantiates a new CustconfTimePseudoStreaming object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfTimePseudoStreamingWithDefaults() *CustconfTimePseudoStreaming {
	this := CustconfTimePseudoStreaming{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfTimePseudoStreaming) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfTimePseudoStreaming) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfTimePseudoStreaming) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfTimePseudoStreaming) SetId(v string) {
	o.Id = &v
}

// GetJumpToTimeStartParam returns the JumpToTimeStartParam field value if set, zero value otherwise.
func (o *CustconfTimePseudoStreaming) GetJumpToTimeStartParam() string {
	if o == nil || o.JumpToTimeStartParam == nil {
		var ret string
		return ret
	}
	return *o.JumpToTimeStartParam
}

// GetJumpToTimeStartParamOk returns a tuple with the JumpToTimeStartParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfTimePseudoStreaming) GetJumpToTimeStartParamOk() (*string, bool) {
	if o == nil || o.JumpToTimeStartParam == nil {
		return nil, false
	}
	return o.JumpToTimeStartParam, true
}

// HasJumpToTimeStartParam returns a boolean if a field has been set.
func (o *CustconfTimePseudoStreaming) HasJumpToTimeStartParam() bool {
	if o != nil && o.JumpToTimeStartParam != nil {
		return true
	}

	return false
}

// SetJumpToTimeStartParam gets a reference to the given string and assigns it to the JumpToTimeStartParam field.
func (o *CustconfTimePseudoStreaming) SetJumpToTimeStartParam(v string) {
	o.JumpToTimeStartParam = &v
}

// GetJumpToTimeEndParam returns the JumpToTimeEndParam field value if set, zero value otherwise.
func (o *CustconfTimePseudoStreaming) GetJumpToTimeEndParam() string {
	if o == nil || o.JumpToTimeEndParam == nil {
		var ret string
		return ret
	}
	return *o.JumpToTimeEndParam
}

// GetJumpToTimeEndParamOk returns a tuple with the JumpToTimeEndParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfTimePseudoStreaming) GetJumpToTimeEndParamOk() (*string, bool) {
	if o == nil || o.JumpToTimeEndParam == nil {
		return nil, false
	}
	return o.JumpToTimeEndParam, true
}

// HasJumpToTimeEndParam returns a boolean if a field has been set.
func (o *CustconfTimePseudoStreaming) HasJumpToTimeEndParam() bool {
	if o != nil && o.JumpToTimeEndParam != nil {
		return true
	}

	return false
}

// SetJumpToTimeEndParam gets a reference to the given string and assigns it to the JumpToTimeEndParam field.
func (o *CustconfTimePseudoStreaming) SetJumpToTimeEndParam(v string) {
	o.JumpToTimeEndParam = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustconfTimePseudoStreaming) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfTimePseudoStreaming) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustconfTimePseudoStreaming) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustconfTimePseudoStreaming) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o CustconfTimePseudoStreaming) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.JumpToTimeStartParam != nil {
		toSerialize["jumpToTimeStartParam"] = o.JumpToTimeStartParam
	}
	if o.JumpToTimeEndParam != nil {
		toSerialize["jumpToTimeEndParam"] = o.JumpToTimeEndParam
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfTimePseudoStreaming struct {
	value *CustconfTimePseudoStreaming
	isSet bool
}

func (v NullableCustconfTimePseudoStreaming) Get() *CustconfTimePseudoStreaming {
	return v.value
}

func (v *NullableCustconfTimePseudoStreaming) Set(val *CustconfTimePseudoStreaming) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfTimePseudoStreaming) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfTimePseudoStreaming) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfTimePseudoStreaming(val *CustconfTimePseudoStreaming) *NullableCustconfTimePseudoStreaming {
	return &NullableCustconfTimePseudoStreaming{value: val, isSet: true}
}

func (v NullableCustconfTimePseudoStreaming) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfTimePseudoStreaming) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
