/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	"encoding/json"
)

// SchemacdnOrigin A CDN site's origin  Origins are the original sources of the data that is cached by the CDN on request.
type SchemacdnOrigin struct {
	// An origin's unique identifier
	Id *string `json:"id,omitempty"`
	// An origin's path  Paths default to \"/\"
	Path *string `json:"path,omitempty"`
	// An origin's hostname or IP address
	Hostname *string `json:"hostname,omitempty"`
	// The HTTP port to connect to the origin
	Port *int32 `json:"port,omitempty"`
	// The HTTPS port to connect to the origin
	SecurePort *int32 `json:"securePort,omitempty"`
	// Whether or not an origin is dedicated to a CDN site  Dedicated origins cannot be used by any site other than that to which it is dedicated.
	Dedicated *bool `json:"dedicated,omitempty"`
	// The ID of the CDN site to which an origin is dedicated
	SiteId *string `json:"siteId,omitempty"`
}

// NewSchemacdnOrigin instantiates a new SchemacdnOrigin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemacdnOrigin() *SchemacdnOrigin {
	this := SchemacdnOrigin{}
	return &this
}

// NewSchemacdnOriginWithDefaults instantiates a new SchemacdnOrigin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemacdnOriginWithDefaults() *SchemacdnOrigin {
	this := SchemacdnOrigin{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemacdnOrigin) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemacdnOrigin) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemacdnOrigin) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemacdnOrigin) SetId(v string) {
	o.Id = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *SchemacdnOrigin) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemacdnOrigin) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *SchemacdnOrigin) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *SchemacdnOrigin) SetPath(v string) {
	o.Path = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *SchemacdnOrigin) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemacdnOrigin) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *SchemacdnOrigin) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *SchemacdnOrigin) SetHostname(v string) {
	o.Hostname = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SchemacdnOrigin) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemacdnOrigin) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SchemacdnOrigin) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *SchemacdnOrigin) SetPort(v int32) {
	o.Port = &v
}

// GetSecurePort returns the SecurePort field value if set, zero value otherwise.
func (o *SchemacdnOrigin) GetSecurePort() int32 {
	if o == nil || o.SecurePort == nil {
		var ret int32
		return ret
	}
	return *o.SecurePort
}

// GetSecurePortOk returns a tuple with the SecurePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemacdnOrigin) GetSecurePortOk() (*int32, bool) {
	if o == nil || o.SecurePort == nil {
		return nil, false
	}
	return o.SecurePort, true
}

// HasSecurePort returns a boolean if a field has been set.
func (o *SchemacdnOrigin) HasSecurePort() bool {
	if o != nil && o.SecurePort != nil {
		return true
	}

	return false
}

// SetSecurePort gets a reference to the given int32 and assigns it to the SecurePort field.
func (o *SchemacdnOrigin) SetSecurePort(v int32) {
	o.SecurePort = &v
}

// GetDedicated returns the Dedicated field value if set, zero value otherwise.
func (o *SchemacdnOrigin) GetDedicated() bool {
	if o == nil || o.Dedicated == nil {
		var ret bool
		return ret
	}
	return *o.Dedicated
}

// GetDedicatedOk returns a tuple with the Dedicated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemacdnOrigin) GetDedicatedOk() (*bool, bool) {
	if o == nil || o.Dedicated == nil {
		return nil, false
	}
	return o.Dedicated, true
}

// HasDedicated returns a boolean if a field has been set.
func (o *SchemacdnOrigin) HasDedicated() bool {
	if o != nil && o.Dedicated != nil {
		return true
	}

	return false
}

// SetDedicated gets a reference to the given bool and assigns it to the Dedicated field.
func (o *SchemacdnOrigin) SetDedicated(v bool) {
	o.Dedicated = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *SchemacdnOrigin) GetSiteId() string {
	if o == nil || o.SiteId == nil {
		var ret string
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemacdnOrigin) GetSiteIdOk() (*string, bool) {
	if o == nil || o.SiteId == nil {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *SchemacdnOrigin) HasSiteId() bool {
	if o != nil && o.SiteId != nil {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given string and assigns it to the SiteId field.
func (o *SchemacdnOrigin) SetSiteId(v string) {
	o.SiteId = &v
}

func (o SchemacdnOrigin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.SecurePort != nil {
		toSerialize["securePort"] = o.SecurePort
	}
	if o.Dedicated != nil {
		toSerialize["dedicated"] = o.Dedicated
	}
	if o.SiteId != nil {
		toSerialize["siteId"] = o.SiteId
	}
	return json.Marshal(toSerialize)
}

type NullableSchemacdnOrigin struct {
	value *SchemacdnOrigin
	isSet bool
}

func (v NullableSchemacdnOrigin) Get() *SchemacdnOrigin {
	return v.value
}

func (v *NullableSchemacdnOrigin) Set(val *SchemacdnOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemacdnOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemacdnOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemacdnOrigin(val *SchemacdnOrigin) *NullableSchemacdnOrigin {
	return &NullableSchemacdnOrigin{value: val, isSet: true}
}

func (v NullableSchemacdnOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemacdnOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
