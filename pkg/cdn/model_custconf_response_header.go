/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	"encoding/json"
)

// CustconfResponseHeader The custom HTTP response headers policy allows you to specify a list of HTTP headers you want the CDN caching servers to include in the response to clients.
type CustconfResponseHeader struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	// A pipe delimited list of rules that instructs the CDN caching servers to include a content-disposition header. The rules included in this setting must be entered in the following format: Content-Disposition:<User Agent>:<file extension 1>, <file extension 2>. For example, to send the Content-Disposition header for all Mozilla browsers on the delivery of mp3, exe, tar, zip, gz and rar files, you would enter the following in the field: Content-Disposition:Mozilla*:mp3,exe,tar,zip,gz,rar
	Http *string `json:"http,omitempty"`
	// This gives the ability to disable the ETag header on the response.
	EnableETag *bool `json:"enableETag,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

// NewCustconfResponseHeader instantiates a new CustconfResponseHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfResponseHeader() *CustconfResponseHeader {
	this := CustconfResponseHeader{}
	return &this
}

// NewCustconfResponseHeaderWithDefaults instantiates a new CustconfResponseHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfResponseHeaderWithDefaults() *CustconfResponseHeader {
	this := CustconfResponseHeader{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfResponseHeader) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfResponseHeader) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfResponseHeader) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfResponseHeader) SetId(v string) {
	o.Id = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *CustconfResponseHeader) GetHttp() string {
	if o == nil || o.Http == nil {
		var ret string
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfResponseHeader) GetHttpOk() (*string, bool) {
	if o == nil || o.Http == nil {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *CustconfResponseHeader) HasHttp() bool {
	if o != nil && o.Http != nil {
		return true
	}

	return false
}

// SetHttp gets a reference to the given string and assigns it to the Http field.
func (o *CustconfResponseHeader) SetHttp(v string) {
	o.Http = &v
}

// GetEnableETag returns the EnableETag field value if set, zero value otherwise.
func (o *CustconfResponseHeader) GetEnableETag() bool {
	if o == nil || o.EnableETag == nil {
		var ret bool
		return ret
	}
	return *o.EnableETag
}

// GetEnableETagOk returns a tuple with the EnableETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfResponseHeader) GetEnableETagOk() (*bool, bool) {
	if o == nil || o.EnableETag == nil {
		return nil, false
	}
	return o.EnableETag, true
}

// HasEnableETag returns a boolean if a field has been set.
func (o *CustconfResponseHeader) HasEnableETag() bool {
	if o != nil && o.EnableETag != nil {
		return true
	}

	return false
}

// SetEnableETag gets a reference to the given bool and assigns it to the EnableETag field.
func (o *CustconfResponseHeader) SetEnableETag(v bool) {
	o.EnableETag = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustconfResponseHeader) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfResponseHeader) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustconfResponseHeader) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustconfResponseHeader) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o CustconfResponseHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Http != nil {
		toSerialize["http"] = o.Http
	}
	if o.EnableETag != nil {
		toSerialize["enableETag"] = o.EnableETag
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfResponseHeader struct {
	value *CustconfResponseHeader
	isSet bool
}

func (v NullableCustconfResponseHeader) Get() *CustconfResponseHeader {
	return v.value
}

func (v *NullableCustconfResponseHeader) Set(val *CustconfResponseHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfResponseHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfResponseHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfResponseHeader(val *CustconfResponseHeader) *NullableCustconfResponseHeader {
	return &NullableCustconfResponseHeader{value: val, isSet: true}
}

func (v NullableCustconfResponseHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfResponseHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
