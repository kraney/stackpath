/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	"encoding/json"
)

// CdnScanOriginResponse The response from a request to scan a URL from the StackPath edge network
type CdnScanOriginResponse struct {
	// The IP address that was scanned
	IpAddress *string `json:"ipAddress,omitempty"`
	// The hostname that was scanned
	Hostname *string `json:"hostname,omitempty"`
	SslDetails *ScanOriginResponseOriginScanSSLDetails `json:"sslDetails,omitempty"`
	// Whether or not the scanned domain is already in use on the StackPath platform
	DomainInUse *bool `json:"domainInUse,omitempty"`
}

// NewCdnScanOriginResponse instantiates a new CdnScanOriginResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdnScanOriginResponse() *CdnScanOriginResponse {
	this := CdnScanOriginResponse{}
	return &this
}

// NewCdnScanOriginResponseWithDefaults instantiates a new CdnScanOriginResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdnScanOriginResponseWithDefaults() *CdnScanOriginResponse {
	this := CdnScanOriginResponse{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *CdnScanOriginResponse) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdnScanOriginResponse) GetIpAddressOk() (*string, bool) {
	if o == nil || o.IpAddress == nil {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *CdnScanOriginResponse) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *CdnScanOriginResponse) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *CdnScanOriginResponse) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdnScanOriginResponse) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *CdnScanOriginResponse) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *CdnScanOriginResponse) SetHostname(v string) {
	o.Hostname = &v
}

// GetSslDetails returns the SslDetails field value if set, zero value otherwise.
func (o *CdnScanOriginResponse) GetSslDetails() ScanOriginResponseOriginScanSSLDetails {
	if o == nil || o.SslDetails == nil {
		var ret ScanOriginResponseOriginScanSSLDetails
		return ret
	}
	return *o.SslDetails
}

// GetSslDetailsOk returns a tuple with the SslDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdnScanOriginResponse) GetSslDetailsOk() (*ScanOriginResponseOriginScanSSLDetails, bool) {
	if o == nil || o.SslDetails == nil {
		return nil, false
	}
	return o.SslDetails, true
}

// HasSslDetails returns a boolean if a field has been set.
func (o *CdnScanOriginResponse) HasSslDetails() bool {
	if o != nil && o.SslDetails != nil {
		return true
	}

	return false
}

// SetSslDetails gets a reference to the given ScanOriginResponseOriginScanSSLDetails and assigns it to the SslDetails field.
func (o *CdnScanOriginResponse) SetSslDetails(v ScanOriginResponseOriginScanSSLDetails) {
	o.SslDetails = &v
}

// GetDomainInUse returns the DomainInUse field value if set, zero value otherwise.
func (o *CdnScanOriginResponse) GetDomainInUse() bool {
	if o == nil || o.DomainInUse == nil {
		var ret bool
		return ret
	}
	return *o.DomainInUse
}

// GetDomainInUseOk returns a tuple with the DomainInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdnScanOriginResponse) GetDomainInUseOk() (*bool, bool) {
	if o == nil || o.DomainInUse == nil {
		return nil, false
	}
	return o.DomainInUse, true
}

// HasDomainInUse returns a boolean if a field has been set.
func (o *CdnScanOriginResponse) HasDomainInUse() bool {
	if o != nil && o.DomainInUse != nil {
		return true
	}

	return false
}

// SetDomainInUse gets a reference to the given bool and assigns it to the DomainInUse field.
func (o *CdnScanOriginResponse) SetDomainInUse(v bool) {
	o.DomainInUse = &v
}

func (o CdnScanOriginResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpAddress != nil {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.SslDetails != nil {
		toSerialize["sslDetails"] = o.SslDetails
	}
	if o.DomainInUse != nil {
		toSerialize["domainInUse"] = o.DomainInUse
	}
	return json.Marshal(toSerialize)
}

type NullableCdnScanOriginResponse struct {
	value *CdnScanOriginResponse
	isSet bool
}

func (v NullableCdnScanOriginResponse) Get() *CdnScanOriginResponse {
	return v.value
}

func (v *NullableCdnScanOriginResponse) Set(val *CdnScanOriginResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCdnScanOriginResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCdnScanOriginResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdnScanOriginResponse(val *CdnScanOriginResponse) *NullableCdnScanOriginResponse {
	return &NullableCdnScanOriginResponse{value: val, isSet: true}
}

func (v NullableCdnScanOriginResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdnScanOriginResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
