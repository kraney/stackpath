/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	"encoding/json"
)

// CdnCreateCertificateResponse The response from a request to add an SSL certificate to a stack
type CdnCreateCertificateResponse struct {
	Certificate *CdnCertificate `json:"certificate,omitempty"`
}

// NewCdnCreateCertificateResponse instantiates a new CdnCreateCertificateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdnCreateCertificateResponse() *CdnCreateCertificateResponse {
	this := CdnCreateCertificateResponse{}
	return &this
}

// NewCdnCreateCertificateResponseWithDefaults instantiates a new CdnCreateCertificateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdnCreateCertificateResponseWithDefaults() *CdnCreateCertificateResponse {
	this := CdnCreateCertificateResponse{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CdnCreateCertificateResponse) GetCertificate() CdnCertificate {
	if o == nil || o.Certificate == nil {
		var ret CdnCertificate
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdnCreateCertificateResponse) GetCertificateOk() (*CdnCertificate, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CdnCreateCertificateResponse) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given CdnCertificate and assigns it to the Certificate field.
func (o *CdnCreateCertificateResponse) SetCertificate(v CdnCertificate) {
	o.Certificate = &v
}

func (o CdnCreateCertificateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	return json.Marshal(toSerialize)
}

type NullableCdnCreateCertificateResponse struct {
	value *CdnCreateCertificateResponse
	isSet bool
}

func (v NullableCdnCreateCertificateResponse) Get() *CdnCreateCertificateResponse {
	return v.value
}

func (v *NullableCdnCreateCertificateResponse) Set(val *CdnCreateCertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCdnCreateCertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCdnCreateCertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdnCreateCertificateResponse(val *CdnCreateCertificateResponse) *NullableCdnCreateCertificateResponse {
	return &NullableCdnCreateCertificateResponse{value: val, isSet: true}
}

func (v NullableCdnCreateCertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdnCreateCertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
