/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// MetricsApiService MetricsApi service
type MetricsApiService service

// GetMetricsOpts Optional parameters for the method 'GetMetrics'
type GetMetricsOpts struct {
    StartDate optional.Time
    EndDate optional.Time
    Granularity optional.String
    Platforms optional.String
    Pops optional.String
    BillingRegions optional.String
    Sites optional.String
    GroupBy optional.String
    SiteTypeFilter optional.String
}

/*
GetMetrics Get metrics
The last 24 hours of metrics are retrieved if the start and end dates are not provided
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param stackId A stack ID or slug
 * @param optional nil or *GetMetricsOpts - Optional Parameters:
 * @param "StartDate" (optional.Time) -  The starting date to retrieve metrics for.
 * @param "EndDate" (optional.Time) -  The ending date to retrieve metrics for.
 * @param "Granularity" (optional.String) -  An ISO 8601 duration to roll up metrics by
 * @param "Platforms" (optional.String) -  A comma-separated list of billing platforms to filter metrics for.
 * @param "Pops" (optional.String) -  A comma-separated list of StackPath point of presence location codes to filter metrics for.
 * @param "BillingRegions" (optional.String) -  A comma-separated list of billing regions to filter metrics for.
 * @param "Sites" (optional.String) -  A comma-separated list of site IDs to filter metrics for.
 * @param "GroupBy" (optional.String) -  The field to group metrics by
 * @param "SiteTypeFilter" (optional.String) -  The type of sites to retrieve metrics for
@return CdnGetMetricsResponse
*/
func (a *MetricsApiService) GetMetrics(ctx _context.Context, stackId string, localVarOptionals *GetMetricsOpts) (CdnGetMetricsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CdnGetMetricsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cdn/v1/stacks/{stack_id}/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", _neturl.QueryEscape(parameterToString(stackId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.StartDate.IsSet() {
		localVarQueryParams.Add("start_date", parameterToString(localVarOptionals.StartDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndDate.IsSet() {
		localVarQueryParams.Add("end_date", parameterToString(localVarOptionals.EndDate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Granularity.IsSet() {
		localVarQueryParams.Add("granularity", parameterToString(localVarOptionals.Granularity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Platforms.IsSet() {
		localVarQueryParams.Add("platforms", parameterToString(localVarOptionals.Platforms.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Pops.IsSet() {
		localVarQueryParams.Add("pops", parameterToString(localVarOptionals.Pops.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BillingRegions.IsSet() {
		localVarQueryParams.Add("billing_regions", parameterToString(localVarOptionals.BillingRegions.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sites.IsSet() {
		localVarQueryParams.Add("sites", parameterToString(localVarOptionals.Sites.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GroupBy.IsSet() {
		localVarQueryParams.Add("group_by", parameterToString(localVarOptionals.GroupBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SiteTypeFilter.IsSet() {
		localVarQueryParams.Add("site_type_filter", parameterToString(localVarOptionals.SiteTypeFilter.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v ApiStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
