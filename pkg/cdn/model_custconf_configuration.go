/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	"encoding/json"
)

// CustconfConfiguration Advanced configuration options
type CustconfConfiguration struct {
	AccessLogs *CustconfAccessLogs `json:"accessLogs,omitempty"`
	AccessLogsConfig *CustconfAccessLogsConfig `json:"accessLogsConfig,omitempty"`
	// IP address restrictions allow you to configure your CDN container to grant or deny a specific IP addresses or range of IP addresses from accessing content cached in a directory in your CDN container.
	AuthACL *[]CustconfAuthACL `json:"authACL,omitempty"`
	// Geographic restrictions allow you to restrict content to end users in specific locations. The IP address of incoming requests is checked against a current list of IP allocations to countries and to states within the US. If an end user's IP address is not found in the list, they are allowed access to the content by default. The feature has both an Include and an Exclude list which are used to target the allowed audience.
	AuthGeo *[]CustconfAuthGeo `json:"authGeo,omitempty"`
	AuthHttpBasic *CustconfAuthHttpBasic `json:"authHttpBasic,omitempty"`
	AuthReferer *CustconfAuthReferer `json:"authReferer,omitempty"`
	// URL Signing policies allow you to restrict access to your content by configuring a \"shared secret\" with StackPath. This \"shared secret\" is used to apply an MD5 hashing algorithm on the URL to validate the signature supplied on the request. Since the \"shared secret\" is only known by the publisher and StackPath, URL signatures cannot be generated by unauthorized users.
	AuthUrlSign *[]CustconfAuthUrlSign `json:"authUrlSign,omitempty"`
	AuthUrlSignAliCloudA *[]CustconfAuthUrlSignAliCloudA `json:"authUrlSignAliCloudA,omitempty"`
	AuthUrlSignAliCloudB *[]CustconfAuthUrlSignAliCloudB `json:"authUrlSignAliCloudB,omitempty"`
	AuthUrlSignAliCloudC *[]CustconfAuthUrlSignAliCloudC `json:"authUrlSignAliCloudC,omitempty"`
	AuthUrlSignHmacTlu *[]CustconfAuthUrlSignHmacTlu `json:"authUrlSignHmacTlu,omitempty"`
	AuthUrlSignIq *[]CustconfAuthUrlSignIq `json:"authUrlSignIq,omitempty"`
	AuthUrlAsymmetricSignTlu *[]CustconfAuthUrlAsymmetricSignTlu `json:"authUrlAsymmetricSignTlu,omitempty"`
	BandWidthLimit *CustconfBandWidthLimit `json:"bandWidthLimit,omitempty"`
	BandwidthRateLimit *CustconfBandwidthRateLimit `json:"bandwidthRateLimit,omitempty"`
	// Bypass content caching on filter match
	BypassCache *[]CustconfBypassCache `json:"bypassCache,omitempty"`
	// The browser caching policy allows you to control the browser caching behavior of your assets independently from the CDN cache. For example, this policy allows you to set lower or higher TTLs for the browser than those of the CDN cache.
	CacheControl *[]CustconfCacheControl `json:"cacheControl,omitempty"`
	CacheKeyModification *CustconfCacheKeyModification `json:"cacheKeyModification,omitempty"`
	ClientRequestModification *[]CustconfClientRequestModification `json:"clientRequestModification,omitempty"`
	ClientResponseModification *[]CustconfClientResponseModification `json:"clientResponseModification,omitempty"`
	Compression *CustconfCompression `json:"compression,omitempty"`
	ContentDispositionByURL *CustconfContentDispositionByURL `json:"contentDispositionByURL,omitempty"`
	// The content disposition by HTTP header match policy allows you to control the Content-Disposition delivered by the CDN using a pattern match against the value of any HTTP header present in the request. If you are using URL query string parameters to control the Content-Disposition header (using the Content Disposition by URL policy) then the Content-Disposition header generated by this policy will not be used on that specific request. A typical use case for this policy is to set a different Content-Disposition header based on the User-Agent in the request.
	ContentDispositionByHeader *[]CustconfContentDispositionByHeader `json:"contentDispositionByHeader,omitempty"`
	Customer *CustconfCustomer `json:"customer,omitempty"`
	CustomHeader *CustconfCustomHeader `json:"customHeader,omitempty"`
	// The custom mime type policy allows you to map file extensions to specific mime types for the CDN caching servers to use when delivering assets. The mime types you map using this policy may also be limited to specific response codes to address scenarios in which the mime type changes based on the response code.
	CustomMimeType *[]CustconfCustomMimeType `json:"customMimeType,omitempty"`
	// Client response based on Rules.
	DynamicCacheRule *[]CustconfDynamicCacheRule `json:"dynamicCacheRule,omitempty"`
	// The dynamic content caching policy allows you to specify a set of query string and/or HTTP header key/value pairs that should create a unique cache entry for a given URL. This policy is useful when your origin returns unique content for the same URL based on a set of query string parameters provided in the request.
	DynamicContent *[]CustconfDynamicContent `json:"dynamicContent,omitempty"`
	FailSafeOriginPull *CustconfFailSafeOriginPull `json:"failSafeOriginPull,omitempty"`
	FarAheadRangeProxy *CustconfFarAheadRangeProxy `json:"farAheadRangeProxy,omitempty"`
	FileSegmentation *CustconfFileSegmentation `json:"fileSegmentation,omitempty"`
	FlvPseudoStreaming *CustconfFlvPseudoStreaming `json:"flvPseudoStreaming,omitempty"`
	GzipOriginPull *CustconfGzipOriginPull `json:"gzipOriginPull,omitempty"`
	HttpMethods *CustconfHttpMethods `json:"httpMethods,omitempty"`
	Origin *[]CdncustconfOrigin `json:"origin,omitempty"`
	OriginPersistentConnections *CustconfOriginPersistentConnections `json:"originPersistentConnections,omitempty"`
	OriginPull *CustconfOriginPull `json:"originPull,omitempty"`
	OriginPullCacheExtension *CustconfOriginPullCacheExtension `json:"originPullCacheExtension,omitempty"`
	OriginPullHost *[]CustconfOriginPullHost `json:"originPullHost,omitempty"`
	OriginPullProtocol *CustconfOriginPullProtocol `json:"originPullProtocol,omitempty"`
	OriginPullLogs *CustconfOriginPullLogs `json:"originPullLogs,omitempty"`
	OriginPullLogsConfig *CustconfOriginPullLogsConfig `json:"originPullLogsConfig,omitempty"`
	// The CDN caching policy allows you to control how your origin's content is cached on the CDN.
	OriginPullPolicy *[]CustconfOriginPullPolicy `json:"originPullPolicy,omitempty"`
	OriginRequestModification *[]CustconfOriginRequestModification `json:"originRequestModification,omitempty"`
	OriginResponseModification *[]CustconfOriginResponseModification `json:"originResponseModification,omitempty"`
	QueryStrParam *CustconfQueryStrParam `json:"queryStrParam,omitempty"`
	ReceiptLogsConfig *CustconfReceiptLogsConfig `json:"receiptLogsConfig,omitempty"`
	RedirectExceptions *CustconfRedirectExceptions `json:"redirectExceptions,omitempty"`
	// The response code redirection policy allows you to map cache response codes to an HTTP redirect response. When this policy is applied to a host, the caching servers will redirect clients to the URL specified in this policy instead of delivering the response code you mapped in the policy.
	RedirectMappings *[]CustconfRedirectMappings `json:"redirectMappings,omitempty"`
	ResponseHeader *CustconfResponseHeader `json:"responseHeader,omitempty"`
	// The CDN attempts to resume downloading Origin Pulls once it successfully reads all the headers of a positive response under certain conditions by sending subsequent origin range requests for the remaining body. The response must be a 2xx to a GET request for the full file or a single range (not multi-range). The response must contain the Last-Modified and ETag headers.
	OriginPullResumeDownload *[]CustconfOriginPullResumeDownload `json:"originPullResumeDownload,omitempty"`
	RobotsTxt *[]CustconfRobotsTxt `json:"robotsTxt,omitempty"`
	AwsSignedOriginPullV4 *[]CustconfAwsSignedOriginPullV4 `json:"awsSignedOriginPullV4,omitempty"`
	AwsSignedS3PostV4 *[]CustconfAwsSignedS3PostV4 `json:"awsSignedS3PostV4,omitempty"`
	// The static header injection policy allows you to insert headers into the CDN request and response processor.
	StaticHeader *[]CustconfStaticHeader `json:"staticHeader,omitempty"`
	TimePseudoStreaming *CustconfTimePseudoStreaming `json:"timePseudoStreaming,omitempty"`
	Http2Support *CustconfHttp2Support `json:"http2Support,omitempty"`
	// A hostname policy allows you to specify an alternate domain name that you want to use to access content from your CDN container.
	VHost *[]CustconfVHost `json:"vHost,omitempty"`
}

// NewCustconfConfiguration instantiates a new CustconfConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfConfiguration() *CustconfConfiguration {
	this := CustconfConfiguration{}
	return &this
}

// NewCustconfConfigurationWithDefaults instantiates a new CustconfConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfConfigurationWithDefaults() *CustconfConfiguration {
	this := CustconfConfiguration{}
	return &this
}

// GetAccessLogs returns the AccessLogs field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAccessLogs() CustconfAccessLogs {
	if o == nil || o.AccessLogs == nil {
		var ret CustconfAccessLogs
		return ret
	}
	return *o.AccessLogs
}

// GetAccessLogsOk returns a tuple with the AccessLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAccessLogsOk() (*CustconfAccessLogs, bool) {
	if o == nil || o.AccessLogs == nil {
		return nil, false
	}
	return o.AccessLogs, true
}

// HasAccessLogs returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAccessLogs() bool {
	if o != nil && o.AccessLogs != nil {
		return true
	}

	return false
}

// SetAccessLogs gets a reference to the given CustconfAccessLogs and assigns it to the AccessLogs field.
func (o *CustconfConfiguration) SetAccessLogs(v CustconfAccessLogs) {
	o.AccessLogs = &v
}

// GetAccessLogsConfig returns the AccessLogsConfig field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAccessLogsConfig() CustconfAccessLogsConfig {
	if o == nil || o.AccessLogsConfig == nil {
		var ret CustconfAccessLogsConfig
		return ret
	}
	return *o.AccessLogsConfig
}

// GetAccessLogsConfigOk returns a tuple with the AccessLogsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAccessLogsConfigOk() (*CustconfAccessLogsConfig, bool) {
	if o == nil || o.AccessLogsConfig == nil {
		return nil, false
	}
	return o.AccessLogsConfig, true
}

// HasAccessLogsConfig returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAccessLogsConfig() bool {
	if o != nil && o.AccessLogsConfig != nil {
		return true
	}

	return false
}

// SetAccessLogsConfig gets a reference to the given CustconfAccessLogsConfig and assigns it to the AccessLogsConfig field.
func (o *CustconfConfiguration) SetAccessLogsConfig(v CustconfAccessLogsConfig) {
	o.AccessLogsConfig = &v
}

// GetAuthACL returns the AuthACL field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthACL() []CustconfAuthACL {
	if o == nil || o.AuthACL == nil {
		var ret []CustconfAuthACL
		return ret
	}
	return *o.AuthACL
}

// GetAuthACLOk returns a tuple with the AuthACL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthACLOk() (*[]CustconfAuthACL, bool) {
	if o == nil || o.AuthACL == nil {
		return nil, false
	}
	return o.AuthACL, true
}

// HasAuthACL returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthACL() bool {
	if o != nil && o.AuthACL != nil {
		return true
	}

	return false
}

// SetAuthACL gets a reference to the given []CustconfAuthACL and assigns it to the AuthACL field.
func (o *CustconfConfiguration) SetAuthACL(v []CustconfAuthACL) {
	o.AuthACL = &v
}

// GetAuthGeo returns the AuthGeo field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthGeo() []CustconfAuthGeo {
	if o == nil || o.AuthGeo == nil {
		var ret []CustconfAuthGeo
		return ret
	}
	return *o.AuthGeo
}

// GetAuthGeoOk returns a tuple with the AuthGeo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthGeoOk() (*[]CustconfAuthGeo, bool) {
	if o == nil || o.AuthGeo == nil {
		return nil, false
	}
	return o.AuthGeo, true
}

// HasAuthGeo returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthGeo() bool {
	if o != nil && o.AuthGeo != nil {
		return true
	}

	return false
}

// SetAuthGeo gets a reference to the given []CustconfAuthGeo and assigns it to the AuthGeo field.
func (o *CustconfConfiguration) SetAuthGeo(v []CustconfAuthGeo) {
	o.AuthGeo = &v
}

// GetAuthHttpBasic returns the AuthHttpBasic field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthHttpBasic() CustconfAuthHttpBasic {
	if o == nil || o.AuthHttpBasic == nil {
		var ret CustconfAuthHttpBasic
		return ret
	}
	return *o.AuthHttpBasic
}

// GetAuthHttpBasicOk returns a tuple with the AuthHttpBasic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthHttpBasicOk() (*CustconfAuthHttpBasic, bool) {
	if o == nil || o.AuthHttpBasic == nil {
		return nil, false
	}
	return o.AuthHttpBasic, true
}

// HasAuthHttpBasic returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthHttpBasic() bool {
	if o != nil && o.AuthHttpBasic != nil {
		return true
	}

	return false
}

// SetAuthHttpBasic gets a reference to the given CustconfAuthHttpBasic and assigns it to the AuthHttpBasic field.
func (o *CustconfConfiguration) SetAuthHttpBasic(v CustconfAuthHttpBasic) {
	o.AuthHttpBasic = &v
}

// GetAuthReferer returns the AuthReferer field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthReferer() CustconfAuthReferer {
	if o == nil || o.AuthReferer == nil {
		var ret CustconfAuthReferer
		return ret
	}
	return *o.AuthReferer
}

// GetAuthRefererOk returns a tuple with the AuthReferer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthRefererOk() (*CustconfAuthReferer, bool) {
	if o == nil || o.AuthReferer == nil {
		return nil, false
	}
	return o.AuthReferer, true
}

// HasAuthReferer returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthReferer() bool {
	if o != nil && o.AuthReferer != nil {
		return true
	}

	return false
}

// SetAuthReferer gets a reference to the given CustconfAuthReferer and assigns it to the AuthReferer field.
func (o *CustconfConfiguration) SetAuthReferer(v CustconfAuthReferer) {
	o.AuthReferer = &v
}

// GetAuthUrlSign returns the AuthUrlSign field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthUrlSign() []CustconfAuthUrlSign {
	if o == nil || o.AuthUrlSign == nil {
		var ret []CustconfAuthUrlSign
		return ret
	}
	return *o.AuthUrlSign
}

// GetAuthUrlSignOk returns a tuple with the AuthUrlSign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthUrlSignOk() (*[]CustconfAuthUrlSign, bool) {
	if o == nil || o.AuthUrlSign == nil {
		return nil, false
	}
	return o.AuthUrlSign, true
}

// HasAuthUrlSign returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthUrlSign() bool {
	if o != nil && o.AuthUrlSign != nil {
		return true
	}

	return false
}

// SetAuthUrlSign gets a reference to the given []CustconfAuthUrlSign and assigns it to the AuthUrlSign field.
func (o *CustconfConfiguration) SetAuthUrlSign(v []CustconfAuthUrlSign) {
	o.AuthUrlSign = &v
}

// GetAuthUrlSignAliCloudA returns the AuthUrlSignAliCloudA field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthUrlSignAliCloudA() []CustconfAuthUrlSignAliCloudA {
	if o == nil || o.AuthUrlSignAliCloudA == nil {
		var ret []CustconfAuthUrlSignAliCloudA
		return ret
	}
	return *o.AuthUrlSignAliCloudA
}

// GetAuthUrlSignAliCloudAOk returns a tuple with the AuthUrlSignAliCloudA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthUrlSignAliCloudAOk() (*[]CustconfAuthUrlSignAliCloudA, bool) {
	if o == nil || o.AuthUrlSignAliCloudA == nil {
		return nil, false
	}
	return o.AuthUrlSignAliCloudA, true
}

// HasAuthUrlSignAliCloudA returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthUrlSignAliCloudA() bool {
	if o != nil && o.AuthUrlSignAliCloudA != nil {
		return true
	}

	return false
}

// SetAuthUrlSignAliCloudA gets a reference to the given []CustconfAuthUrlSignAliCloudA and assigns it to the AuthUrlSignAliCloudA field.
func (o *CustconfConfiguration) SetAuthUrlSignAliCloudA(v []CustconfAuthUrlSignAliCloudA) {
	o.AuthUrlSignAliCloudA = &v
}

// GetAuthUrlSignAliCloudB returns the AuthUrlSignAliCloudB field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthUrlSignAliCloudB() []CustconfAuthUrlSignAliCloudB {
	if o == nil || o.AuthUrlSignAliCloudB == nil {
		var ret []CustconfAuthUrlSignAliCloudB
		return ret
	}
	return *o.AuthUrlSignAliCloudB
}

// GetAuthUrlSignAliCloudBOk returns a tuple with the AuthUrlSignAliCloudB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthUrlSignAliCloudBOk() (*[]CustconfAuthUrlSignAliCloudB, bool) {
	if o == nil || o.AuthUrlSignAliCloudB == nil {
		return nil, false
	}
	return o.AuthUrlSignAliCloudB, true
}

// HasAuthUrlSignAliCloudB returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthUrlSignAliCloudB() bool {
	if o != nil && o.AuthUrlSignAliCloudB != nil {
		return true
	}

	return false
}

// SetAuthUrlSignAliCloudB gets a reference to the given []CustconfAuthUrlSignAliCloudB and assigns it to the AuthUrlSignAliCloudB field.
func (o *CustconfConfiguration) SetAuthUrlSignAliCloudB(v []CustconfAuthUrlSignAliCloudB) {
	o.AuthUrlSignAliCloudB = &v
}

// GetAuthUrlSignAliCloudC returns the AuthUrlSignAliCloudC field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthUrlSignAliCloudC() []CustconfAuthUrlSignAliCloudC {
	if o == nil || o.AuthUrlSignAliCloudC == nil {
		var ret []CustconfAuthUrlSignAliCloudC
		return ret
	}
	return *o.AuthUrlSignAliCloudC
}

// GetAuthUrlSignAliCloudCOk returns a tuple with the AuthUrlSignAliCloudC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthUrlSignAliCloudCOk() (*[]CustconfAuthUrlSignAliCloudC, bool) {
	if o == nil || o.AuthUrlSignAliCloudC == nil {
		return nil, false
	}
	return o.AuthUrlSignAliCloudC, true
}

// HasAuthUrlSignAliCloudC returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthUrlSignAliCloudC() bool {
	if o != nil && o.AuthUrlSignAliCloudC != nil {
		return true
	}

	return false
}

// SetAuthUrlSignAliCloudC gets a reference to the given []CustconfAuthUrlSignAliCloudC and assigns it to the AuthUrlSignAliCloudC field.
func (o *CustconfConfiguration) SetAuthUrlSignAliCloudC(v []CustconfAuthUrlSignAliCloudC) {
	o.AuthUrlSignAliCloudC = &v
}

// GetAuthUrlSignHmacTlu returns the AuthUrlSignHmacTlu field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthUrlSignHmacTlu() []CustconfAuthUrlSignHmacTlu {
	if o == nil || o.AuthUrlSignHmacTlu == nil {
		var ret []CustconfAuthUrlSignHmacTlu
		return ret
	}
	return *o.AuthUrlSignHmacTlu
}

// GetAuthUrlSignHmacTluOk returns a tuple with the AuthUrlSignHmacTlu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthUrlSignHmacTluOk() (*[]CustconfAuthUrlSignHmacTlu, bool) {
	if o == nil || o.AuthUrlSignHmacTlu == nil {
		return nil, false
	}
	return o.AuthUrlSignHmacTlu, true
}

// HasAuthUrlSignHmacTlu returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthUrlSignHmacTlu() bool {
	if o != nil && o.AuthUrlSignHmacTlu != nil {
		return true
	}

	return false
}

// SetAuthUrlSignHmacTlu gets a reference to the given []CustconfAuthUrlSignHmacTlu and assigns it to the AuthUrlSignHmacTlu field.
func (o *CustconfConfiguration) SetAuthUrlSignHmacTlu(v []CustconfAuthUrlSignHmacTlu) {
	o.AuthUrlSignHmacTlu = &v
}

// GetAuthUrlSignIq returns the AuthUrlSignIq field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthUrlSignIq() []CustconfAuthUrlSignIq {
	if o == nil || o.AuthUrlSignIq == nil {
		var ret []CustconfAuthUrlSignIq
		return ret
	}
	return *o.AuthUrlSignIq
}

// GetAuthUrlSignIqOk returns a tuple with the AuthUrlSignIq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthUrlSignIqOk() (*[]CustconfAuthUrlSignIq, bool) {
	if o == nil || o.AuthUrlSignIq == nil {
		return nil, false
	}
	return o.AuthUrlSignIq, true
}

// HasAuthUrlSignIq returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthUrlSignIq() bool {
	if o != nil && o.AuthUrlSignIq != nil {
		return true
	}

	return false
}

// SetAuthUrlSignIq gets a reference to the given []CustconfAuthUrlSignIq and assigns it to the AuthUrlSignIq field.
func (o *CustconfConfiguration) SetAuthUrlSignIq(v []CustconfAuthUrlSignIq) {
	o.AuthUrlSignIq = &v
}

// GetAuthUrlAsymmetricSignTlu returns the AuthUrlAsymmetricSignTlu field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAuthUrlAsymmetricSignTlu() []CustconfAuthUrlAsymmetricSignTlu {
	if o == nil || o.AuthUrlAsymmetricSignTlu == nil {
		var ret []CustconfAuthUrlAsymmetricSignTlu
		return ret
	}
	return *o.AuthUrlAsymmetricSignTlu
}

// GetAuthUrlAsymmetricSignTluOk returns a tuple with the AuthUrlAsymmetricSignTlu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAuthUrlAsymmetricSignTluOk() (*[]CustconfAuthUrlAsymmetricSignTlu, bool) {
	if o == nil || o.AuthUrlAsymmetricSignTlu == nil {
		return nil, false
	}
	return o.AuthUrlAsymmetricSignTlu, true
}

// HasAuthUrlAsymmetricSignTlu returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAuthUrlAsymmetricSignTlu() bool {
	if o != nil && o.AuthUrlAsymmetricSignTlu != nil {
		return true
	}

	return false
}

// SetAuthUrlAsymmetricSignTlu gets a reference to the given []CustconfAuthUrlAsymmetricSignTlu and assigns it to the AuthUrlAsymmetricSignTlu field.
func (o *CustconfConfiguration) SetAuthUrlAsymmetricSignTlu(v []CustconfAuthUrlAsymmetricSignTlu) {
	o.AuthUrlAsymmetricSignTlu = &v
}

// GetBandWidthLimit returns the BandWidthLimit field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetBandWidthLimit() CustconfBandWidthLimit {
	if o == nil || o.BandWidthLimit == nil {
		var ret CustconfBandWidthLimit
		return ret
	}
	return *o.BandWidthLimit
}

// GetBandWidthLimitOk returns a tuple with the BandWidthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetBandWidthLimitOk() (*CustconfBandWidthLimit, bool) {
	if o == nil || o.BandWidthLimit == nil {
		return nil, false
	}
	return o.BandWidthLimit, true
}

// HasBandWidthLimit returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasBandWidthLimit() bool {
	if o != nil && o.BandWidthLimit != nil {
		return true
	}

	return false
}

// SetBandWidthLimit gets a reference to the given CustconfBandWidthLimit and assigns it to the BandWidthLimit field.
func (o *CustconfConfiguration) SetBandWidthLimit(v CustconfBandWidthLimit) {
	o.BandWidthLimit = &v
}

// GetBandwidthRateLimit returns the BandwidthRateLimit field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetBandwidthRateLimit() CustconfBandwidthRateLimit {
	if o == nil || o.BandwidthRateLimit == nil {
		var ret CustconfBandwidthRateLimit
		return ret
	}
	return *o.BandwidthRateLimit
}

// GetBandwidthRateLimitOk returns a tuple with the BandwidthRateLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetBandwidthRateLimitOk() (*CustconfBandwidthRateLimit, bool) {
	if o == nil || o.BandwidthRateLimit == nil {
		return nil, false
	}
	return o.BandwidthRateLimit, true
}

// HasBandwidthRateLimit returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasBandwidthRateLimit() bool {
	if o != nil && o.BandwidthRateLimit != nil {
		return true
	}

	return false
}

// SetBandwidthRateLimit gets a reference to the given CustconfBandwidthRateLimit and assigns it to the BandwidthRateLimit field.
func (o *CustconfConfiguration) SetBandwidthRateLimit(v CustconfBandwidthRateLimit) {
	o.BandwidthRateLimit = &v
}

// GetBypassCache returns the BypassCache field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetBypassCache() []CustconfBypassCache {
	if o == nil || o.BypassCache == nil {
		var ret []CustconfBypassCache
		return ret
	}
	return *o.BypassCache
}

// GetBypassCacheOk returns a tuple with the BypassCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetBypassCacheOk() (*[]CustconfBypassCache, bool) {
	if o == nil || o.BypassCache == nil {
		return nil, false
	}
	return o.BypassCache, true
}

// HasBypassCache returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasBypassCache() bool {
	if o != nil && o.BypassCache != nil {
		return true
	}

	return false
}

// SetBypassCache gets a reference to the given []CustconfBypassCache and assigns it to the BypassCache field.
func (o *CustconfConfiguration) SetBypassCache(v []CustconfBypassCache) {
	o.BypassCache = &v
}

// GetCacheControl returns the CacheControl field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetCacheControl() []CustconfCacheControl {
	if o == nil || o.CacheControl == nil {
		var ret []CustconfCacheControl
		return ret
	}
	return *o.CacheControl
}

// GetCacheControlOk returns a tuple with the CacheControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetCacheControlOk() (*[]CustconfCacheControl, bool) {
	if o == nil || o.CacheControl == nil {
		return nil, false
	}
	return o.CacheControl, true
}

// HasCacheControl returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasCacheControl() bool {
	if o != nil && o.CacheControl != nil {
		return true
	}

	return false
}

// SetCacheControl gets a reference to the given []CustconfCacheControl and assigns it to the CacheControl field.
func (o *CustconfConfiguration) SetCacheControl(v []CustconfCacheControl) {
	o.CacheControl = &v
}

// GetCacheKeyModification returns the CacheKeyModification field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetCacheKeyModification() CustconfCacheKeyModification {
	if o == nil || o.CacheKeyModification == nil {
		var ret CustconfCacheKeyModification
		return ret
	}
	return *o.CacheKeyModification
}

// GetCacheKeyModificationOk returns a tuple with the CacheKeyModification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetCacheKeyModificationOk() (*CustconfCacheKeyModification, bool) {
	if o == nil || o.CacheKeyModification == nil {
		return nil, false
	}
	return o.CacheKeyModification, true
}

// HasCacheKeyModification returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasCacheKeyModification() bool {
	if o != nil && o.CacheKeyModification != nil {
		return true
	}

	return false
}

// SetCacheKeyModification gets a reference to the given CustconfCacheKeyModification and assigns it to the CacheKeyModification field.
func (o *CustconfConfiguration) SetCacheKeyModification(v CustconfCacheKeyModification) {
	o.CacheKeyModification = &v
}

// GetClientRequestModification returns the ClientRequestModification field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetClientRequestModification() []CustconfClientRequestModification {
	if o == nil || o.ClientRequestModification == nil {
		var ret []CustconfClientRequestModification
		return ret
	}
	return *o.ClientRequestModification
}

// GetClientRequestModificationOk returns a tuple with the ClientRequestModification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetClientRequestModificationOk() (*[]CustconfClientRequestModification, bool) {
	if o == nil || o.ClientRequestModification == nil {
		return nil, false
	}
	return o.ClientRequestModification, true
}

// HasClientRequestModification returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasClientRequestModification() bool {
	if o != nil && o.ClientRequestModification != nil {
		return true
	}

	return false
}

// SetClientRequestModification gets a reference to the given []CustconfClientRequestModification and assigns it to the ClientRequestModification field.
func (o *CustconfConfiguration) SetClientRequestModification(v []CustconfClientRequestModification) {
	o.ClientRequestModification = &v
}

// GetClientResponseModification returns the ClientResponseModification field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetClientResponseModification() []CustconfClientResponseModification {
	if o == nil || o.ClientResponseModification == nil {
		var ret []CustconfClientResponseModification
		return ret
	}
	return *o.ClientResponseModification
}

// GetClientResponseModificationOk returns a tuple with the ClientResponseModification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetClientResponseModificationOk() (*[]CustconfClientResponseModification, bool) {
	if o == nil || o.ClientResponseModification == nil {
		return nil, false
	}
	return o.ClientResponseModification, true
}

// HasClientResponseModification returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasClientResponseModification() bool {
	if o != nil && o.ClientResponseModification != nil {
		return true
	}

	return false
}

// SetClientResponseModification gets a reference to the given []CustconfClientResponseModification and assigns it to the ClientResponseModification field.
func (o *CustconfConfiguration) SetClientResponseModification(v []CustconfClientResponseModification) {
	o.ClientResponseModification = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetCompression() CustconfCompression {
	if o == nil || o.Compression == nil {
		var ret CustconfCompression
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetCompressionOk() (*CustconfCompression, bool) {
	if o == nil || o.Compression == nil {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasCompression() bool {
	if o != nil && o.Compression != nil {
		return true
	}

	return false
}

// SetCompression gets a reference to the given CustconfCompression and assigns it to the Compression field.
func (o *CustconfConfiguration) SetCompression(v CustconfCompression) {
	o.Compression = &v
}

// GetContentDispositionByURL returns the ContentDispositionByURL field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetContentDispositionByURL() CustconfContentDispositionByURL {
	if o == nil || o.ContentDispositionByURL == nil {
		var ret CustconfContentDispositionByURL
		return ret
	}
	return *o.ContentDispositionByURL
}

// GetContentDispositionByURLOk returns a tuple with the ContentDispositionByURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetContentDispositionByURLOk() (*CustconfContentDispositionByURL, bool) {
	if o == nil || o.ContentDispositionByURL == nil {
		return nil, false
	}
	return o.ContentDispositionByURL, true
}

// HasContentDispositionByURL returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasContentDispositionByURL() bool {
	if o != nil && o.ContentDispositionByURL != nil {
		return true
	}

	return false
}

// SetContentDispositionByURL gets a reference to the given CustconfContentDispositionByURL and assigns it to the ContentDispositionByURL field.
func (o *CustconfConfiguration) SetContentDispositionByURL(v CustconfContentDispositionByURL) {
	o.ContentDispositionByURL = &v
}

// GetContentDispositionByHeader returns the ContentDispositionByHeader field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetContentDispositionByHeader() []CustconfContentDispositionByHeader {
	if o == nil || o.ContentDispositionByHeader == nil {
		var ret []CustconfContentDispositionByHeader
		return ret
	}
	return *o.ContentDispositionByHeader
}

// GetContentDispositionByHeaderOk returns a tuple with the ContentDispositionByHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetContentDispositionByHeaderOk() (*[]CustconfContentDispositionByHeader, bool) {
	if o == nil || o.ContentDispositionByHeader == nil {
		return nil, false
	}
	return o.ContentDispositionByHeader, true
}

// HasContentDispositionByHeader returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasContentDispositionByHeader() bool {
	if o != nil && o.ContentDispositionByHeader != nil {
		return true
	}

	return false
}

// SetContentDispositionByHeader gets a reference to the given []CustconfContentDispositionByHeader and assigns it to the ContentDispositionByHeader field.
func (o *CustconfConfiguration) SetContentDispositionByHeader(v []CustconfContentDispositionByHeader) {
	o.ContentDispositionByHeader = &v
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetCustomer() CustconfCustomer {
	if o == nil || o.Customer == nil {
		var ret CustconfCustomer
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetCustomerOk() (*CustconfCustomer, bool) {
	if o == nil || o.Customer == nil {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasCustomer() bool {
	if o != nil && o.Customer != nil {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given CustconfCustomer and assigns it to the Customer field.
func (o *CustconfConfiguration) SetCustomer(v CustconfCustomer) {
	o.Customer = &v
}

// GetCustomHeader returns the CustomHeader field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetCustomHeader() CustconfCustomHeader {
	if o == nil || o.CustomHeader == nil {
		var ret CustconfCustomHeader
		return ret
	}
	return *o.CustomHeader
}

// GetCustomHeaderOk returns a tuple with the CustomHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetCustomHeaderOk() (*CustconfCustomHeader, bool) {
	if o == nil || o.CustomHeader == nil {
		return nil, false
	}
	return o.CustomHeader, true
}

// HasCustomHeader returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasCustomHeader() bool {
	if o != nil && o.CustomHeader != nil {
		return true
	}

	return false
}

// SetCustomHeader gets a reference to the given CustconfCustomHeader and assigns it to the CustomHeader field.
func (o *CustconfConfiguration) SetCustomHeader(v CustconfCustomHeader) {
	o.CustomHeader = &v
}

// GetCustomMimeType returns the CustomMimeType field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetCustomMimeType() []CustconfCustomMimeType {
	if o == nil || o.CustomMimeType == nil {
		var ret []CustconfCustomMimeType
		return ret
	}
	return *o.CustomMimeType
}

// GetCustomMimeTypeOk returns a tuple with the CustomMimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetCustomMimeTypeOk() (*[]CustconfCustomMimeType, bool) {
	if o == nil || o.CustomMimeType == nil {
		return nil, false
	}
	return o.CustomMimeType, true
}

// HasCustomMimeType returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasCustomMimeType() bool {
	if o != nil && o.CustomMimeType != nil {
		return true
	}

	return false
}

// SetCustomMimeType gets a reference to the given []CustconfCustomMimeType and assigns it to the CustomMimeType field.
func (o *CustconfConfiguration) SetCustomMimeType(v []CustconfCustomMimeType) {
	o.CustomMimeType = &v
}

// GetDynamicCacheRule returns the DynamicCacheRule field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetDynamicCacheRule() []CustconfDynamicCacheRule {
	if o == nil || o.DynamicCacheRule == nil {
		var ret []CustconfDynamicCacheRule
		return ret
	}
	return *o.DynamicCacheRule
}

// GetDynamicCacheRuleOk returns a tuple with the DynamicCacheRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetDynamicCacheRuleOk() (*[]CustconfDynamicCacheRule, bool) {
	if o == nil || o.DynamicCacheRule == nil {
		return nil, false
	}
	return o.DynamicCacheRule, true
}

// HasDynamicCacheRule returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasDynamicCacheRule() bool {
	if o != nil && o.DynamicCacheRule != nil {
		return true
	}

	return false
}

// SetDynamicCacheRule gets a reference to the given []CustconfDynamicCacheRule and assigns it to the DynamicCacheRule field.
func (o *CustconfConfiguration) SetDynamicCacheRule(v []CustconfDynamicCacheRule) {
	o.DynamicCacheRule = &v
}

// GetDynamicContent returns the DynamicContent field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetDynamicContent() []CustconfDynamicContent {
	if o == nil || o.DynamicContent == nil {
		var ret []CustconfDynamicContent
		return ret
	}
	return *o.DynamicContent
}

// GetDynamicContentOk returns a tuple with the DynamicContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetDynamicContentOk() (*[]CustconfDynamicContent, bool) {
	if o == nil || o.DynamicContent == nil {
		return nil, false
	}
	return o.DynamicContent, true
}

// HasDynamicContent returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasDynamicContent() bool {
	if o != nil && o.DynamicContent != nil {
		return true
	}

	return false
}

// SetDynamicContent gets a reference to the given []CustconfDynamicContent and assigns it to the DynamicContent field.
func (o *CustconfConfiguration) SetDynamicContent(v []CustconfDynamicContent) {
	o.DynamicContent = &v
}

// GetFailSafeOriginPull returns the FailSafeOriginPull field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetFailSafeOriginPull() CustconfFailSafeOriginPull {
	if o == nil || o.FailSafeOriginPull == nil {
		var ret CustconfFailSafeOriginPull
		return ret
	}
	return *o.FailSafeOriginPull
}

// GetFailSafeOriginPullOk returns a tuple with the FailSafeOriginPull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetFailSafeOriginPullOk() (*CustconfFailSafeOriginPull, bool) {
	if o == nil || o.FailSafeOriginPull == nil {
		return nil, false
	}
	return o.FailSafeOriginPull, true
}

// HasFailSafeOriginPull returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasFailSafeOriginPull() bool {
	if o != nil && o.FailSafeOriginPull != nil {
		return true
	}

	return false
}

// SetFailSafeOriginPull gets a reference to the given CustconfFailSafeOriginPull and assigns it to the FailSafeOriginPull field.
func (o *CustconfConfiguration) SetFailSafeOriginPull(v CustconfFailSafeOriginPull) {
	o.FailSafeOriginPull = &v
}

// GetFarAheadRangeProxy returns the FarAheadRangeProxy field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetFarAheadRangeProxy() CustconfFarAheadRangeProxy {
	if o == nil || o.FarAheadRangeProxy == nil {
		var ret CustconfFarAheadRangeProxy
		return ret
	}
	return *o.FarAheadRangeProxy
}

// GetFarAheadRangeProxyOk returns a tuple with the FarAheadRangeProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetFarAheadRangeProxyOk() (*CustconfFarAheadRangeProxy, bool) {
	if o == nil || o.FarAheadRangeProxy == nil {
		return nil, false
	}
	return o.FarAheadRangeProxy, true
}

// HasFarAheadRangeProxy returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasFarAheadRangeProxy() bool {
	if o != nil && o.FarAheadRangeProxy != nil {
		return true
	}

	return false
}

// SetFarAheadRangeProxy gets a reference to the given CustconfFarAheadRangeProxy and assigns it to the FarAheadRangeProxy field.
func (o *CustconfConfiguration) SetFarAheadRangeProxy(v CustconfFarAheadRangeProxy) {
	o.FarAheadRangeProxy = &v
}

// GetFileSegmentation returns the FileSegmentation field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetFileSegmentation() CustconfFileSegmentation {
	if o == nil || o.FileSegmentation == nil {
		var ret CustconfFileSegmentation
		return ret
	}
	return *o.FileSegmentation
}

// GetFileSegmentationOk returns a tuple with the FileSegmentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetFileSegmentationOk() (*CustconfFileSegmentation, bool) {
	if o == nil || o.FileSegmentation == nil {
		return nil, false
	}
	return o.FileSegmentation, true
}

// HasFileSegmentation returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasFileSegmentation() bool {
	if o != nil && o.FileSegmentation != nil {
		return true
	}

	return false
}

// SetFileSegmentation gets a reference to the given CustconfFileSegmentation and assigns it to the FileSegmentation field.
func (o *CustconfConfiguration) SetFileSegmentation(v CustconfFileSegmentation) {
	o.FileSegmentation = &v
}

// GetFlvPseudoStreaming returns the FlvPseudoStreaming field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetFlvPseudoStreaming() CustconfFlvPseudoStreaming {
	if o == nil || o.FlvPseudoStreaming == nil {
		var ret CustconfFlvPseudoStreaming
		return ret
	}
	return *o.FlvPseudoStreaming
}

// GetFlvPseudoStreamingOk returns a tuple with the FlvPseudoStreaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetFlvPseudoStreamingOk() (*CustconfFlvPseudoStreaming, bool) {
	if o == nil || o.FlvPseudoStreaming == nil {
		return nil, false
	}
	return o.FlvPseudoStreaming, true
}

// HasFlvPseudoStreaming returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasFlvPseudoStreaming() bool {
	if o != nil && o.FlvPseudoStreaming != nil {
		return true
	}

	return false
}

// SetFlvPseudoStreaming gets a reference to the given CustconfFlvPseudoStreaming and assigns it to the FlvPseudoStreaming field.
func (o *CustconfConfiguration) SetFlvPseudoStreaming(v CustconfFlvPseudoStreaming) {
	o.FlvPseudoStreaming = &v
}

// GetGzipOriginPull returns the GzipOriginPull field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetGzipOriginPull() CustconfGzipOriginPull {
	if o == nil || o.GzipOriginPull == nil {
		var ret CustconfGzipOriginPull
		return ret
	}
	return *o.GzipOriginPull
}

// GetGzipOriginPullOk returns a tuple with the GzipOriginPull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetGzipOriginPullOk() (*CustconfGzipOriginPull, bool) {
	if o == nil || o.GzipOriginPull == nil {
		return nil, false
	}
	return o.GzipOriginPull, true
}

// HasGzipOriginPull returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasGzipOriginPull() bool {
	if o != nil && o.GzipOriginPull != nil {
		return true
	}

	return false
}

// SetGzipOriginPull gets a reference to the given CustconfGzipOriginPull and assigns it to the GzipOriginPull field.
func (o *CustconfConfiguration) SetGzipOriginPull(v CustconfGzipOriginPull) {
	o.GzipOriginPull = &v
}

// GetHttpMethods returns the HttpMethods field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetHttpMethods() CustconfHttpMethods {
	if o == nil || o.HttpMethods == nil {
		var ret CustconfHttpMethods
		return ret
	}
	return *o.HttpMethods
}

// GetHttpMethodsOk returns a tuple with the HttpMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetHttpMethodsOk() (*CustconfHttpMethods, bool) {
	if o == nil || o.HttpMethods == nil {
		return nil, false
	}
	return o.HttpMethods, true
}

// HasHttpMethods returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasHttpMethods() bool {
	if o != nil && o.HttpMethods != nil {
		return true
	}

	return false
}

// SetHttpMethods gets a reference to the given CustconfHttpMethods and assigns it to the HttpMethods field.
func (o *CustconfConfiguration) SetHttpMethods(v CustconfHttpMethods) {
	o.HttpMethods = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOrigin() []CdncustconfOrigin {
	if o == nil || o.Origin == nil {
		var ret []CdncustconfOrigin
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginOk() (*[]CdncustconfOrigin, bool) {
	if o == nil || o.Origin == nil {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOrigin() bool {
	if o != nil && o.Origin != nil {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given []CdncustconfOrigin and assigns it to the Origin field.
func (o *CustconfConfiguration) SetOrigin(v []CdncustconfOrigin) {
	o.Origin = &v
}

// GetOriginPersistentConnections returns the OriginPersistentConnections field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginPersistentConnections() CustconfOriginPersistentConnections {
	if o == nil || o.OriginPersistentConnections == nil {
		var ret CustconfOriginPersistentConnections
		return ret
	}
	return *o.OriginPersistentConnections
}

// GetOriginPersistentConnectionsOk returns a tuple with the OriginPersistentConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginPersistentConnectionsOk() (*CustconfOriginPersistentConnections, bool) {
	if o == nil || o.OriginPersistentConnections == nil {
		return nil, false
	}
	return o.OriginPersistentConnections, true
}

// HasOriginPersistentConnections returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginPersistentConnections() bool {
	if o != nil && o.OriginPersistentConnections != nil {
		return true
	}

	return false
}

// SetOriginPersistentConnections gets a reference to the given CustconfOriginPersistentConnections and assigns it to the OriginPersistentConnections field.
func (o *CustconfConfiguration) SetOriginPersistentConnections(v CustconfOriginPersistentConnections) {
	o.OriginPersistentConnections = &v
}

// GetOriginPull returns the OriginPull field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginPull() CustconfOriginPull {
	if o == nil || o.OriginPull == nil {
		var ret CustconfOriginPull
		return ret
	}
	return *o.OriginPull
}

// GetOriginPullOk returns a tuple with the OriginPull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginPullOk() (*CustconfOriginPull, bool) {
	if o == nil || o.OriginPull == nil {
		return nil, false
	}
	return o.OriginPull, true
}

// HasOriginPull returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginPull() bool {
	if o != nil && o.OriginPull != nil {
		return true
	}

	return false
}

// SetOriginPull gets a reference to the given CustconfOriginPull and assigns it to the OriginPull field.
func (o *CustconfConfiguration) SetOriginPull(v CustconfOriginPull) {
	o.OriginPull = &v
}

// GetOriginPullCacheExtension returns the OriginPullCacheExtension field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginPullCacheExtension() CustconfOriginPullCacheExtension {
	if o == nil || o.OriginPullCacheExtension == nil {
		var ret CustconfOriginPullCacheExtension
		return ret
	}
	return *o.OriginPullCacheExtension
}

// GetOriginPullCacheExtensionOk returns a tuple with the OriginPullCacheExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginPullCacheExtensionOk() (*CustconfOriginPullCacheExtension, bool) {
	if o == nil || o.OriginPullCacheExtension == nil {
		return nil, false
	}
	return o.OriginPullCacheExtension, true
}

// HasOriginPullCacheExtension returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginPullCacheExtension() bool {
	if o != nil && o.OriginPullCacheExtension != nil {
		return true
	}

	return false
}

// SetOriginPullCacheExtension gets a reference to the given CustconfOriginPullCacheExtension and assigns it to the OriginPullCacheExtension field.
func (o *CustconfConfiguration) SetOriginPullCacheExtension(v CustconfOriginPullCacheExtension) {
	o.OriginPullCacheExtension = &v
}

// GetOriginPullHost returns the OriginPullHost field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginPullHost() []CustconfOriginPullHost {
	if o == nil || o.OriginPullHost == nil {
		var ret []CustconfOriginPullHost
		return ret
	}
	return *o.OriginPullHost
}

// GetOriginPullHostOk returns a tuple with the OriginPullHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginPullHostOk() (*[]CustconfOriginPullHost, bool) {
	if o == nil || o.OriginPullHost == nil {
		return nil, false
	}
	return o.OriginPullHost, true
}

// HasOriginPullHost returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginPullHost() bool {
	if o != nil && o.OriginPullHost != nil {
		return true
	}

	return false
}

// SetOriginPullHost gets a reference to the given []CustconfOriginPullHost and assigns it to the OriginPullHost field.
func (o *CustconfConfiguration) SetOriginPullHost(v []CustconfOriginPullHost) {
	o.OriginPullHost = &v
}

// GetOriginPullProtocol returns the OriginPullProtocol field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginPullProtocol() CustconfOriginPullProtocol {
	if o == nil || o.OriginPullProtocol == nil {
		var ret CustconfOriginPullProtocol
		return ret
	}
	return *o.OriginPullProtocol
}

// GetOriginPullProtocolOk returns a tuple with the OriginPullProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginPullProtocolOk() (*CustconfOriginPullProtocol, bool) {
	if o == nil || o.OriginPullProtocol == nil {
		return nil, false
	}
	return o.OriginPullProtocol, true
}

// HasOriginPullProtocol returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginPullProtocol() bool {
	if o != nil && o.OriginPullProtocol != nil {
		return true
	}

	return false
}

// SetOriginPullProtocol gets a reference to the given CustconfOriginPullProtocol and assigns it to the OriginPullProtocol field.
func (o *CustconfConfiguration) SetOriginPullProtocol(v CustconfOriginPullProtocol) {
	o.OriginPullProtocol = &v
}

// GetOriginPullLogs returns the OriginPullLogs field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginPullLogs() CustconfOriginPullLogs {
	if o == nil || o.OriginPullLogs == nil {
		var ret CustconfOriginPullLogs
		return ret
	}
	return *o.OriginPullLogs
}

// GetOriginPullLogsOk returns a tuple with the OriginPullLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginPullLogsOk() (*CustconfOriginPullLogs, bool) {
	if o == nil || o.OriginPullLogs == nil {
		return nil, false
	}
	return o.OriginPullLogs, true
}

// HasOriginPullLogs returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginPullLogs() bool {
	if o != nil && o.OriginPullLogs != nil {
		return true
	}

	return false
}

// SetOriginPullLogs gets a reference to the given CustconfOriginPullLogs and assigns it to the OriginPullLogs field.
func (o *CustconfConfiguration) SetOriginPullLogs(v CustconfOriginPullLogs) {
	o.OriginPullLogs = &v
}

// GetOriginPullLogsConfig returns the OriginPullLogsConfig field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginPullLogsConfig() CustconfOriginPullLogsConfig {
	if o == nil || o.OriginPullLogsConfig == nil {
		var ret CustconfOriginPullLogsConfig
		return ret
	}
	return *o.OriginPullLogsConfig
}

// GetOriginPullLogsConfigOk returns a tuple with the OriginPullLogsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginPullLogsConfigOk() (*CustconfOriginPullLogsConfig, bool) {
	if o == nil || o.OriginPullLogsConfig == nil {
		return nil, false
	}
	return o.OriginPullLogsConfig, true
}

// HasOriginPullLogsConfig returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginPullLogsConfig() bool {
	if o != nil && o.OriginPullLogsConfig != nil {
		return true
	}

	return false
}

// SetOriginPullLogsConfig gets a reference to the given CustconfOriginPullLogsConfig and assigns it to the OriginPullLogsConfig field.
func (o *CustconfConfiguration) SetOriginPullLogsConfig(v CustconfOriginPullLogsConfig) {
	o.OriginPullLogsConfig = &v
}

// GetOriginPullPolicy returns the OriginPullPolicy field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginPullPolicy() []CustconfOriginPullPolicy {
	if o == nil || o.OriginPullPolicy == nil {
		var ret []CustconfOriginPullPolicy
		return ret
	}
	return *o.OriginPullPolicy
}

// GetOriginPullPolicyOk returns a tuple with the OriginPullPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginPullPolicyOk() (*[]CustconfOriginPullPolicy, bool) {
	if o == nil || o.OriginPullPolicy == nil {
		return nil, false
	}
	return o.OriginPullPolicy, true
}

// HasOriginPullPolicy returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginPullPolicy() bool {
	if o != nil && o.OriginPullPolicy != nil {
		return true
	}

	return false
}

// SetOriginPullPolicy gets a reference to the given []CustconfOriginPullPolicy and assigns it to the OriginPullPolicy field.
func (o *CustconfConfiguration) SetOriginPullPolicy(v []CustconfOriginPullPolicy) {
	o.OriginPullPolicy = &v
}

// GetOriginRequestModification returns the OriginRequestModification field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginRequestModification() []CustconfOriginRequestModification {
	if o == nil || o.OriginRequestModification == nil {
		var ret []CustconfOriginRequestModification
		return ret
	}
	return *o.OriginRequestModification
}

// GetOriginRequestModificationOk returns a tuple with the OriginRequestModification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginRequestModificationOk() (*[]CustconfOriginRequestModification, bool) {
	if o == nil || o.OriginRequestModification == nil {
		return nil, false
	}
	return o.OriginRequestModification, true
}

// HasOriginRequestModification returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginRequestModification() bool {
	if o != nil && o.OriginRequestModification != nil {
		return true
	}

	return false
}

// SetOriginRequestModification gets a reference to the given []CustconfOriginRequestModification and assigns it to the OriginRequestModification field.
func (o *CustconfConfiguration) SetOriginRequestModification(v []CustconfOriginRequestModification) {
	o.OriginRequestModification = &v
}

// GetOriginResponseModification returns the OriginResponseModification field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginResponseModification() []CustconfOriginResponseModification {
	if o == nil || o.OriginResponseModification == nil {
		var ret []CustconfOriginResponseModification
		return ret
	}
	return *o.OriginResponseModification
}

// GetOriginResponseModificationOk returns a tuple with the OriginResponseModification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginResponseModificationOk() (*[]CustconfOriginResponseModification, bool) {
	if o == nil || o.OriginResponseModification == nil {
		return nil, false
	}
	return o.OriginResponseModification, true
}

// HasOriginResponseModification returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginResponseModification() bool {
	if o != nil && o.OriginResponseModification != nil {
		return true
	}

	return false
}

// SetOriginResponseModification gets a reference to the given []CustconfOriginResponseModification and assigns it to the OriginResponseModification field.
func (o *CustconfConfiguration) SetOriginResponseModification(v []CustconfOriginResponseModification) {
	o.OriginResponseModification = &v
}

// GetQueryStrParam returns the QueryStrParam field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetQueryStrParam() CustconfQueryStrParam {
	if o == nil || o.QueryStrParam == nil {
		var ret CustconfQueryStrParam
		return ret
	}
	return *o.QueryStrParam
}

// GetQueryStrParamOk returns a tuple with the QueryStrParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetQueryStrParamOk() (*CustconfQueryStrParam, bool) {
	if o == nil || o.QueryStrParam == nil {
		return nil, false
	}
	return o.QueryStrParam, true
}

// HasQueryStrParam returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasQueryStrParam() bool {
	if o != nil && o.QueryStrParam != nil {
		return true
	}

	return false
}

// SetQueryStrParam gets a reference to the given CustconfQueryStrParam and assigns it to the QueryStrParam field.
func (o *CustconfConfiguration) SetQueryStrParam(v CustconfQueryStrParam) {
	o.QueryStrParam = &v
}

// GetReceiptLogsConfig returns the ReceiptLogsConfig field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetReceiptLogsConfig() CustconfReceiptLogsConfig {
	if o == nil || o.ReceiptLogsConfig == nil {
		var ret CustconfReceiptLogsConfig
		return ret
	}
	return *o.ReceiptLogsConfig
}

// GetReceiptLogsConfigOk returns a tuple with the ReceiptLogsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetReceiptLogsConfigOk() (*CustconfReceiptLogsConfig, bool) {
	if o == nil || o.ReceiptLogsConfig == nil {
		return nil, false
	}
	return o.ReceiptLogsConfig, true
}

// HasReceiptLogsConfig returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasReceiptLogsConfig() bool {
	if o != nil && o.ReceiptLogsConfig != nil {
		return true
	}

	return false
}

// SetReceiptLogsConfig gets a reference to the given CustconfReceiptLogsConfig and assigns it to the ReceiptLogsConfig field.
func (o *CustconfConfiguration) SetReceiptLogsConfig(v CustconfReceiptLogsConfig) {
	o.ReceiptLogsConfig = &v
}

// GetRedirectExceptions returns the RedirectExceptions field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetRedirectExceptions() CustconfRedirectExceptions {
	if o == nil || o.RedirectExceptions == nil {
		var ret CustconfRedirectExceptions
		return ret
	}
	return *o.RedirectExceptions
}

// GetRedirectExceptionsOk returns a tuple with the RedirectExceptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetRedirectExceptionsOk() (*CustconfRedirectExceptions, bool) {
	if o == nil || o.RedirectExceptions == nil {
		return nil, false
	}
	return o.RedirectExceptions, true
}

// HasRedirectExceptions returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasRedirectExceptions() bool {
	if o != nil && o.RedirectExceptions != nil {
		return true
	}

	return false
}

// SetRedirectExceptions gets a reference to the given CustconfRedirectExceptions and assigns it to the RedirectExceptions field.
func (o *CustconfConfiguration) SetRedirectExceptions(v CustconfRedirectExceptions) {
	o.RedirectExceptions = &v
}

// GetRedirectMappings returns the RedirectMappings field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetRedirectMappings() []CustconfRedirectMappings {
	if o == nil || o.RedirectMappings == nil {
		var ret []CustconfRedirectMappings
		return ret
	}
	return *o.RedirectMappings
}

// GetRedirectMappingsOk returns a tuple with the RedirectMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetRedirectMappingsOk() (*[]CustconfRedirectMappings, bool) {
	if o == nil || o.RedirectMappings == nil {
		return nil, false
	}
	return o.RedirectMappings, true
}

// HasRedirectMappings returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasRedirectMappings() bool {
	if o != nil && o.RedirectMappings != nil {
		return true
	}

	return false
}

// SetRedirectMappings gets a reference to the given []CustconfRedirectMappings and assigns it to the RedirectMappings field.
func (o *CustconfConfiguration) SetRedirectMappings(v []CustconfRedirectMappings) {
	o.RedirectMappings = &v
}

// GetResponseHeader returns the ResponseHeader field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetResponseHeader() CustconfResponseHeader {
	if o == nil || o.ResponseHeader == nil {
		var ret CustconfResponseHeader
		return ret
	}
	return *o.ResponseHeader
}

// GetResponseHeaderOk returns a tuple with the ResponseHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetResponseHeaderOk() (*CustconfResponseHeader, bool) {
	if o == nil || o.ResponseHeader == nil {
		return nil, false
	}
	return o.ResponseHeader, true
}

// HasResponseHeader returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasResponseHeader() bool {
	if o != nil && o.ResponseHeader != nil {
		return true
	}

	return false
}

// SetResponseHeader gets a reference to the given CustconfResponseHeader and assigns it to the ResponseHeader field.
func (o *CustconfConfiguration) SetResponseHeader(v CustconfResponseHeader) {
	o.ResponseHeader = &v
}

// GetOriginPullResumeDownload returns the OriginPullResumeDownload field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetOriginPullResumeDownload() []CustconfOriginPullResumeDownload {
	if o == nil || o.OriginPullResumeDownload == nil {
		var ret []CustconfOriginPullResumeDownload
		return ret
	}
	return *o.OriginPullResumeDownload
}

// GetOriginPullResumeDownloadOk returns a tuple with the OriginPullResumeDownload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetOriginPullResumeDownloadOk() (*[]CustconfOriginPullResumeDownload, bool) {
	if o == nil || o.OriginPullResumeDownload == nil {
		return nil, false
	}
	return o.OriginPullResumeDownload, true
}

// HasOriginPullResumeDownload returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasOriginPullResumeDownload() bool {
	if o != nil && o.OriginPullResumeDownload != nil {
		return true
	}

	return false
}

// SetOriginPullResumeDownload gets a reference to the given []CustconfOriginPullResumeDownload and assigns it to the OriginPullResumeDownload field.
func (o *CustconfConfiguration) SetOriginPullResumeDownload(v []CustconfOriginPullResumeDownload) {
	o.OriginPullResumeDownload = &v
}

// GetRobotsTxt returns the RobotsTxt field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetRobotsTxt() []CustconfRobotsTxt {
	if o == nil || o.RobotsTxt == nil {
		var ret []CustconfRobotsTxt
		return ret
	}
	return *o.RobotsTxt
}

// GetRobotsTxtOk returns a tuple with the RobotsTxt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetRobotsTxtOk() (*[]CustconfRobotsTxt, bool) {
	if o == nil || o.RobotsTxt == nil {
		return nil, false
	}
	return o.RobotsTxt, true
}

// HasRobotsTxt returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasRobotsTxt() bool {
	if o != nil && o.RobotsTxt != nil {
		return true
	}

	return false
}

// SetRobotsTxt gets a reference to the given []CustconfRobotsTxt and assigns it to the RobotsTxt field.
func (o *CustconfConfiguration) SetRobotsTxt(v []CustconfRobotsTxt) {
	o.RobotsTxt = &v
}

// GetAwsSignedOriginPullV4 returns the AwsSignedOriginPullV4 field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAwsSignedOriginPullV4() []CustconfAwsSignedOriginPullV4 {
	if o == nil || o.AwsSignedOriginPullV4 == nil {
		var ret []CustconfAwsSignedOriginPullV4
		return ret
	}
	return *o.AwsSignedOriginPullV4
}

// GetAwsSignedOriginPullV4Ok returns a tuple with the AwsSignedOriginPullV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAwsSignedOriginPullV4Ok() (*[]CustconfAwsSignedOriginPullV4, bool) {
	if o == nil || o.AwsSignedOriginPullV4 == nil {
		return nil, false
	}
	return o.AwsSignedOriginPullV4, true
}

// HasAwsSignedOriginPullV4 returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAwsSignedOriginPullV4() bool {
	if o != nil && o.AwsSignedOriginPullV4 != nil {
		return true
	}

	return false
}

// SetAwsSignedOriginPullV4 gets a reference to the given []CustconfAwsSignedOriginPullV4 and assigns it to the AwsSignedOriginPullV4 field.
func (o *CustconfConfiguration) SetAwsSignedOriginPullV4(v []CustconfAwsSignedOriginPullV4) {
	o.AwsSignedOriginPullV4 = &v
}

// GetAwsSignedS3PostV4 returns the AwsSignedS3PostV4 field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetAwsSignedS3PostV4() []CustconfAwsSignedS3PostV4 {
	if o == nil || o.AwsSignedS3PostV4 == nil {
		var ret []CustconfAwsSignedS3PostV4
		return ret
	}
	return *o.AwsSignedS3PostV4
}

// GetAwsSignedS3PostV4Ok returns a tuple with the AwsSignedS3PostV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetAwsSignedS3PostV4Ok() (*[]CustconfAwsSignedS3PostV4, bool) {
	if o == nil || o.AwsSignedS3PostV4 == nil {
		return nil, false
	}
	return o.AwsSignedS3PostV4, true
}

// HasAwsSignedS3PostV4 returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasAwsSignedS3PostV4() bool {
	if o != nil && o.AwsSignedS3PostV4 != nil {
		return true
	}

	return false
}

// SetAwsSignedS3PostV4 gets a reference to the given []CustconfAwsSignedS3PostV4 and assigns it to the AwsSignedS3PostV4 field.
func (o *CustconfConfiguration) SetAwsSignedS3PostV4(v []CustconfAwsSignedS3PostV4) {
	o.AwsSignedS3PostV4 = &v
}

// GetStaticHeader returns the StaticHeader field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetStaticHeader() []CustconfStaticHeader {
	if o == nil || o.StaticHeader == nil {
		var ret []CustconfStaticHeader
		return ret
	}
	return *o.StaticHeader
}

// GetStaticHeaderOk returns a tuple with the StaticHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetStaticHeaderOk() (*[]CustconfStaticHeader, bool) {
	if o == nil || o.StaticHeader == nil {
		return nil, false
	}
	return o.StaticHeader, true
}

// HasStaticHeader returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasStaticHeader() bool {
	if o != nil && o.StaticHeader != nil {
		return true
	}

	return false
}

// SetStaticHeader gets a reference to the given []CustconfStaticHeader and assigns it to the StaticHeader field.
func (o *CustconfConfiguration) SetStaticHeader(v []CustconfStaticHeader) {
	o.StaticHeader = &v
}

// GetTimePseudoStreaming returns the TimePseudoStreaming field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetTimePseudoStreaming() CustconfTimePseudoStreaming {
	if o == nil || o.TimePseudoStreaming == nil {
		var ret CustconfTimePseudoStreaming
		return ret
	}
	return *o.TimePseudoStreaming
}

// GetTimePseudoStreamingOk returns a tuple with the TimePseudoStreaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetTimePseudoStreamingOk() (*CustconfTimePseudoStreaming, bool) {
	if o == nil || o.TimePseudoStreaming == nil {
		return nil, false
	}
	return o.TimePseudoStreaming, true
}

// HasTimePseudoStreaming returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasTimePseudoStreaming() bool {
	if o != nil && o.TimePseudoStreaming != nil {
		return true
	}

	return false
}

// SetTimePseudoStreaming gets a reference to the given CustconfTimePseudoStreaming and assigns it to the TimePseudoStreaming field.
func (o *CustconfConfiguration) SetTimePseudoStreaming(v CustconfTimePseudoStreaming) {
	o.TimePseudoStreaming = &v
}

// GetHttp2Support returns the Http2Support field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetHttp2Support() CustconfHttp2Support {
	if o == nil || o.Http2Support == nil {
		var ret CustconfHttp2Support
		return ret
	}
	return *o.Http2Support
}

// GetHttp2SupportOk returns a tuple with the Http2Support field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetHttp2SupportOk() (*CustconfHttp2Support, bool) {
	if o == nil || o.Http2Support == nil {
		return nil, false
	}
	return o.Http2Support, true
}

// HasHttp2Support returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasHttp2Support() bool {
	if o != nil && o.Http2Support != nil {
		return true
	}

	return false
}

// SetHttp2Support gets a reference to the given CustconfHttp2Support and assigns it to the Http2Support field.
func (o *CustconfConfiguration) SetHttp2Support(v CustconfHttp2Support) {
	o.Http2Support = &v
}

// GetVHost returns the VHost field value if set, zero value otherwise.
func (o *CustconfConfiguration) GetVHost() []CustconfVHost {
	if o == nil || o.VHost == nil {
		var ret []CustconfVHost
		return ret
	}
	return *o.VHost
}

// GetVHostOk returns a tuple with the VHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfConfiguration) GetVHostOk() (*[]CustconfVHost, bool) {
	if o == nil || o.VHost == nil {
		return nil, false
	}
	return o.VHost, true
}

// HasVHost returns a boolean if a field has been set.
func (o *CustconfConfiguration) HasVHost() bool {
	if o != nil && o.VHost != nil {
		return true
	}

	return false
}

// SetVHost gets a reference to the given []CustconfVHost and assigns it to the VHost field.
func (o *CustconfConfiguration) SetVHost(v []CustconfVHost) {
	o.VHost = &v
}

func (o CustconfConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessLogs != nil {
		toSerialize["accessLogs"] = o.AccessLogs
	}
	if o.AccessLogsConfig != nil {
		toSerialize["accessLogsConfig"] = o.AccessLogsConfig
	}
	if o.AuthACL != nil {
		toSerialize["authACL"] = o.AuthACL
	}
	if o.AuthGeo != nil {
		toSerialize["authGeo"] = o.AuthGeo
	}
	if o.AuthHttpBasic != nil {
		toSerialize["authHttpBasic"] = o.AuthHttpBasic
	}
	if o.AuthReferer != nil {
		toSerialize["authReferer"] = o.AuthReferer
	}
	if o.AuthUrlSign != nil {
		toSerialize["authUrlSign"] = o.AuthUrlSign
	}
	if o.AuthUrlSignAliCloudA != nil {
		toSerialize["authUrlSignAliCloudA"] = o.AuthUrlSignAliCloudA
	}
	if o.AuthUrlSignAliCloudB != nil {
		toSerialize["authUrlSignAliCloudB"] = o.AuthUrlSignAliCloudB
	}
	if o.AuthUrlSignAliCloudC != nil {
		toSerialize["authUrlSignAliCloudC"] = o.AuthUrlSignAliCloudC
	}
	if o.AuthUrlSignHmacTlu != nil {
		toSerialize["authUrlSignHmacTlu"] = o.AuthUrlSignHmacTlu
	}
	if o.AuthUrlSignIq != nil {
		toSerialize["authUrlSignIq"] = o.AuthUrlSignIq
	}
	if o.AuthUrlAsymmetricSignTlu != nil {
		toSerialize["authUrlAsymmetricSignTlu"] = o.AuthUrlAsymmetricSignTlu
	}
	if o.BandWidthLimit != nil {
		toSerialize["bandWidthLimit"] = o.BandWidthLimit
	}
	if o.BandwidthRateLimit != nil {
		toSerialize["bandwidthRateLimit"] = o.BandwidthRateLimit
	}
	if o.BypassCache != nil {
		toSerialize["bypassCache"] = o.BypassCache
	}
	if o.CacheControl != nil {
		toSerialize["cacheControl"] = o.CacheControl
	}
	if o.CacheKeyModification != nil {
		toSerialize["cacheKeyModification"] = o.CacheKeyModification
	}
	if o.ClientRequestModification != nil {
		toSerialize["clientRequestModification"] = o.ClientRequestModification
	}
	if o.ClientResponseModification != nil {
		toSerialize["clientResponseModification"] = o.ClientResponseModification
	}
	if o.Compression != nil {
		toSerialize["compression"] = o.Compression
	}
	if o.ContentDispositionByURL != nil {
		toSerialize["contentDispositionByURL"] = o.ContentDispositionByURL
	}
	if o.ContentDispositionByHeader != nil {
		toSerialize["contentDispositionByHeader"] = o.ContentDispositionByHeader
	}
	if o.Customer != nil {
		toSerialize["customer"] = o.Customer
	}
	if o.CustomHeader != nil {
		toSerialize["customHeader"] = o.CustomHeader
	}
	if o.CustomMimeType != nil {
		toSerialize["customMimeType"] = o.CustomMimeType
	}
	if o.DynamicCacheRule != nil {
		toSerialize["dynamicCacheRule"] = o.DynamicCacheRule
	}
	if o.DynamicContent != nil {
		toSerialize["dynamicContent"] = o.DynamicContent
	}
	if o.FailSafeOriginPull != nil {
		toSerialize["failSafeOriginPull"] = o.FailSafeOriginPull
	}
	if o.FarAheadRangeProxy != nil {
		toSerialize["farAheadRangeProxy"] = o.FarAheadRangeProxy
	}
	if o.FileSegmentation != nil {
		toSerialize["fileSegmentation"] = o.FileSegmentation
	}
	if o.FlvPseudoStreaming != nil {
		toSerialize["flvPseudoStreaming"] = o.FlvPseudoStreaming
	}
	if o.GzipOriginPull != nil {
		toSerialize["gzipOriginPull"] = o.GzipOriginPull
	}
	if o.HttpMethods != nil {
		toSerialize["httpMethods"] = o.HttpMethods
	}
	if o.Origin != nil {
		toSerialize["origin"] = o.Origin
	}
	if o.OriginPersistentConnections != nil {
		toSerialize["originPersistentConnections"] = o.OriginPersistentConnections
	}
	if o.OriginPull != nil {
		toSerialize["originPull"] = o.OriginPull
	}
	if o.OriginPullCacheExtension != nil {
		toSerialize["originPullCacheExtension"] = o.OriginPullCacheExtension
	}
	if o.OriginPullHost != nil {
		toSerialize["originPullHost"] = o.OriginPullHost
	}
	if o.OriginPullProtocol != nil {
		toSerialize["originPullProtocol"] = o.OriginPullProtocol
	}
	if o.OriginPullLogs != nil {
		toSerialize["originPullLogs"] = o.OriginPullLogs
	}
	if o.OriginPullLogsConfig != nil {
		toSerialize["originPullLogsConfig"] = o.OriginPullLogsConfig
	}
	if o.OriginPullPolicy != nil {
		toSerialize["originPullPolicy"] = o.OriginPullPolicy
	}
	if o.OriginRequestModification != nil {
		toSerialize["originRequestModification"] = o.OriginRequestModification
	}
	if o.OriginResponseModification != nil {
		toSerialize["originResponseModification"] = o.OriginResponseModification
	}
	if o.QueryStrParam != nil {
		toSerialize["queryStrParam"] = o.QueryStrParam
	}
	if o.ReceiptLogsConfig != nil {
		toSerialize["receiptLogsConfig"] = o.ReceiptLogsConfig
	}
	if o.RedirectExceptions != nil {
		toSerialize["redirectExceptions"] = o.RedirectExceptions
	}
	if o.RedirectMappings != nil {
		toSerialize["redirectMappings"] = o.RedirectMappings
	}
	if o.ResponseHeader != nil {
		toSerialize["responseHeader"] = o.ResponseHeader
	}
	if o.OriginPullResumeDownload != nil {
		toSerialize["originPullResumeDownload"] = o.OriginPullResumeDownload
	}
	if o.RobotsTxt != nil {
		toSerialize["robotsTxt"] = o.RobotsTxt
	}
	if o.AwsSignedOriginPullV4 != nil {
		toSerialize["awsSignedOriginPullV4"] = o.AwsSignedOriginPullV4
	}
	if o.AwsSignedS3PostV4 != nil {
		toSerialize["awsSignedS3PostV4"] = o.AwsSignedS3PostV4
	}
	if o.StaticHeader != nil {
		toSerialize["staticHeader"] = o.StaticHeader
	}
	if o.TimePseudoStreaming != nil {
		toSerialize["timePseudoStreaming"] = o.TimePseudoStreaming
	}
	if o.Http2Support != nil {
		toSerialize["http2Support"] = o.Http2Support
	}
	if o.VHost != nil {
		toSerialize["vHost"] = o.VHost
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfConfiguration struct {
	value *CustconfConfiguration
	isSet bool
}

func (v NullableCustconfConfiguration) Get() *CustconfConfiguration {
	return v.value
}

func (v *NullableCustconfConfiguration) Set(val *CustconfConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfConfiguration(val *CustconfConfiguration) *NullableCustconfConfiguration {
	return &NullableCustconfConfiguration{value: val, isSet: true}
}

func (v NullableCustconfConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
