/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	"encoding/json"
)

// CustconfCacheKeyModification The Cache Key Modification policy allows for manipulation of the way the cache uniquely stores assets.
type CustconfCacheKeyModification struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	// When set, purges and requests for a file will be case insensitive. This setting is useful if you have a case insensitive origin server and would like to avoid duplicating assets.
	NormalizeKeyPathToLowerCase *bool `json:"normalizeKeyPathToLowerCase,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

// NewCustconfCacheKeyModification instantiates a new CustconfCacheKeyModification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustconfCacheKeyModification() *CustconfCacheKeyModification {
	this := CustconfCacheKeyModification{}
	return &this
}

// NewCustconfCacheKeyModificationWithDefaults instantiates a new CustconfCacheKeyModification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustconfCacheKeyModificationWithDefaults() *CustconfCacheKeyModification {
	this := CustconfCacheKeyModification{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustconfCacheKeyModification) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCacheKeyModification) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustconfCacheKeyModification) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustconfCacheKeyModification) SetId(v string) {
	o.Id = &v
}

// GetNormalizeKeyPathToLowerCase returns the NormalizeKeyPathToLowerCase field value if set, zero value otherwise.
func (o *CustconfCacheKeyModification) GetNormalizeKeyPathToLowerCase() bool {
	if o == nil || o.NormalizeKeyPathToLowerCase == nil {
		var ret bool
		return ret
	}
	return *o.NormalizeKeyPathToLowerCase
}

// GetNormalizeKeyPathToLowerCaseOk returns a tuple with the NormalizeKeyPathToLowerCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCacheKeyModification) GetNormalizeKeyPathToLowerCaseOk() (*bool, bool) {
	if o == nil || o.NormalizeKeyPathToLowerCase == nil {
		return nil, false
	}
	return o.NormalizeKeyPathToLowerCase, true
}

// HasNormalizeKeyPathToLowerCase returns a boolean if a field has been set.
func (o *CustconfCacheKeyModification) HasNormalizeKeyPathToLowerCase() bool {
	if o != nil && o.NormalizeKeyPathToLowerCase != nil {
		return true
	}

	return false
}

// SetNormalizeKeyPathToLowerCase gets a reference to the given bool and assigns it to the NormalizeKeyPathToLowerCase field.
func (o *CustconfCacheKeyModification) SetNormalizeKeyPathToLowerCase(v bool) {
	o.NormalizeKeyPathToLowerCase = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CustconfCacheKeyModification) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustconfCacheKeyModification) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CustconfCacheKeyModification) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CustconfCacheKeyModification) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o CustconfCacheKeyModification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.NormalizeKeyPathToLowerCase != nil {
		toSerialize["normalizeKeyPathToLowerCase"] = o.NormalizeKeyPathToLowerCase
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableCustconfCacheKeyModification struct {
	value *CustconfCacheKeyModification
	isSet bool
}

func (v NullableCustconfCacheKeyModification) Get() *CustconfCacheKeyModification {
	return v.value
}

func (v *NullableCustconfCacheKeyModification) Set(val *CustconfCacheKeyModification) {
	v.value = val
	v.isSet = true
}

func (v NullableCustconfCacheKeyModification) IsSet() bool {
	return v.isSet
}

func (v *NullableCustconfCacheKeyModification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustconfCacheKeyModification(val *CustconfCacheKeyModification) *NullableCustconfCacheKeyModification {
	return &NullableCustconfCacheKeyModification{value: val, isSet: true}
}

func (v NullableCustconfCacheKeyModification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustconfCacheKeyModification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
