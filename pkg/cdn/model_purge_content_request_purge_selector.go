/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	"encoding/json"
)

// PurgeContentRequestPurgeSelector A key/value pair definition of content to purge from the CDN
type PurgeContentRequestPurgeSelector struct {
	SelectorType *PurgeContentRequestPurgeSelectorType `json:"selectorType,omitempty"`
	// The name of the type of content to purge  For example, the name of the HTTP response header. Names are case sensitive.
	SelectorName *string `json:"selectorName,omitempty"`
	// The value of the content to purge  For example, the value of the HTTP response header. Values are case sensitive and may be wild-carded, but cannot match a \"/\".
	SelectorValue *string `json:"selectorValue,omitempty"`
	// The delimiter to separate multiple values with  Defaults to \",\".
	SelectorValueDelimiter *string `json:"selectorValueDelimiter,omitempty"`
}

// NewPurgeContentRequestPurgeSelector instantiates a new PurgeContentRequestPurgeSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurgeContentRequestPurgeSelector() *PurgeContentRequestPurgeSelector {
	this := PurgeContentRequestPurgeSelector{}
	var selectorType PurgeContentRequestPurgeSelectorType = "HEADER"
	this.SelectorType = &selectorType
	return &this
}

// NewPurgeContentRequestPurgeSelectorWithDefaults instantiates a new PurgeContentRequestPurgeSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurgeContentRequestPurgeSelectorWithDefaults() *PurgeContentRequestPurgeSelector {
	this := PurgeContentRequestPurgeSelector{}
	var selectorType PurgeContentRequestPurgeSelectorType = "HEADER"
	this.SelectorType = &selectorType
	return &this
}

// GetSelectorType returns the SelectorType field value if set, zero value otherwise.
func (o *PurgeContentRequestPurgeSelector) GetSelectorType() PurgeContentRequestPurgeSelectorType {
	if o == nil || o.SelectorType == nil {
		var ret PurgeContentRequestPurgeSelectorType
		return ret
	}
	return *o.SelectorType
}

// GetSelectorTypeOk returns a tuple with the SelectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurgeContentRequestPurgeSelector) GetSelectorTypeOk() (*PurgeContentRequestPurgeSelectorType, bool) {
	if o == nil || o.SelectorType == nil {
		return nil, false
	}
	return o.SelectorType, true
}

// HasSelectorType returns a boolean if a field has been set.
func (o *PurgeContentRequestPurgeSelector) HasSelectorType() bool {
	if o != nil && o.SelectorType != nil {
		return true
	}

	return false
}

// SetSelectorType gets a reference to the given PurgeContentRequestPurgeSelectorType and assigns it to the SelectorType field.
func (o *PurgeContentRequestPurgeSelector) SetSelectorType(v PurgeContentRequestPurgeSelectorType) {
	o.SelectorType = &v
}

// GetSelectorName returns the SelectorName field value if set, zero value otherwise.
func (o *PurgeContentRequestPurgeSelector) GetSelectorName() string {
	if o == nil || o.SelectorName == nil {
		var ret string
		return ret
	}
	return *o.SelectorName
}

// GetSelectorNameOk returns a tuple with the SelectorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurgeContentRequestPurgeSelector) GetSelectorNameOk() (*string, bool) {
	if o == nil || o.SelectorName == nil {
		return nil, false
	}
	return o.SelectorName, true
}

// HasSelectorName returns a boolean if a field has been set.
func (o *PurgeContentRequestPurgeSelector) HasSelectorName() bool {
	if o != nil && o.SelectorName != nil {
		return true
	}

	return false
}

// SetSelectorName gets a reference to the given string and assigns it to the SelectorName field.
func (o *PurgeContentRequestPurgeSelector) SetSelectorName(v string) {
	o.SelectorName = &v
}

// GetSelectorValue returns the SelectorValue field value if set, zero value otherwise.
func (o *PurgeContentRequestPurgeSelector) GetSelectorValue() string {
	if o == nil || o.SelectorValue == nil {
		var ret string
		return ret
	}
	return *o.SelectorValue
}

// GetSelectorValueOk returns a tuple with the SelectorValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurgeContentRequestPurgeSelector) GetSelectorValueOk() (*string, bool) {
	if o == nil || o.SelectorValue == nil {
		return nil, false
	}
	return o.SelectorValue, true
}

// HasSelectorValue returns a boolean if a field has been set.
func (o *PurgeContentRequestPurgeSelector) HasSelectorValue() bool {
	if o != nil && o.SelectorValue != nil {
		return true
	}

	return false
}

// SetSelectorValue gets a reference to the given string and assigns it to the SelectorValue field.
func (o *PurgeContentRequestPurgeSelector) SetSelectorValue(v string) {
	o.SelectorValue = &v
}

// GetSelectorValueDelimiter returns the SelectorValueDelimiter field value if set, zero value otherwise.
func (o *PurgeContentRequestPurgeSelector) GetSelectorValueDelimiter() string {
	if o == nil || o.SelectorValueDelimiter == nil {
		var ret string
		return ret
	}
	return *o.SelectorValueDelimiter
}

// GetSelectorValueDelimiterOk returns a tuple with the SelectorValueDelimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurgeContentRequestPurgeSelector) GetSelectorValueDelimiterOk() (*string, bool) {
	if o == nil || o.SelectorValueDelimiter == nil {
		return nil, false
	}
	return o.SelectorValueDelimiter, true
}

// HasSelectorValueDelimiter returns a boolean if a field has been set.
func (o *PurgeContentRequestPurgeSelector) HasSelectorValueDelimiter() bool {
	if o != nil && o.SelectorValueDelimiter != nil {
		return true
	}

	return false
}

// SetSelectorValueDelimiter gets a reference to the given string and assigns it to the SelectorValueDelimiter field.
func (o *PurgeContentRequestPurgeSelector) SetSelectorValueDelimiter(v string) {
	o.SelectorValueDelimiter = &v
}

func (o PurgeContentRequestPurgeSelector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SelectorType != nil {
		toSerialize["selectorType"] = o.SelectorType
	}
	if o.SelectorName != nil {
		toSerialize["selectorName"] = o.SelectorName
	}
	if o.SelectorValue != nil {
		toSerialize["selectorValue"] = o.SelectorValue
	}
	if o.SelectorValueDelimiter != nil {
		toSerialize["selectorValueDelimiter"] = o.SelectorValueDelimiter
	}
	return json.Marshal(toSerialize)
}

type NullablePurgeContentRequestPurgeSelector struct {
	value *PurgeContentRequestPurgeSelector
	isSet bool
}

func (v NullablePurgeContentRequestPurgeSelector) Get() *PurgeContentRequestPurgeSelector {
	return v.value
}

func (v *NullablePurgeContentRequestPurgeSelector) Set(val *PurgeContentRequestPurgeSelector) {
	v.value = val
	v.isSet = true
}

func (v NullablePurgeContentRequestPurgeSelector) IsSet() bool {
	return v.isSet
}

func (v *NullablePurgeContentRequestPurgeSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurgeContentRequestPurgeSelector(val *PurgeContentRequestPurgeSelector) *NullablePurgeContentRequestPurgeSelector {
	return &NullablePurgeContentRequestPurgeSelector{value: val, isSet: true}
}

func (v NullablePurgeContentRequestPurgeSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurgeContentRequestPurgeSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
