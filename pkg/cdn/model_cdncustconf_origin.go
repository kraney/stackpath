/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn

import (
	"encoding/json"
)

// CdncustconfOrigin struct for CdncustconfOrigin
type CdncustconfOrigin struct {
	// This is used by the API to perform conflict checking
	Id *string `json:"id,omitempty"`
	Host *string `json:"host,omitempty"`
	// String of values delimited by a '|' character.
	OriginPullHeaders *string `json:"originPullHeaders,omitempty"`
	// String of values delimited by a ',' character.
	OriginCacheHeaders *string `json:"originCacheHeaders,omitempty"`
}

// NewCdncustconfOrigin instantiates a new CdncustconfOrigin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdncustconfOrigin() *CdncustconfOrigin {
	this := CdncustconfOrigin{}
	return &this
}

// NewCdncustconfOriginWithDefaults instantiates a new CdncustconfOrigin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdncustconfOriginWithDefaults() *CdncustconfOrigin {
	this := CdncustconfOrigin{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CdncustconfOrigin) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdncustconfOrigin) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CdncustconfOrigin) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CdncustconfOrigin) SetId(v string) {
	o.Id = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *CdncustconfOrigin) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdncustconfOrigin) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *CdncustconfOrigin) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *CdncustconfOrigin) SetHost(v string) {
	o.Host = &v
}

// GetOriginPullHeaders returns the OriginPullHeaders field value if set, zero value otherwise.
func (o *CdncustconfOrigin) GetOriginPullHeaders() string {
	if o == nil || o.OriginPullHeaders == nil {
		var ret string
		return ret
	}
	return *o.OriginPullHeaders
}

// GetOriginPullHeadersOk returns a tuple with the OriginPullHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdncustconfOrigin) GetOriginPullHeadersOk() (*string, bool) {
	if o == nil || o.OriginPullHeaders == nil {
		return nil, false
	}
	return o.OriginPullHeaders, true
}

// HasOriginPullHeaders returns a boolean if a field has been set.
func (o *CdncustconfOrigin) HasOriginPullHeaders() bool {
	if o != nil && o.OriginPullHeaders != nil {
		return true
	}

	return false
}

// SetOriginPullHeaders gets a reference to the given string and assigns it to the OriginPullHeaders field.
func (o *CdncustconfOrigin) SetOriginPullHeaders(v string) {
	o.OriginPullHeaders = &v
}

// GetOriginCacheHeaders returns the OriginCacheHeaders field value if set, zero value otherwise.
func (o *CdncustconfOrigin) GetOriginCacheHeaders() string {
	if o == nil || o.OriginCacheHeaders == nil {
		var ret string
		return ret
	}
	return *o.OriginCacheHeaders
}

// GetOriginCacheHeadersOk returns a tuple with the OriginCacheHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdncustconfOrigin) GetOriginCacheHeadersOk() (*string, bool) {
	if o == nil || o.OriginCacheHeaders == nil {
		return nil, false
	}
	return o.OriginCacheHeaders, true
}

// HasOriginCacheHeaders returns a boolean if a field has been set.
func (o *CdncustconfOrigin) HasOriginCacheHeaders() bool {
	if o != nil && o.OriginCacheHeaders != nil {
		return true
	}

	return false
}

// SetOriginCacheHeaders gets a reference to the given string and assigns it to the OriginCacheHeaders field.
func (o *CdncustconfOrigin) SetOriginCacheHeaders(v string) {
	o.OriginCacheHeaders = &v
}

func (o CdncustconfOrigin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.OriginPullHeaders != nil {
		toSerialize["originPullHeaders"] = o.OriginPullHeaders
	}
	if o.OriginCacheHeaders != nil {
		toSerialize["originCacheHeaders"] = o.OriginCacheHeaders
	}
	return json.Marshal(toSerialize)
}

type NullableCdncustconfOrigin struct {
	value *CdncustconfOrigin
	isSet bool
}

func (v NullableCdncustconfOrigin) Get() *CdncustconfOrigin {
	return v.value
}

func (v *NullableCdncustconfOrigin) Set(val *CdncustconfOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableCdncustconfOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableCdncustconfOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdncustconfOrigin(val *CdncustconfOrigin) *NullableCdncustconfOrigin {
	return &NullableCdncustconfOrigin{value: val, isSet: true}
}

func (v NullableCdncustconfOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdncustconfOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
