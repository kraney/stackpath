/*
 * Content Delivery Network
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cdn
// CustconfOriginPullPolicy The CDN caching policy allows you to control how your origin's content is cached on the CDN.
type CustconfOriginPullPolicy struct {
	// This is used by the API to perform conflict checking
	Id string `json:"id,omitempty"`
	// String of values delimited by a ',' character. This is a pattern match expression for each status code this policy applies to. For example, 2*, 3* applies this policy to all 200 and 300 level HTTP responses from your origin.
	StatusCodeMatch string `json:"statusCodeMatch,omitempty"`
	ExpirePolicy OriginPullPolicyExpirePolicyEnumWrapperValue `json:"expirePolicy,omitempty"`
	// This is the expiration time used for assets pulled from your origin. When using Cache-Control headers expiration methods, this value is used if your origin doesn't return a max-age directive in the Cache-Control HTTP header. Please note that a value of 0 in this fields instructs the caching server to retain assets for as long as possible.
	ExpireSeconds int32 `json:"expireSeconds,omitempty"`
	// This enables the processing of no-store HTTP Cache-Control directives on your container. By enabling this option, responses from your origin containing the no-store directive are not cached. Be aware that requests for non-cacheable assets are always forwarded to your origin and may impose a high request and bandwidth load on your origin.
	HonorNoStore bool `json:"honorNoStore,omitempty"`
	// This enables the processing of no-cache HTTP Cache-Control directives on your container. By enabling this option, responses from your origin containing the no-cache directive force the CDN to submit every subsequent request to your origin for validation before serving the asset stored in the cache.
	HonorNoCache bool `json:"honorNoCache,omitempty"`
	HonorMustRevalidate bool `json:"honorMustRevalidate,omitempty"`
	NoCacheBehavior OriginPullPolicyNoCacheBehaviorEnumWrapperValue `json:"noCacheBehavior,omitempty"`
	// This enables the CDN to apply the no-cache behavior for assets delivered by your origin containing a max-age directive equal to zero.
	MaxAgeZeroToNoCache bool `json:"maxAgeZeroToNoCache,omitempty"`
	// This enables the CDN to apply the no-cache behavior for assets delivered by your origin containing the must-revalidate directive.
	MustRevalidateToNoCache bool `json:"mustRevalidateToNoCache,omitempty"`
	// This allows you to define a custom directive that, when used by your origin in the Cache-Control response headers, forces the CDN to proxy the request to the end user without caching the result.
	BypassCacheIdentifier string `json:"bypassCacheIdentifier,omitempty"`
	// This forces the CDN to not cache any asset pulled from your origin that would otherwise be stored at this location in the cache. Typically this policy is used to prevent 4XX and 5XX response codes from overwriting a file in the cache when used with corresponding Origin Status Code Match setting. If bypass cache behavior is desired for all assets at a scope, Origin Pull Queue Behavior in the Origin Pull Settings also needs to be set to NOCACHE for that scope.
	ForceBypassCache bool `json:"forceBypassCache,omitempty"`
	// String of values delimited by a ',' character. This is the list of your origin's HTTP headers that you want the CDN to cache and deliver to end users.
	HttpHeaders string `json:"httpHeaders,omitempty"`
	// This enables the processing of private HTTP Cache-Control directives on your container. By enabling this option, responses from your origin containing the private directive are not cached. Be aware that requests for non-cacheable assets are always forwarded to your origin and may impose a high request and bandwidth load on your origin.
	HonorPrivate bool `json:"honorPrivate,omitempty"`
	// This enables the processing of s-maxage HTTP Cache-Control directives on your container. By enabling this option, the s-maxage HTTP Cache-Control directive in the responses from your origin takes precedence over the max-age directive. If both max-age and s-maxage need to be preserved in the client response, the Cache-Control header must be added to the \"Http Header Caching\" setting.
	HonorSMaxAge bool `json:"honorSMaxAge,omitempty"`
	UpdateHttpHeadersOn304Response bool `json:"updateHttpHeadersOn304Response,omitempty"`
	DefaultCacheBehavior OriginPullPolicyDefaultCacheBehaviorEnumWrapperValue `json:"defaultCacheBehavior,omitempty"`
	Enabled bool `json:"enabled,omitempty"`
	// String of values delimited by a ',' character.
	MethodFilter string `json:"methodFilter,omitempty"`
	// String of values delimited by a ',' character.
	PathFilter string `json:"pathFilter,omitempty"`
	// String of values delimited by a ',' character.
	HeaderFilter string `json:"headerFilter,omitempty"`
	// String of values delimited by a ',' character.
	ContentTypeFilter string `json:"contentTypeFilter,omitempty"`
}
