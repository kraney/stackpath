/*
 * Edge Compute Networking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge_compute_networking

import (
	"encoding/json"
)

// V1IpBlock Defines an IP block
type V1IpBlock struct {
	// A subnet that will define all the IPs allowed by a rule
	Cidr *string `json:"cidr,omitempty"`
	// A list of subnets that will be excluded from the above subnet  This allows a convenient way to allow multiple ip ranges in a single expression
	Except *[]string `json:"except,omitempty"`
}

// NewV1IpBlock instantiates a new V1IpBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1IpBlock() *V1IpBlock {
	this := V1IpBlock{}
	return &this
}

// NewV1IpBlockWithDefaults instantiates a new V1IpBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1IpBlockWithDefaults() *V1IpBlock {
	this := V1IpBlock{}
	return &this
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *V1IpBlock) GetCidr() string {
	if o == nil || o.Cidr == nil {
		var ret string
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1IpBlock) GetCidrOk() (*string, bool) {
	if o == nil || o.Cidr == nil {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *V1IpBlock) HasCidr() bool {
	if o != nil && o.Cidr != nil {
		return true
	}

	return false
}

// SetCidr gets a reference to the given string and assigns it to the Cidr field.
func (o *V1IpBlock) SetCidr(v string) {
	o.Cidr = &v
}

// GetExcept returns the Except field value if set, zero value otherwise.
func (o *V1IpBlock) GetExcept() []string {
	if o == nil || o.Except == nil {
		var ret []string
		return ret
	}
	return *o.Except
}

// GetExceptOk returns a tuple with the Except field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1IpBlock) GetExceptOk() (*[]string, bool) {
	if o == nil || o.Except == nil {
		return nil, false
	}
	return o.Except, true
}

// HasExcept returns a boolean if a field has been set.
func (o *V1IpBlock) HasExcept() bool {
	if o != nil && o.Except != nil {
		return true
	}

	return false
}

// SetExcept gets a reference to the given []string and assigns it to the Except field.
func (o *V1IpBlock) SetExcept(v []string) {
	o.Except = &v
}

func (o V1IpBlock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cidr != nil {
		toSerialize["cidr"] = o.Cidr
	}
	if o.Except != nil {
		toSerialize["except"] = o.Except
	}
	return json.Marshal(toSerialize)
}

type NullableV1IpBlock struct {
	value *V1IpBlock
	isSet bool
}

func (v NullableV1IpBlock) Get() *V1IpBlock {
	return v.value
}

func (v *NullableV1IpBlock) Set(val *V1IpBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableV1IpBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableV1IpBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1IpBlock(val *V1IpBlock) *NullableV1IpBlock {
	return &NullableV1IpBlock{value: val, isSet: true}
}

func (v NullableV1IpBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1IpBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
