/*
 * Edge Compute Networking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge_compute_networking

import (
	"encoding/json"
)

// V1NetworkPolicySpec The specification for the desired state of a network policy
type V1NetworkPolicySpec struct {
	// A selector to match workload instances
	InstanceSelectors *[]V1MatchExpression `json:"instanceSelectors,omitempty"`
	// A selector to match networks
	NetworkSelectors *[]V1MatchExpression `json:"networkSelectors,omitempty"`
	// A list of policy types  Policy types are used to specify what rules will be defined. If a policy type is given but not defined it will default. If it is not provided then no action will be used.
	PolicyTypes *[]NetworkPolicySpecPolicyType `json:"policyTypes,omitempty"`
	// A policy's priority among other network policies. 1 - 65535  Network policies apply to all compute workloads on the stack. Lower values have a higher priority, and priorities must be unique across the stack. Use the special value 65534 to apply the same priority to different workload instances in the same stack.
	Priority *int32 `json:"priority,omitempty"`
	// A list of rules for inbound traffic to instances  If the ingress policy type is given but not defined here the default is to block all
	Ingress *[]V1Ingress `json:"ingress,omitempty"`
	// A list of rules for outbound traffic from instances  If the egress policy type is given but not defined here the default is to allow all
	Egress *[]V1Egress `json:"egress,omitempty"`
}

// NewV1NetworkPolicySpec instantiates a new V1NetworkPolicySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1NetworkPolicySpec() *V1NetworkPolicySpec {
	this := V1NetworkPolicySpec{}
	return &this
}

// NewV1NetworkPolicySpecWithDefaults instantiates a new V1NetworkPolicySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NetworkPolicySpecWithDefaults() *V1NetworkPolicySpec {
	this := V1NetworkPolicySpec{}
	return &this
}

// GetInstanceSelectors returns the InstanceSelectors field value if set, zero value otherwise.
func (o *V1NetworkPolicySpec) GetInstanceSelectors() []V1MatchExpression {
	if o == nil || o.InstanceSelectors == nil {
		var ret []V1MatchExpression
		return ret
	}
	return *o.InstanceSelectors
}

// GetInstanceSelectorsOk returns a tuple with the InstanceSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NetworkPolicySpec) GetInstanceSelectorsOk() (*[]V1MatchExpression, bool) {
	if o == nil || o.InstanceSelectors == nil {
		return nil, false
	}
	return o.InstanceSelectors, true
}

// HasInstanceSelectors returns a boolean if a field has been set.
func (o *V1NetworkPolicySpec) HasInstanceSelectors() bool {
	if o != nil && o.InstanceSelectors != nil {
		return true
	}

	return false
}

// SetInstanceSelectors gets a reference to the given []V1MatchExpression and assigns it to the InstanceSelectors field.
func (o *V1NetworkPolicySpec) SetInstanceSelectors(v []V1MatchExpression) {
	o.InstanceSelectors = &v
}

// GetNetworkSelectors returns the NetworkSelectors field value if set, zero value otherwise.
func (o *V1NetworkPolicySpec) GetNetworkSelectors() []V1MatchExpression {
	if o == nil || o.NetworkSelectors == nil {
		var ret []V1MatchExpression
		return ret
	}
	return *o.NetworkSelectors
}

// GetNetworkSelectorsOk returns a tuple with the NetworkSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NetworkPolicySpec) GetNetworkSelectorsOk() (*[]V1MatchExpression, bool) {
	if o == nil || o.NetworkSelectors == nil {
		return nil, false
	}
	return o.NetworkSelectors, true
}

// HasNetworkSelectors returns a boolean if a field has been set.
func (o *V1NetworkPolicySpec) HasNetworkSelectors() bool {
	if o != nil && o.NetworkSelectors != nil {
		return true
	}

	return false
}

// SetNetworkSelectors gets a reference to the given []V1MatchExpression and assigns it to the NetworkSelectors field.
func (o *V1NetworkPolicySpec) SetNetworkSelectors(v []V1MatchExpression) {
	o.NetworkSelectors = &v
}

// GetPolicyTypes returns the PolicyTypes field value if set, zero value otherwise.
func (o *V1NetworkPolicySpec) GetPolicyTypes() []NetworkPolicySpecPolicyType {
	if o == nil || o.PolicyTypes == nil {
		var ret []NetworkPolicySpecPolicyType
		return ret
	}
	return *o.PolicyTypes
}

// GetPolicyTypesOk returns a tuple with the PolicyTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NetworkPolicySpec) GetPolicyTypesOk() (*[]NetworkPolicySpecPolicyType, bool) {
	if o == nil || o.PolicyTypes == nil {
		return nil, false
	}
	return o.PolicyTypes, true
}

// HasPolicyTypes returns a boolean if a field has been set.
func (o *V1NetworkPolicySpec) HasPolicyTypes() bool {
	if o != nil && o.PolicyTypes != nil {
		return true
	}

	return false
}

// SetPolicyTypes gets a reference to the given []NetworkPolicySpecPolicyType and assigns it to the PolicyTypes field.
func (o *V1NetworkPolicySpec) SetPolicyTypes(v []NetworkPolicySpecPolicyType) {
	o.PolicyTypes = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *V1NetworkPolicySpec) GetPriority() int32 {
	if o == nil || o.Priority == nil {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NetworkPolicySpec) GetPriorityOk() (*int32, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *V1NetworkPolicySpec) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *V1NetworkPolicySpec) SetPriority(v int32) {
	o.Priority = &v
}

// GetIngress returns the Ingress field value if set, zero value otherwise.
func (o *V1NetworkPolicySpec) GetIngress() []V1Ingress {
	if o == nil || o.Ingress == nil {
		var ret []V1Ingress
		return ret
	}
	return *o.Ingress
}

// GetIngressOk returns a tuple with the Ingress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NetworkPolicySpec) GetIngressOk() (*[]V1Ingress, bool) {
	if o == nil || o.Ingress == nil {
		return nil, false
	}
	return o.Ingress, true
}

// HasIngress returns a boolean if a field has been set.
func (o *V1NetworkPolicySpec) HasIngress() bool {
	if o != nil && o.Ingress != nil {
		return true
	}

	return false
}

// SetIngress gets a reference to the given []V1Ingress and assigns it to the Ingress field.
func (o *V1NetworkPolicySpec) SetIngress(v []V1Ingress) {
	o.Ingress = &v
}

// GetEgress returns the Egress field value if set, zero value otherwise.
func (o *V1NetworkPolicySpec) GetEgress() []V1Egress {
	if o == nil || o.Egress == nil {
		var ret []V1Egress
		return ret
	}
	return *o.Egress
}

// GetEgressOk returns a tuple with the Egress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NetworkPolicySpec) GetEgressOk() (*[]V1Egress, bool) {
	if o == nil || o.Egress == nil {
		return nil, false
	}
	return o.Egress, true
}

// HasEgress returns a boolean if a field has been set.
func (o *V1NetworkPolicySpec) HasEgress() bool {
	if o != nil && o.Egress != nil {
		return true
	}

	return false
}

// SetEgress gets a reference to the given []V1Egress and assigns it to the Egress field.
func (o *V1NetworkPolicySpec) SetEgress(v []V1Egress) {
	o.Egress = &v
}

func (o V1NetworkPolicySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstanceSelectors != nil {
		toSerialize["instanceSelectors"] = o.InstanceSelectors
	}
	if o.NetworkSelectors != nil {
		toSerialize["networkSelectors"] = o.NetworkSelectors
	}
	if o.PolicyTypes != nil {
		toSerialize["policyTypes"] = o.PolicyTypes
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.Ingress != nil {
		toSerialize["ingress"] = o.Ingress
	}
	if o.Egress != nil {
		toSerialize["egress"] = o.Egress
	}
	return json.Marshal(toSerialize)
}

type NullableV1NetworkPolicySpec struct {
	value *V1NetworkPolicySpec
	isSet bool
}

func (v NullableV1NetworkPolicySpec) Get() *V1NetworkPolicySpec {
	return v.value
}

func (v *NullableV1NetworkPolicySpec) Set(val *V1NetworkPolicySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NetworkPolicySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NetworkPolicySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NetworkPolicySpec(val *V1NetworkPolicySpec) *NullableV1NetworkPolicySpec {
	return &NullableV1NetworkPolicySpec{value: val, isSet: true}
}

func (v NullableV1NetworkPolicySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NetworkPolicySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
