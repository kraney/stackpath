/*
 * DNS
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dns

import (
	"encoding/json"
)

// ZoneBulkCreateOrUpdateZoneRecordsRequest struct for ZoneBulkCreateOrUpdateZoneRecordsRequest
type ZoneBulkCreateOrUpdateZoneRecordsRequest struct {
	// The records to create or update in the DNS zone
	Records *[]ZoneBulkCreateOrUpdateZoneRecordMessage `json:"records,omitempty"`
}

// NewZoneBulkCreateOrUpdateZoneRecordsRequest instantiates a new ZoneBulkCreateOrUpdateZoneRecordsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneBulkCreateOrUpdateZoneRecordsRequest() *ZoneBulkCreateOrUpdateZoneRecordsRequest {
	this := ZoneBulkCreateOrUpdateZoneRecordsRequest{}
	return &this
}

// NewZoneBulkCreateOrUpdateZoneRecordsRequestWithDefaults instantiates a new ZoneBulkCreateOrUpdateZoneRecordsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneBulkCreateOrUpdateZoneRecordsRequestWithDefaults() *ZoneBulkCreateOrUpdateZoneRecordsRequest {
	this := ZoneBulkCreateOrUpdateZoneRecordsRequest{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *ZoneBulkCreateOrUpdateZoneRecordsRequest) GetRecords() []ZoneBulkCreateOrUpdateZoneRecordMessage {
	if o == nil || o.Records == nil {
		var ret []ZoneBulkCreateOrUpdateZoneRecordMessage
		return ret
	}
	return *o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneBulkCreateOrUpdateZoneRecordsRequest) GetRecordsOk() (*[]ZoneBulkCreateOrUpdateZoneRecordMessage, bool) {
	if o == nil || o.Records == nil {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *ZoneBulkCreateOrUpdateZoneRecordsRequest) HasRecords() bool {
	if o != nil && o.Records != nil {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []ZoneBulkCreateOrUpdateZoneRecordMessage and assigns it to the Records field.
func (o *ZoneBulkCreateOrUpdateZoneRecordsRequest) SetRecords(v []ZoneBulkCreateOrUpdateZoneRecordMessage) {
	o.Records = &v
}

func (o ZoneBulkCreateOrUpdateZoneRecordsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Records != nil {
		toSerialize["records"] = o.Records
	}
	return json.Marshal(toSerialize)
}

type NullableZoneBulkCreateOrUpdateZoneRecordsRequest struct {
	value *ZoneBulkCreateOrUpdateZoneRecordsRequest
	isSet bool
}

func (v NullableZoneBulkCreateOrUpdateZoneRecordsRequest) Get() *ZoneBulkCreateOrUpdateZoneRecordsRequest {
	return v.value
}

func (v *NullableZoneBulkCreateOrUpdateZoneRecordsRequest) Set(val *ZoneBulkCreateOrUpdateZoneRecordsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneBulkCreateOrUpdateZoneRecordsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneBulkCreateOrUpdateZoneRecordsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneBulkCreateOrUpdateZoneRecordsRequest(val *ZoneBulkCreateOrUpdateZoneRecordsRequest) *NullableZoneBulkCreateOrUpdateZoneRecordsRequest {
	return &NullableZoneBulkCreateOrUpdateZoneRecordsRequest{value: val, isSet: true}
}

func (v NullableZoneBulkCreateOrUpdateZoneRecordsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneBulkCreateOrUpdateZoneRecordsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
