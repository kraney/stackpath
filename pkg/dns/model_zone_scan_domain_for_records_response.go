/*
 * DNS
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dns

import (
	"encoding/json"
)

// ZoneScanDomainForRecordsResponse A response from a request to scan a domain for its resource records
type ZoneScanDomainForRecordsResponse struct {
	// The resource records StackPath was able to scan from the domain
	Records *[]ZoneImportZoneRecord `json:"records,omitempty"`
}

// NewZoneScanDomainForRecordsResponse instantiates a new ZoneScanDomainForRecordsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneScanDomainForRecordsResponse() *ZoneScanDomainForRecordsResponse {
	this := ZoneScanDomainForRecordsResponse{}
	return &this
}

// NewZoneScanDomainForRecordsResponseWithDefaults instantiates a new ZoneScanDomainForRecordsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneScanDomainForRecordsResponseWithDefaults() *ZoneScanDomainForRecordsResponse {
	this := ZoneScanDomainForRecordsResponse{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *ZoneScanDomainForRecordsResponse) GetRecords() []ZoneImportZoneRecord {
	if o == nil || o.Records == nil {
		var ret []ZoneImportZoneRecord
		return ret
	}
	return *o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneScanDomainForRecordsResponse) GetRecordsOk() (*[]ZoneImportZoneRecord, bool) {
	if o == nil || o.Records == nil {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *ZoneScanDomainForRecordsResponse) HasRecords() bool {
	if o != nil && o.Records != nil {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []ZoneImportZoneRecord and assigns it to the Records field.
func (o *ZoneScanDomainForRecordsResponse) SetRecords(v []ZoneImportZoneRecord) {
	o.Records = &v
}

func (o ZoneScanDomainForRecordsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Records != nil {
		toSerialize["records"] = o.Records
	}
	return json.Marshal(toSerialize)
}

type NullableZoneScanDomainForRecordsResponse struct {
	value *ZoneScanDomainForRecordsResponse
	isSet bool
}

func (v NullableZoneScanDomainForRecordsResponse) Get() *ZoneScanDomainForRecordsResponse {
	return v.value
}

func (v *NullableZoneScanDomainForRecordsResponse) Set(val *ZoneScanDomainForRecordsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneScanDomainForRecordsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneScanDomainForRecordsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneScanDomainForRecordsResponse(val *ZoneScanDomainForRecordsResponse) *NullableZoneScanDomainForRecordsResponse {
	return &NullableZoneScanDomainForRecordsResponse{value: val, isSet: true}
}

func (v NullableZoneScanDomainForRecordsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneScanDomainForRecordsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
