/*
 * DNS
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dns

import (
	"encoding/json"
)

// ZoneGetZonesResponse A response from a request to retrieve all DNS zones in a stack
type ZoneGetZonesResponse struct {
	PageInfo *PaginationPageInfo `json:"pageInfo,omitempty"`
	// The requested DNS zones
	Zones *[]ZoneZone `json:"zones,omitempty"`
}

// NewZoneGetZonesResponse instantiates a new ZoneGetZonesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneGetZonesResponse() *ZoneGetZonesResponse {
	this := ZoneGetZonesResponse{}
	return &this
}

// NewZoneGetZonesResponseWithDefaults instantiates a new ZoneGetZonesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneGetZonesResponseWithDefaults() *ZoneGetZonesResponse {
	this := ZoneGetZonesResponse{}
	return &this
}

// GetPageInfo returns the PageInfo field value if set, zero value otherwise.
func (o *ZoneGetZonesResponse) GetPageInfo() PaginationPageInfo {
	if o == nil || o.PageInfo == nil {
		var ret PaginationPageInfo
		return ret
	}
	return *o.PageInfo
}

// GetPageInfoOk returns a tuple with the PageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGetZonesResponse) GetPageInfoOk() (*PaginationPageInfo, bool) {
	if o == nil || o.PageInfo == nil {
		return nil, false
	}
	return o.PageInfo, true
}

// HasPageInfo returns a boolean if a field has been set.
func (o *ZoneGetZonesResponse) HasPageInfo() bool {
	if o != nil && o.PageInfo != nil {
		return true
	}

	return false
}

// SetPageInfo gets a reference to the given PaginationPageInfo and assigns it to the PageInfo field.
func (o *ZoneGetZonesResponse) SetPageInfo(v PaginationPageInfo) {
	o.PageInfo = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *ZoneGetZonesResponse) GetZones() []ZoneZone {
	if o == nil || o.Zones == nil {
		var ret []ZoneZone
		return ret
	}
	return *o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneGetZonesResponse) GetZonesOk() (*[]ZoneZone, bool) {
	if o == nil || o.Zones == nil {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *ZoneGetZonesResponse) HasZones() bool {
	if o != nil && o.Zones != nil {
		return true
	}

	return false
}

// SetZones gets a reference to the given []ZoneZone and assigns it to the Zones field.
func (o *ZoneGetZonesResponse) SetZones(v []ZoneZone) {
	o.Zones = &v
}

func (o ZoneGetZonesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PageInfo != nil {
		toSerialize["pageInfo"] = o.PageInfo
	}
	if o.Zones != nil {
		toSerialize["zones"] = o.Zones
	}
	return json.Marshal(toSerialize)
}

type NullableZoneGetZonesResponse struct {
	value *ZoneGetZonesResponse
	isSet bool
}

func (v NullableZoneGetZonesResponse) Get() *ZoneGetZonesResponse {
	return v.value
}

func (v *NullableZoneGetZonesResponse) Set(val *ZoneGetZonesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneGetZonesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneGetZonesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneGetZonesResponse(val *ZoneGetZonesResponse) *NullableZoneGetZonesResponse {
	return &NullableZoneGetZonesResponse{value: val, isSet: true}
}

func (v NullableZoneGetZonesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneGetZonesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
