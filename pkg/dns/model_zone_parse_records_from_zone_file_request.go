/*
 * DNS
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dns

import (
	"encoding/json"
)

// ZoneParseRecordsFromZoneFileRequest struct for ZoneParseRecordsFromZoneFileRequest
type ZoneParseRecordsFromZoneFileRequest struct {
	// Base64 encoded BIND zone file contents
	ZoneFile *string `json:"zoneFile,omitempty"`
}

// NewZoneParseRecordsFromZoneFileRequest instantiates a new ZoneParseRecordsFromZoneFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneParseRecordsFromZoneFileRequest() *ZoneParseRecordsFromZoneFileRequest {
	this := ZoneParseRecordsFromZoneFileRequest{}
	return &this
}

// NewZoneParseRecordsFromZoneFileRequestWithDefaults instantiates a new ZoneParseRecordsFromZoneFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneParseRecordsFromZoneFileRequestWithDefaults() *ZoneParseRecordsFromZoneFileRequest {
	this := ZoneParseRecordsFromZoneFileRequest{}
	return &this
}

// GetZoneFile returns the ZoneFile field value if set, zero value otherwise.
func (o *ZoneParseRecordsFromZoneFileRequest) GetZoneFile() string {
	if o == nil || o.ZoneFile == nil {
		var ret string
		return ret
	}
	return *o.ZoneFile
}

// GetZoneFileOk returns a tuple with the ZoneFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneParseRecordsFromZoneFileRequest) GetZoneFileOk() (*string, bool) {
	if o == nil || o.ZoneFile == nil {
		return nil, false
	}
	return o.ZoneFile, true
}

// HasZoneFile returns a boolean if a field has been set.
func (o *ZoneParseRecordsFromZoneFileRequest) HasZoneFile() bool {
	if o != nil && o.ZoneFile != nil {
		return true
	}

	return false
}

// SetZoneFile gets a reference to the given string and assigns it to the ZoneFile field.
func (o *ZoneParseRecordsFromZoneFileRequest) SetZoneFile(v string) {
	o.ZoneFile = &v
}

func (o ZoneParseRecordsFromZoneFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ZoneFile != nil {
		toSerialize["zoneFile"] = o.ZoneFile
	}
	return json.Marshal(toSerialize)
}

type NullableZoneParseRecordsFromZoneFileRequest struct {
	value *ZoneParseRecordsFromZoneFileRequest
	isSet bool
}

func (v NullableZoneParseRecordsFromZoneFileRequest) Get() *ZoneParseRecordsFromZoneFileRequest {
	return v.value
}

func (v *NullableZoneParseRecordsFromZoneFileRequest) Set(val *ZoneParseRecordsFromZoneFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneParseRecordsFromZoneFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneParseRecordsFromZoneFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneParseRecordsFromZoneFileRequest(val *ZoneParseRecordsFromZoneFileRequest) *NullableZoneParseRecordsFromZoneFileRequest {
	return &NullableZoneParseRecordsFromZoneFileRequest{value: val, isSet: true}
}

func (v NullableZoneParseRecordsFromZoneFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneParseRecordsFromZoneFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
