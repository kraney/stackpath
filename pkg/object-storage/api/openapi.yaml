openapi: 3.0.0
info:
  contact:
    name: StackPath Support
    url: https://support.stackpath.com/
  title: Object Storage
  version: 1.0.0
externalDocs:
  description: The StackPath API Reference
  url: https://stackpath.dev/reference
servers:
- url: https://gateway.stackpath.com
security:
- oauth2: []
paths:
  /storage/v1/stacks/{stack_id}/buckets:
    get:
      operationId: GetBuckets
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: The number of items desired.
        explode: true
        in: query
        name: page_request.first
        required: false
        schema:
          type: string
        style: form
      - description: The cursor value after which data will be returned.
        explode: true
        in: query
        name: page_request.after
        required: false
        schema:
          type: string
        style: form
      - description: SQL-style constraint filters.
        explode: true
        in: query
        name: page_request.filter
        required: false
        schema:
          type: string
        style: form
      - description: Sort the response by the given field.
        explode: true
        in: query
        name: page_request.sort_by
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageGetBucketsResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get all buckets
      tags:
      - Buckets
    post:
      operationId: CreateBucket
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageCreateBucketRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageCreateBucketResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Create a bucket
      tags:
      - Buckets
  /storage/v1/stacks/{stack_id}/buckets/{bucket_id}:
    delete:
      operationId: DeleteBucket
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A storage bucket ID
        explode: false
        in: path
        name: bucket_id
        required: true
        schema:
          type: string
        style: simple
      - description: Force bucket deletion even if there are contents inside it
        explode: true
        in: query
        name: force_delete
        required: false
        schema:
          format: boolean
          type: boolean
        style: form
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Delete a bucket
      tags:
      - Buckets
    get:
      operationId: GetBucket
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A storage bucket ID
        explode: false
        in: path
        name: bucket_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageGetBucketResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get a bucket
      tags:
      - Buckets
    put:
      operationId: UpdateBucket
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A storage bucket ID
        explode: false
        in: path
        name: bucket_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageUpdateBucketRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageUpdateBucketResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Update a bucket
      tags:
      - Buckets
  /storage/v1/stacks/{stack_id}/buckets/{bucket_id}/metrics:
    get:
      description: |-
        When the start & end dates are not provided, the metrics for the last day will be returned.
        The date range used must be at least a day apart, and only beginning times are allowed (e.g. 2019-01-01T00:00:00)
      operationId: GetBucketMetrics
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A storage bucket ID
        explode: false
        in: path
        name: bucket_id
        required: true
        schema:
          type: string
        style: simple
      - description: The start date for the range of metrics.
        explode: true
        in: query
        name: start_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date for the range of metrics.
        explode: true
        in: query
        name: end_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/prometheusMetrics'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get bucket metrics
      tags:
      - Metrics
  /storage/v1/stacks/{stack_id}/metrics:
    get:
      description: |-
        When the start & end dates are not provided, the metrics for the last day will be returned.
        The date range used must be at least a day apart, and only beginning times are allowed (e.g. 2019-01-01T00:00:00)
      operationId: GetStackMetrics
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: The start date for the range of metrics.
        explode: true
        in: query
        name: start_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date for the range of metrics.
        explode: true
        in: query
        name: end_time
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/prometheusMetrics'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get stack metrics
      tags:
      - Metrics
  /storage/v1/stacks/{stack_id}/users/{user_id}/credentials:
    get:
      operationId: GetCredentials
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A user ID
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageGetCredentialsResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Get credentials
      tags:
      - User Credentials
  /storage/v1/stacks/{stack_id}/users/{user_id}/credentials/generate:
    post:
      description: Generate storage credentials for the given user. Users can only
        have one set of credentials. Calling this method will generate a new set and
        invalidate any existing ones.
      operationId: GenerateCredentials
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A user ID
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageGenerateCredentialsResponse'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Create credentials
      tags:
      - User Credentials
  /storage/v1/stacks/{stack_id}/users/{user_id}/credentials/{access_key}:
    delete:
      operationId: DeleteCredential
      parameters:
      - description: A stack ID or slug
        explode: false
        in: path
        name: stack_id
        required: true
        schema:
          type: string
        style: simple
      - description: A user ID
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: A user's access key
        explode: false
        in: path
        name: access_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Returned when an unauthorized request is attempted.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Internal server error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stackpathapiStatus'
          description: Default error structure.
      summary: Delete credentials
      tags:
      - User Credentials
components:
  schemas:
    DataMatrix:
      description: A set of time series containing a range of data points over time
        for each time series
      example:
        results:
        - metric:
            key: metric
          values:
          - unixTime: unixTime
            value: value
          - unixTime: unixTime
            value: value
        - metric:
            key: metric
          values:
          - unixTime: unixTime
            value: value
          - unixTime: unixTime
            value: value
      properties:
        results:
          description: A data point's value
          items:
            $ref: '#/components/schemas/DataMatrixResult'
          type: array
      type: object
    DataMatrixResult:
      description: Time series containing a range of data points over time for each
        time series
      example:
        metric:
          key: metric
        values:
        - unixTime: unixTime
          value: value
        - unixTime: unixTime
          value: value
      properties:
        metric:
          additionalProperties:
            type: string
          description: The data points' labels
          type: object
        values:
          description: Time series data point values
          items:
            $ref: '#/components/schemas/DataValue'
          type: array
      type: object
    DataValue:
      description: An individual metric data point
      example:
        unixTime: unixTime
        value: value
      properties:
        unixTime:
          description: The time that a data point was recorded
          type: string
        value:
          description: A data point's value
          type: string
      type: object
    DataVector:
      description: A set of time series containing a single sample for each time series,
        all sharing the same timestamp
      example:
        results:
        - metric:
            key: metric
          value:
            unixTime: unixTime
            value: value
        - metric:
            key: metric
          value:
            unixTime: unixTime
            value: value
      properties:
        results:
          description: A data point's value
          items:
            $ref: '#/components/schemas/DataVectorResult'
          type: array
      type: object
    DataVectorResult:
      description: Time series containing a single sample for each time series, all
        sharing the same timestamp
      example:
        metric:
          key: metric
        value:
          unixTime: unixTime
          value: value
      properties:
        metric:
          additionalProperties:
            type: string
          description: The data points' labels
          type: object
        value:
          $ref: '#/components/schemas/DataValue'
      type: object
    GetCredentialsResponseCredential:
      description: Storage credentials for a user
      example:
        accessKey: accessKey
      properties:
        accessKey:
          description: The ID for the access key
          type: string
      type: object
    MetricsData:
      description: The data points in a metrics collection
      example:
        vector:
          results:
          - metric:
              key: metric
            value:
              unixTime: unixTime
              value: value
          - metric:
              key: metric
            value:
              unixTime: unixTime
              value: value
        matrix:
          results:
          - metric:
              key: metric
            values:
            - unixTime: unixTime
              value: value
            - unixTime: unixTime
              value: value
          - metric:
              key: metric
            values:
            - unixTime: unixTime
              value: value
            - unixTime: unixTime
              value: value
      properties:
        matrix:
          $ref: '#/components/schemas/DataMatrix'
        vector:
          $ref: '#/components/schemas/DataVector'
      type: object
    apiStatusDetail:
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          type: string
      required:
      - '@type'
      type: object
    paginationPageInfo:
      description: |-
        Information about a paginated response

        This is modeled after the GraphQL Relay spec to support both cursor based pagination and traditional offset based pagination.
      example:
        hasNextPage: true
        hasPreviousPage: true
        endCursor: endCursor
        totalCount: totalCount
        startCursor: startCursor
      properties:
        totalCount:
          description: The total number of items in the dataset
          type: string
        hasPreviousPage:
          description: Whether or not a previous page of data exists
          format: boolean
          type: boolean
        hasNextPage:
          description: Whether or not another page of data is available
          format: boolean
          type: boolean
        startCursor:
          description: The cursor for the first item in the set of data returned
          type: string
        endCursor:
          description: The cursor for the last item in the set of data returned
          type: string
      type: object
    prometheusMetrics:
      description: A collection of metrics
      example:
        data:
          vector:
            results:
            - metric:
                key: metric
              value:
                unixTime: unixTime
                value: value
            - metric:
                key: metric
              value:
                unixTime: unixTime
                value: value
          matrix:
            results:
            - metric:
                key: metric
              values:
              - unixTime: unixTime
                value: value
              - unixTime: unixTime
                value: value
            - metric:
                key: metric
              values:
              - unixTime: unixTime
                value: value
              - unixTime: unixTime
                value: value
        errorType: errorType
        warnings:
        - warnings
        - warnings
        error: error
      properties:
        status:
          $ref: '#/components/schemas/prometheusMetricsStatus'
        data:
          $ref: '#/components/schemas/MetricsData'
        errorType:
          description: The type of error encountered when querying for metrics
          type: string
        error:
          description: The error encountered when querying for metrics
          type: string
        warnings:
          description: Warnings encountered when querying for metrics
          items:
            type: string
          type: array
      type: object
    prometheusMetricsStatus:
      default: SUCCESS
      description: A metrics query's resulting status
      enum:
      - SUCCESS
      - ERROR
      type: string
    stackpath.rpc.BadRequest:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_BadRequest_allOf'
    stackpath.rpc.BadRequest.FieldViolation:
      properties:
        field:
          type: string
        description:
          type: string
      type: object
    stackpath.rpc.Help:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_Help_allOf'
    stackpath.rpc.Help.Link:
      properties:
        description:
          type: string
        url:
          type: string
      type: object
    stackpath.rpc.LocalizedMessage:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_LocalizedMessage_allOf'
    stackpath.rpc.PreconditionFailure:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_PreconditionFailure_allOf'
    stackpath.rpc.PreconditionFailure.Violation:
      properties:
        type:
          type: string
        subject:
          type: string
        description:
          type: string
      type: object
    stackpath.rpc.QuotaFailure:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_QuotaFailure_allOf'
    stackpath.rpc.QuotaFailure.Violation:
      properties:
        subject:
          type: string
        description:
          type: string
      type: object
    stackpath.rpc.RequestInfo:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_RequestInfo_allOf'
    stackpath.rpc.ResourceInfo:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_ResourceInfo_allOf'
    stackpath.rpc.RetryInfo:
      allOf:
      - $ref: '#/components/schemas/apiStatusDetail'
      - $ref: '#/components/schemas/stackpath_rpc_RetryInfo_allOf'
    stackpathapiStatus:
      properties:
        code:
          format: int32
          type: integer
        details:
          items:
            $ref: '#/components/schemas/apiStatusDetail'
          type: array
        message:
          type: string
      type: object
    storageBucket:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        endpointUrl: endpointUrl
        id: id
        label: label
        region: region
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: The ID for the bucket
          type: string
        label:
          description: The name of the bucket
          type: string
        endpointUrl:
          description: The URL used to access the bucket
          type: string
        visibility:
          $ref: '#/components/schemas/storageBucketVisibility'
        createdAt:
          description: The date when the bucket was created
          format: date-time
          type: string
        updatedAt:
          description: The date when the bucket was last updated
          format: date-time
          type: string
        region:
          description: 'The region in which the bucket is created. Available regions
            are: us-east-1, us-west-1, eu-central-1'
          type: string
      type: object
    storageBucketVisibility:
      default: PRIVATE
      description: |-
        - PRIVATE: The bucket is private and only accessibly with credentials
         - PUBLIC: The bucket is public and accessible over the internet
      enum:
      - PRIVATE
      - PUBLIC
      type: string
    storageCreateBucketRequest:
      properties:
        label:
          description: The name of the bucket to be created
          type: string
        region:
          description: The region where to create the bucket, defaults to us-east-1
          type: string
      type: object
    storageCreateBucketResponse:
      description: The bucket created
      example:
        bucket:
          createdAt: 2000-01-23T04:56:07.000+00:00
          endpointUrl: endpointUrl
          id: id
          label: label
          region: region
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        bucket:
          $ref: '#/components/schemas/storageBucket'
      type: object
    storageGenerateCredentialsResponse:
      description: A response with new credentials
      example:
        secretKey: secretKey
        accessKey: accessKey
      properties:
        accessKey:
          description: The ID for the access key
          type: string
        secretKey:
          description: The secret key used to sign requests
          type: string
      type: object
    storageGetBucketResponse:
      description: The bucket for the given stack
      example:
        bucket:
          createdAt: 2000-01-23T04:56:07.000+00:00
          endpointUrl: endpointUrl
          id: id
          label: label
          region: region
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        bucket:
          $ref: '#/components/schemas/storageBucket'
      type: object
    storageGetBucketsResponse:
      description: The buckets for the given stack
      example:
        pageInfo:
          hasNextPage: true
          hasPreviousPage: true
          endCursor: endCursor
          totalCount: totalCount
          startCursor: startCursor
        results:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          endpointUrl: endpointUrl
          id: id
          label: label
          region: region
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          endpointUrl: endpointUrl
          id: id
          label: label
          region: region
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        pageInfo:
          $ref: '#/components/schemas/paginationPageInfo'
        results:
          description: The requested buckets
          items:
            $ref: '#/components/schemas/storageBucket'
          type: array
      type: object
    storageGetCredentialsResponse:
      description: A response with new credentials
      example:
        credentials:
        - accessKey: accessKey
        - accessKey: accessKey
      properties:
        credentials:
          description: The list of active credentials on account
          items:
            $ref: '#/components/schemas/GetCredentialsResponseCredential'
          type: array
      type: object
    storageUpdateBucketRequest:
      properties:
        visibility:
          $ref: '#/components/schemas/storageBucketVisibility'
      type: object
    storageUpdateBucketResponse:
      description: A response of the updated bucket
      example:
        bucket:
          createdAt: 2000-01-23T04:56:07.000+00:00
          endpointUrl: endpointUrl
          id: id
          label: label
          region: region
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        bucket:
          $ref: '#/components/schemas/storageBucket'
      type: object
    stackpath_rpc_BadRequest_allOf:
      properties:
        fieldViolations:
          items:
            $ref: '#/components/schemas/stackpath.rpc.BadRequest.FieldViolation'
          type: array
    stackpath_rpc_Help_allOf:
      properties:
        links:
          items:
            $ref: '#/components/schemas/stackpath.rpc.Help.Link'
          type: array
    stackpath_rpc_LocalizedMessage_allOf:
      properties:
        locale:
          type: string
        message:
          type: string
    stackpath_rpc_PreconditionFailure_allOf:
      properties:
        violations:
          items:
            $ref: '#/components/schemas/stackpath.rpc.PreconditionFailure.Violation'
          type: array
    stackpath_rpc_QuotaFailure_allOf:
      properties:
        violations:
          items:
            $ref: '#/components/schemas/stackpath.rpc.QuotaFailure.Violation'
          type: array
    stackpath_rpc_RequestInfo_allOf:
      properties:
        requestId:
          type: string
        servingData:
          type: string
    stackpath_rpc_ResourceInfo_allOf:
      properties:
        resourceType:
          type: string
        resourceName:
          type: string
        owner:
          type: string
        description:
          type: string
    stackpath_rpc_RetryInfo_allOf:
      properties:
        retryDelay:
          type: string
  securitySchemes:
    oauth2:
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: https://gateway.stackpath.com/identity/v1/oauth2/token
      type: oauth2
x-explorer-enabled: true
x-proxy-enabled: true
x-samples-enabled: true
x-samples-languages:
- curl
- node
- ruby
- javascript
- python
