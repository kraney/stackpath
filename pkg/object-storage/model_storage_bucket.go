/*
 * Object Storage
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package object-storage

import (
	"encoding/json"
	"time"
)

// StorageBucket struct for StorageBucket
type StorageBucket struct {
	// The ID for the bucket
	Id *string `json:"id,omitempty"`
	// The name of the bucket
	Label *string `json:"label,omitempty"`
	// The URL used to access the bucket
	EndpointUrl *string `json:"endpointUrl,omitempty"`
	Visibility *StorageBucketVisibility `json:"visibility,omitempty"`
	// The date when the bucket was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The date when the bucket was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// The region in which the bucket is created. Available regions are: us-east-1, us-west-1, eu-central-1
	Region *string `json:"region,omitempty"`
}

// NewStorageBucket instantiates a new StorageBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageBucket() *StorageBucket {
	this := StorageBucket{}
	var visibility StorageBucketVisibility = "PRIVATE"
	this.Visibility = &visibility
	return &this
}

// NewStorageBucketWithDefaults instantiates a new StorageBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageBucketWithDefaults() *StorageBucket {
	this := StorageBucket{}
	var visibility StorageBucketVisibility = "PRIVATE"
	this.Visibility = &visibility
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StorageBucket) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StorageBucket) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StorageBucket) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *StorageBucket) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *StorageBucket) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *StorageBucket) SetLabel(v string) {
	o.Label = &v
}

// GetEndpointUrl returns the EndpointUrl field value if set, zero value otherwise.
func (o *StorageBucket) GetEndpointUrl() string {
	if o == nil || o.EndpointUrl == nil {
		var ret string
		return ret
	}
	return *o.EndpointUrl
}

// GetEndpointUrlOk returns a tuple with the EndpointUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetEndpointUrlOk() (*string, bool) {
	if o == nil || o.EndpointUrl == nil {
		return nil, false
	}
	return o.EndpointUrl, true
}

// HasEndpointUrl returns a boolean if a field has been set.
func (o *StorageBucket) HasEndpointUrl() bool {
	if o != nil && o.EndpointUrl != nil {
		return true
	}

	return false
}

// SetEndpointUrl gets a reference to the given string and assigns it to the EndpointUrl field.
func (o *StorageBucket) SetEndpointUrl(v string) {
	o.EndpointUrl = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *StorageBucket) GetVisibility() StorageBucketVisibility {
	if o == nil || o.Visibility == nil {
		var ret StorageBucketVisibility
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetVisibilityOk() (*StorageBucketVisibility, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *StorageBucket) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given StorageBucketVisibility and assigns it to the Visibility field.
func (o *StorageBucket) SetVisibility(v StorageBucketVisibility) {
	o.Visibility = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *StorageBucket) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *StorageBucket) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *StorageBucket) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *StorageBucket) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *StorageBucket) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *StorageBucket) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *StorageBucket) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageBucket) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *StorageBucket) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *StorageBucket) SetRegion(v string) {
	o.Region = &v
}

func (o StorageBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.EndpointUrl != nil {
		toSerialize["endpointUrl"] = o.EndpointUrl
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	return json.Marshal(toSerialize)
}

type NullableStorageBucket struct {
	value *StorageBucket
	isSet bool
}

func (v NullableStorageBucket) Get() *StorageBucket {
	return v.value
}

func (v *NullableStorageBucket) Set(val *StorageBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageBucket(val *StorageBucket) *NullableStorageBucket {
	return &NullableStorageBucket{value: val, isSet: true}
}

func (v NullableStorageBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
