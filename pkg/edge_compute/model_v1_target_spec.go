/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge_compute

import (
	"encoding/json"
)

// V1TargetSpec The specification for a target
type V1TargetSpec struct {
	// The scope at which a deployment should be created. Valid values are: \"cityCode\"
	DeploymentScope *string `json:"deploymentScope,omitempty"`
	Deployments *V1DeploymentSpec `json:"deployments,omitempty"`
}

// NewV1TargetSpec instantiates a new V1TargetSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1TargetSpec() *V1TargetSpec {
	this := V1TargetSpec{}
	return &this
}

// NewV1TargetSpecWithDefaults instantiates a new V1TargetSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TargetSpecWithDefaults() *V1TargetSpec {
	this := V1TargetSpec{}
	return &this
}

// GetDeploymentScope returns the DeploymentScope field value if set, zero value otherwise.
func (o *V1TargetSpec) GetDeploymentScope() string {
	if o == nil || o.DeploymentScope == nil {
		var ret string
		return ret
	}
	return *o.DeploymentScope
}

// GetDeploymentScopeOk returns a tuple with the DeploymentScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TargetSpec) GetDeploymentScopeOk() (*string, bool) {
	if o == nil || o.DeploymentScope == nil {
		return nil, false
	}
	return o.DeploymentScope, true
}

// HasDeploymentScope returns a boolean if a field has been set.
func (o *V1TargetSpec) HasDeploymentScope() bool {
	if o != nil && o.DeploymentScope != nil {
		return true
	}

	return false
}

// SetDeploymentScope gets a reference to the given string and assigns it to the DeploymentScope field.
func (o *V1TargetSpec) SetDeploymentScope(v string) {
	o.DeploymentScope = &v
}

// GetDeployments returns the Deployments field value if set, zero value otherwise.
func (o *V1TargetSpec) GetDeployments() V1DeploymentSpec {
	if o == nil || o.Deployments == nil {
		var ret V1DeploymentSpec
		return ret
	}
	return *o.Deployments
}

// GetDeploymentsOk returns a tuple with the Deployments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TargetSpec) GetDeploymentsOk() (*V1DeploymentSpec, bool) {
	if o == nil || o.Deployments == nil {
		return nil, false
	}
	return o.Deployments, true
}

// HasDeployments returns a boolean if a field has been set.
func (o *V1TargetSpec) HasDeployments() bool {
	if o != nil && o.Deployments != nil {
		return true
	}

	return false
}

// SetDeployments gets a reference to the given V1DeploymentSpec and assigns it to the Deployments field.
func (o *V1TargetSpec) SetDeployments(v V1DeploymentSpec) {
	o.Deployments = &v
}

func (o V1TargetSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeploymentScope != nil {
		toSerialize["deploymentScope"] = o.DeploymentScope
	}
	if o.Deployments != nil {
		toSerialize["deployments"] = o.Deployments
	}
	return json.Marshal(toSerialize)
}

type NullableV1TargetSpec struct {
	value *V1TargetSpec
	isSet bool
}

func (v NullableV1TargetSpec) Get() *V1TargetSpec {
	return v.value
}

func (v *NullableV1TargetSpec) Set(val *V1TargetSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TargetSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TargetSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TargetSpec(val *V1TargetSpec) *NullableV1TargetSpec {
	return &NullableV1TargetSpec{value: val, isSet: true}
}

func (v NullableV1TargetSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TargetSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
