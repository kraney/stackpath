/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge_compute

import (
	"encoding/json"
)

// V1Target How instances in a workload should be deployed
type V1Target struct {
	Spec *V1TargetSpec `json:"spec,omitempty"`
}

// NewV1Target instantiates a new V1Target object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Target() *V1Target {
	this := V1Target{}
	return &this
}

// NewV1TargetWithDefaults instantiates a new V1Target object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TargetWithDefaults() *V1Target {
	this := V1Target{}
	return &this
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *V1Target) GetSpec() V1TargetSpec {
	if o == nil || o.Spec == nil {
		var ret V1TargetSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Target) GetSpecOk() (*V1TargetSpec, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *V1Target) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given V1TargetSpec and assigns it to the Spec field.
func (o *V1Target) SetSpec(v V1TargetSpec) {
	o.Spec = &v
}

func (o V1Target) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullableV1Target struct {
	value *V1Target
	isSet bool
}

func (v NullableV1Target) Get() *V1Target {
	return v.value
}

func (v *NullableV1Target) Set(val *V1Target) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Target) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Target) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Target(val *V1Target) *NullableV1Target {
	return &NullableV1Target{value: val, isSet: true}
}

func (v NullableV1Target) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Target) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
