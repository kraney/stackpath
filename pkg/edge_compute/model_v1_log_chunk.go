/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge_compute

import (
	"encoding/json"
)

// V1LogChunk A chunk of raw log data
type V1LogChunk struct {
	// Raw log contents
	Bytes *string `json:"bytes,omitempty"`
}

// NewV1LogChunk instantiates a new V1LogChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1LogChunk() *V1LogChunk {
	this := V1LogChunk{}
	return &this
}

// NewV1LogChunkWithDefaults instantiates a new V1LogChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1LogChunkWithDefaults() *V1LogChunk {
	this := V1LogChunk{}
	return &this
}

// GetBytes returns the Bytes field value if set, zero value otherwise.
func (o *V1LogChunk) GetBytes() string {
	if o == nil || o.Bytes == nil {
		var ret string
		return ret
	}
	return *o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LogChunk) GetBytesOk() (*string, bool) {
	if o == nil || o.Bytes == nil {
		return nil, false
	}
	return o.Bytes, true
}

// HasBytes returns a boolean if a field has been set.
func (o *V1LogChunk) HasBytes() bool {
	if o != nil && o.Bytes != nil {
		return true
	}

	return false
}

// SetBytes gets a reference to the given string and assigns it to the Bytes field.
func (o *V1LogChunk) SetBytes(v string) {
	o.Bytes = &v
}

func (o V1LogChunk) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bytes != nil {
		toSerialize["bytes"] = o.Bytes
	}
	return json.Marshal(toSerialize)
}

type NullableV1LogChunk struct {
	value *V1LogChunk
	isSet bool
}

func (v NullableV1LogChunk) Get() *V1LogChunk {
	return v.value
}

func (v *NullableV1LogChunk) Set(val *V1LogChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableV1LogChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableV1LogChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1LogChunk(val *V1LogChunk) *NullableV1LogChunk {
	return &NullableV1LogChunk{value: val, isSet: true}
}

func (v NullableV1LogChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1LogChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
