/*
 * Edge Compute
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge_compute

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// MetricsApiService MetricsApi service
type MetricsApiService service

type apiGetMetricsRequest struct {
	ctx _context.Context
	apiService *MetricsApiService
	stackId string
	workloadId *string
	startDate *time.Time
	endDate *time.Time
	type_ *string
	granularity *string
	instanceName *string
	pop *string
	region *string
	groupBy *string
	grouping *[]string
}


func (r apiGetMetricsRequest) WorkloadId(workloadId string) apiGetMetricsRequest {
	r.workloadId = &workloadId
	return r
}

func (r apiGetMetricsRequest) StartDate(startDate time.Time) apiGetMetricsRequest {
	r.startDate = &startDate
	return r
}

func (r apiGetMetricsRequest) EndDate(endDate time.Time) apiGetMetricsRequest {
	r.endDate = &endDate
	return r
}

func (r apiGetMetricsRequest) Type_(type_ string) apiGetMetricsRequest {
	r.type_ = &type_
	return r
}

func (r apiGetMetricsRequest) Granularity(granularity string) apiGetMetricsRequest {
	r.granularity = &granularity
	return r
}

func (r apiGetMetricsRequest) InstanceName(instanceName string) apiGetMetricsRequest {
	r.instanceName = &instanceName
	return r
}

func (r apiGetMetricsRequest) Pop(pop string) apiGetMetricsRequest {
	r.pop = &pop
	return r
}

func (r apiGetMetricsRequest) Region(region string) apiGetMetricsRequest {
	r.region = &region
	return r
}

func (r apiGetMetricsRequest) GroupBy(groupBy string) apiGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

func (r apiGetMetricsRequest) Grouping(grouping []string) apiGetMetricsRequest {
	r.grouping = &grouping
	return r
}

/*
GetMetrics Get metrics
Retrieve usage metrics for all workloads in a stack, a specific workload, or a specific instance in a workload
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param stackId A stack ID or slug
@return apiGetMetricsRequest
*/
func (a *MetricsApiService) GetMetrics(ctx _context.Context, stackId string) apiGetMetricsRequest {
	return apiGetMetricsRequest{
		apiService: a,
		ctx: ctx,
		stackId: stackId,
	}
}

/*
Execute executes the request
 @return PrometheusMetrics
*/
func (r apiGetMetricsRequest) Execute() (PrometheusMetrics, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PrometheusMetrics
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "MetricsApiService.GetMetrics")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workload/v1/stacks/{stack_id}/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"stack_id"+"}", _neturl.QueryEscape(parameterToString(r.stackId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
										
	if r.workloadId != nil {
		localVarQueryParams.Add("workload_id", parameterToString(*r.workloadId, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("start_date", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("end_date", parameterToString(*r.endDate, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.granularity != nil {
		localVarQueryParams.Add("granularity", parameterToString(*r.granularity, ""))
	}
	if r.instanceName != nil {
		localVarQueryParams.Add("instance_name", parameterToString(*r.instanceName, ""))
	}
	if r.pop != nil {
		localVarQueryParams.Add("pop", parameterToString(*r.pop, ""))
	}
	if r.region != nil {
		localVarQueryParams.Add("region", parameterToString(*r.region, ""))
	}
	if r.groupBy != nil {
		localVarQueryParams.Add("group_by", parameterToString(*r.groupBy, ""))
	}
	if r.grouping != nil {
		t := *r.grouping
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
			var v StackpathapiStatus
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
