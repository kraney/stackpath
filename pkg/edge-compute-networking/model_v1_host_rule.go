/*
 * Edge Compute Networking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge-compute-networking

import (
	"encoding/json"
)

// V1HostRule Defines IPs, instances, or networks
type V1HostRule struct {
	// List of ip blocks
	IpBlock *[]V1IpBlock `json:"ipBlock,omitempty"`
	// List of instance selectors
	InstanceSelectors *[]V1MatchExpression `json:"instanceSelectors,omitempty"`
	// List of network selectors
	NetworkSelectors *[]V1MatchExpression `json:"networkSelectors,omitempty"`
}

// NewV1HostRule instantiates a new V1HostRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1HostRule() *V1HostRule {
	this := V1HostRule{}
	return &this
}

// NewV1HostRuleWithDefaults instantiates a new V1HostRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1HostRuleWithDefaults() *V1HostRule {
	this := V1HostRule{}
	return &this
}

// GetIpBlock returns the IpBlock field value if set, zero value otherwise.
func (o *V1HostRule) GetIpBlock() []V1IpBlock {
	if o == nil || o.IpBlock == nil {
		var ret []V1IpBlock
		return ret
	}
	return *o.IpBlock
}

// GetIpBlockOk returns a tuple with the IpBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HostRule) GetIpBlockOk() (*[]V1IpBlock, bool) {
	if o == nil || o.IpBlock == nil {
		return nil, false
	}
	return o.IpBlock, true
}

// HasIpBlock returns a boolean if a field has been set.
func (o *V1HostRule) HasIpBlock() bool {
	if o != nil && o.IpBlock != nil {
		return true
	}

	return false
}

// SetIpBlock gets a reference to the given []V1IpBlock and assigns it to the IpBlock field.
func (o *V1HostRule) SetIpBlock(v []V1IpBlock) {
	o.IpBlock = &v
}

// GetInstanceSelectors returns the InstanceSelectors field value if set, zero value otherwise.
func (o *V1HostRule) GetInstanceSelectors() []V1MatchExpression {
	if o == nil || o.InstanceSelectors == nil {
		var ret []V1MatchExpression
		return ret
	}
	return *o.InstanceSelectors
}

// GetInstanceSelectorsOk returns a tuple with the InstanceSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HostRule) GetInstanceSelectorsOk() (*[]V1MatchExpression, bool) {
	if o == nil || o.InstanceSelectors == nil {
		return nil, false
	}
	return o.InstanceSelectors, true
}

// HasInstanceSelectors returns a boolean if a field has been set.
func (o *V1HostRule) HasInstanceSelectors() bool {
	if o != nil && o.InstanceSelectors != nil {
		return true
	}

	return false
}

// SetInstanceSelectors gets a reference to the given []V1MatchExpression and assigns it to the InstanceSelectors field.
func (o *V1HostRule) SetInstanceSelectors(v []V1MatchExpression) {
	o.InstanceSelectors = &v
}

// GetNetworkSelectors returns the NetworkSelectors field value if set, zero value otherwise.
func (o *V1HostRule) GetNetworkSelectors() []V1MatchExpression {
	if o == nil || o.NetworkSelectors == nil {
		var ret []V1MatchExpression
		return ret
	}
	return *o.NetworkSelectors
}

// GetNetworkSelectorsOk returns a tuple with the NetworkSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HostRule) GetNetworkSelectorsOk() (*[]V1MatchExpression, bool) {
	if o == nil || o.NetworkSelectors == nil {
		return nil, false
	}
	return o.NetworkSelectors, true
}

// HasNetworkSelectors returns a boolean if a field has been set.
func (o *V1HostRule) HasNetworkSelectors() bool {
	if o != nil && o.NetworkSelectors != nil {
		return true
	}

	return false
}

// SetNetworkSelectors gets a reference to the given []V1MatchExpression and assigns it to the NetworkSelectors field.
func (o *V1HostRule) SetNetworkSelectors(v []V1MatchExpression) {
	o.NetworkSelectors = &v
}

func (o V1HostRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpBlock != nil {
		toSerialize["ipBlock"] = o.IpBlock
	}
	if o.InstanceSelectors != nil {
		toSerialize["instanceSelectors"] = o.InstanceSelectors
	}
	if o.NetworkSelectors != nil {
		toSerialize["networkSelectors"] = o.NetworkSelectors
	}
	return json.Marshal(toSerialize)
}

type NullableV1HostRule struct {
	value *V1HostRule
	isSet bool
}

func (v NullableV1HostRule) Get() *V1HostRule {
	return v.value
}

func (v *NullableV1HostRule) Set(val *V1HostRule) {
	v.value = val
	v.isSet = true
}

func (v NullableV1HostRule) IsSet() bool {
	return v.isSet
}

func (v *NullableV1HostRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1HostRule(val *V1HostRule) *NullableV1HostRule {
	return &NullableV1HostRule{value: val, isSet: true}
}

func (v NullableV1HostRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1HostRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
