/*
 * Edge Compute Networking
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package edge-compute-networking

import (
	"encoding/json"
)

// V1Protocols An object of all supported protocols and any attributes for them
type V1Protocols struct {
	Tcp *V1ProtocolTcp `json:"tcp,omitempty"`
	Udp *V1ProtocolUdp `json:"udp,omitempty"`
	TcpUdp *V1ProtocolTcpUdp `json:"tcpUdp,omitempty"`
	// ICMP protocol matching
	Icmp *map[string]interface{} `json:"icmp,omitempty"`
	// Authentication Header (AH) protocol matching
	Ah *map[string]interface{} `json:"ah,omitempty"`
	// Encapsulating Security Payload (ESP) protocol matching
	Esp *map[string]interface{} `json:"esp,omitempty"`
	// Generic Routing Encapsulation (GRE) protocol matching
	Gre *map[string]interface{} `json:"gre,omitempty"`
}

// NewV1Protocols instantiates a new V1Protocols object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Protocols() *V1Protocols {
	this := V1Protocols{}
	return &this
}

// NewV1ProtocolsWithDefaults instantiates a new V1Protocols object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ProtocolsWithDefaults() *V1Protocols {
	this := V1Protocols{}
	return &this
}

// GetTcp returns the Tcp field value if set, zero value otherwise.
func (o *V1Protocols) GetTcp() V1ProtocolTcp {
	if o == nil || o.Tcp == nil {
		var ret V1ProtocolTcp
		return ret
	}
	return *o.Tcp
}

// GetTcpOk returns a tuple with the Tcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Protocols) GetTcpOk() (*V1ProtocolTcp, bool) {
	if o == nil || o.Tcp == nil {
		return nil, false
	}
	return o.Tcp, true
}

// HasTcp returns a boolean if a field has been set.
func (o *V1Protocols) HasTcp() bool {
	if o != nil && o.Tcp != nil {
		return true
	}

	return false
}

// SetTcp gets a reference to the given V1ProtocolTcp and assigns it to the Tcp field.
func (o *V1Protocols) SetTcp(v V1ProtocolTcp) {
	o.Tcp = &v
}

// GetUdp returns the Udp field value if set, zero value otherwise.
func (o *V1Protocols) GetUdp() V1ProtocolUdp {
	if o == nil || o.Udp == nil {
		var ret V1ProtocolUdp
		return ret
	}
	return *o.Udp
}

// GetUdpOk returns a tuple with the Udp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Protocols) GetUdpOk() (*V1ProtocolUdp, bool) {
	if o == nil || o.Udp == nil {
		return nil, false
	}
	return o.Udp, true
}

// HasUdp returns a boolean if a field has been set.
func (o *V1Protocols) HasUdp() bool {
	if o != nil && o.Udp != nil {
		return true
	}

	return false
}

// SetUdp gets a reference to the given V1ProtocolUdp and assigns it to the Udp field.
func (o *V1Protocols) SetUdp(v V1ProtocolUdp) {
	o.Udp = &v
}

// GetTcpUdp returns the TcpUdp field value if set, zero value otherwise.
func (o *V1Protocols) GetTcpUdp() V1ProtocolTcpUdp {
	if o == nil || o.TcpUdp == nil {
		var ret V1ProtocolTcpUdp
		return ret
	}
	return *o.TcpUdp
}

// GetTcpUdpOk returns a tuple with the TcpUdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Protocols) GetTcpUdpOk() (*V1ProtocolTcpUdp, bool) {
	if o == nil || o.TcpUdp == nil {
		return nil, false
	}
	return o.TcpUdp, true
}

// HasTcpUdp returns a boolean if a field has been set.
func (o *V1Protocols) HasTcpUdp() bool {
	if o != nil && o.TcpUdp != nil {
		return true
	}

	return false
}

// SetTcpUdp gets a reference to the given V1ProtocolTcpUdp and assigns it to the TcpUdp field.
func (o *V1Protocols) SetTcpUdp(v V1ProtocolTcpUdp) {
	o.TcpUdp = &v
}

// GetIcmp returns the Icmp field value if set, zero value otherwise.
func (o *V1Protocols) GetIcmp() map[string]interface{} {
	if o == nil || o.Icmp == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Icmp
}

// GetIcmpOk returns a tuple with the Icmp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Protocols) GetIcmpOk() (*map[string]interface{}, bool) {
	if o == nil || o.Icmp == nil {
		return nil, false
	}
	return o.Icmp, true
}

// HasIcmp returns a boolean if a field has been set.
func (o *V1Protocols) HasIcmp() bool {
	if o != nil && o.Icmp != nil {
		return true
	}

	return false
}

// SetIcmp gets a reference to the given map[string]interface{} and assigns it to the Icmp field.
func (o *V1Protocols) SetIcmp(v map[string]interface{}) {
	o.Icmp = &v
}

// GetAh returns the Ah field value if set, zero value otherwise.
func (o *V1Protocols) GetAh() map[string]interface{} {
	if o == nil || o.Ah == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Ah
}

// GetAhOk returns a tuple with the Ah field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Protocols) GetAhOk() (*map[string]interface{}, bool) {
	if o == nil || o.Ah == nil {
		return nil, false
	}
	return o.Ah, true
}

// HasAh returns a boolean if a field has been set.
func (o *V1Protocols) HasAh() bool {
	if o != nil && o.Ah != nil {
		return true
	}

	return false
}

// SetAh gets a reference to the given map[string]interface{} and assigns it to the Ah field.
func (o *V1Protocols) SetAh(v map[string]interface{}) {
	o.Ah = &v
}

// GetEsp returns the Esp field value if set, zero value otherwise.
func (o *V1Protocols) GetEsp() map[string]interface{} {
	if o == nil || o.Esp == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Esp
}

// GetEspOk returns a tuple with the Esp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Protocols) GetEspOk() (*map[string]interface{}, bool) {
	if o == nil || o.Esp == nil {
		return nil, false
	}
	return o.Esp, true
}

// HasEsp returns a boolean if a field has been set.
func (o *V1Protocols) HasEsp() bool {
	if o != nil && o.Esp != nil {
		return true
	}

	return false
}

// SetEsp gets a reference to the given map[string]interface{} and assigns it to the Esp field.
func (o *V1Protocols) SetEsp(v map[string]interface{}) {
	o.Esp = &v
}

// GetGre returns the Gre field value if set, zero value otherwise.
func (o *V1Protocols) GetGre() map[string]interface{} {
	if o == nil || o.Gre == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Gre
}

// GetGreOk returns a tuple with the Gre field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Protocols) GetGreOk() (*map[string]interface{}, bool) {
	if o == nil || o.Gre == nil {
		return nil, false
	}
	return o.Gre, true
}

// HasGre returns a boolean if a field has been set.
func (o *V1Protocols) HasGre() bool {
	if o != nil && o.Gre != nil {
		return true
	}

	return false
}

// SetGre gets a reference to the given map[string]interface{} and assigns it to the Gre field.
func (o *V1Protocols) SetGre(v map[string]interface{}) {
	o.Gre = &v
}

func (o V1Protocols) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tcp != nil {
		toSerialize["tcp"] = o.Tcp
	}
	if o.Udp != nil {
		toSerialize["udp"] = o.Udp
	}
	if o.TcpUdp != nil {
		toSerialize["tcpUdp"] = o.TcpUdp
	}
	if o.Icmp != nil {
		toSerialize["icmp"] = o.Icmp
	}
	if o.Ah != nil {
		toSerialize["ah"] = o.Ah
	}
	if o.Esp != nil {
		toSerialize["esp"] = o.Esp
	}
	if o.Gre != nil {
		toSerialize["gre"] = o.Gre
	}
	return json.Marshal(toSerialize)
}

type NullableV1Protocols struct {
	value *V1Protocols
	isSet bool
}

func (v NullableV1Protocols) Get() *V1Protocols {
	return v.value
}

func (v *NullableV1Protocols) Set(val *V1Protocols) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Protocols) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Protocols) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Protocols(val *V1Protocols) *NullableV1Protocols {
	return &NullableV1Protocols{value: val, isSet: true}
}

func (v NullableV1Protocols) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Protocols) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
