{
  "openapi": "3.0.0",
  "info": {
    "title": "SSL",
    "version": "1.0.0",
    "contact": {
      "name": "StackPath Support",
      "url": "https://support.stackpath.com/"
    }
  },
  "paths": {
    "/ssl/v1/stacks/{stack_id}/certificates": {
      "get": {
        "operationId": "GetCertificates",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificateGetCertificatesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "description": "A stack ID or slug",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.first",
            "description": "The number of items desired.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.after",
            "description": "The cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.filter",
            "description": "SQL-style constraint filters.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.sort_by",
            "description": "Sort the response by the given field.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Certificates"
        ],
        "summary": "Get all certificates"
      }
    },
    "/ssl/v1/stacks/{stack_id}/certificates/{certificate_id}": {
      "get": {
        "operationId": "GetCertificate",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificateGetCertificateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "description": "A stack ID or slug",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "description": "A certificate ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Certificates"
        ],
        "summary": "Get a certificate"
      },
      "delete": {
        "operationId": "DeleteCertificate",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "description": "A stack ID or slug",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "description": "A certificate ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Certificates"
        ],
        "summary": "Delete a certificate"
      },
      "patch": {
        "operationId": "UpdateCertificate",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificateUpdateCertificateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "description": "A stack ID or slug",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "description": "A certificate ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/certificateUpdateCertificateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Certificates"
        ],
        "summary": "Update a certificate",
        "description": "Updating a certificate creates a new CSR and issues a new certificate."
      }
    },
    "/ssl/v1/stacks/{stack_id}/certificates/{certificate_id}/latest": {
      "get": {
        "operationId": "GetLatestCertificate",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificateGetLatestCertificateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "description": "A stack ID or slug",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "description": "A certificate ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Certificates"
        ],
        "summary": "Get a certificate's latest version"
      }
    },
    "/ssl/v1/stacks/{stack_id}/certificates/{certificate_id}/renew": {
      "post": {
        "operationId": "RenewCertificate",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificateRenewCertificateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "description": "A stack ID or slug",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "description": "A certificate ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Certificates"
        ],
        "summary": "Renew a certificate"
      }
    },
    "/ssl/v1/stacks/{stack_id}/certificates/{certificate_id}/revoke": {
      "post": {
        "operationId": "RevokeCertificate",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "description": "A stack ID or slug",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "description": "A certificate ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Certificates"
        ],
        "summary": "Revoke a certificate"
      }
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "externalDocs": {
    "description": "The StackPath API Reference",
    "url": "https://stackpath.dev/reference"
  },
  "x-explorer-enabled": true,
  "x-proxy-enabled": true,
  "x-samples-enabled": true,
  "x-samples-languages": [
    "curl",
    "node",
    "ruby",
    "javascript",
    "python"
  ],
  "servers": [
    {
      "url": "https://gateway.stackpath.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://gateway.stackpath.com/identity/v1/oauth2/token",
            "scopes": {}
          }
        }
      }
    },
    "schemas": {
      "apiStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiStatusDetail"
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "apiStatusDetail": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string"
          }
        },
        "required": [
          "@type"
        ],
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "certificateCertificate": {
        "type": "object",
        "properties": {
          "stackId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "hosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string"
          },
          "certificate": {
            "type": "string"
          },
          "caBundle": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/certificateCertificateStatus"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "certificateCertificateStatus": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "PENDING",
          "COMPLETE",
          "EXPIRED",
          "FAILED",
          "PENDING_VERIFICATION",
          "REVOKED"
        ],
        "default": "UNKNOWN"
      },
      "certificateCertificateVerificationMethod": {
        "type": "string",
        "enum": [
          "DNS",
          "HTTP"
        ],
        "default": "DNS"
      },
      "certificateDnsRecord": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the network node to which a zone resource record pertains\n\nUse the value \"@\" to denote current root domain name."
          },
          "type": {
            "type": "string",
            "description": "A zone record's type\n\nZone record types describe the zone record's behavior. For instance, a zone record's type can say that the record is a name to IP address value, a name alias, or which mail exchanger is responsible for the domain. See https://support.stackpath.com/hc/en-us/articles/360001085563-What-DNS-record-types-does-StackPath-support for more information."
          },
          "class": {
            "type": "string",
            "description": "A zone record's class code\n\nThis is typically \"IN\" for Internet related resource records."
          },
          "ttl": {
            "type": "integer",
            "format": "int32",
            "description": "A zone record's time to live\n\nA record's TTL is the number of seconds that the record should be cached by DNS resolvers. Use lower TTL values if you expect zone records to change often. Use higher TTL values for records that won't change to prevent extra DNS lookups by clients."
          },
          "data": {
            "type": "string",
            "description": "A zone record's value\n\nExpected data formats can vary depending on the zone record's type."
          }
        },
        "description": "A DNS record\n\nA dns record describes an individual piece of DNS functionality in a DNS zone."
      },
      "certificateDnsVerificationDetails": {
        "type": "object",
        "properties": {
          "dnsRecords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of bind formatted dns records required for SSL verification"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/certificateDnsRecord"
            },
            "description": "A list of parsed dns records required for SSL verification"
          }
        }
      },
      "certificateGetCertificateResponse": {
        "type": "object",
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/certificateCertificate"
          }
        }
      },
      "certificateGetCertificatesResponse": {
        "type": "object",
        "properties": {
          "pageInfo": {
            "$ref": "#/components/schemas/paginationPageInfo"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/certificateCertificate"
            }
          }
        }
      },
      "certificateGetLatestCertificateResponse": {
        "type": "object",
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/certificateCertificate"
          }
        }
      },
      "certificateHttpVerificationDetails": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "certificateRenewCertificateResponse": {
        "type": "object",
        "properties": {
          "certificateId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/certificateCertificateStatus"
          },
          "verificationRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/certificateVerificationRequirements"
            }
          }
        }
      },
      "certificateUpdateCertificateRequest": {
        "type": "object",
        "properties": {
          "commonName": {
            "type": "string"
          },
          "hosts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization": {
            "type": "string"
          },
          "organizationalUnit": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        }
      },
      "certificateUpdateCertificateResponse": {
        "type": "object",
        "properties": {
          "certificateId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/certificateCertificateStatus"
          },
          "verificationRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/certificateVerificationRequirements"
            }
          }
        }
      },
      "certificateVerificationRequirements": {
        "type": "object",
        "properties": {
          "dnsVerificationDetails": {
            "$ref": "#/components/schemas/certificateDnsVerificationDetails"
          },
          "httpVerificationDetails": {
            "$ref": "#/components/schemas/certificateHttpVerificationDetails"
          },
          "verificationMethod": {
            "$ref": "#/components/schemas/certificateCertificateVerificationMethod"
          }
        }
      },
      "paginationPageInfo": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "string",
            "description": "The total number of items in the dataset"
          },
          "hasPreviousPage": {
            "type": "boolean",
            "format": "boolean",
            "description": "Whether or not a previous page of data exists"
          },
          "hasNextPage": {
            "type": "boolean",
            "format": "boolean",
            "description": "Whether or not another page of data is available"
          },
          "startCursor": {
            "type": "string",
            "description": "The cursor for the first item in the set of data returned"
          },
          "endCursor": {
            "type": "string",
            "description": "The cursor for the last item in the set of data returned"
          }
        },
        "description": "Information about a paginated response\n\nThis is modeled after the GraphQL Relay spec to support both cursor based pagination and traditional offset based pagination."
      },
      "stackpath.rpc.BadRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "fieldViolations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.BadRequest.FieldViolation"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.BadRequest.FieldViolation": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.Help": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "links": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.Help.Link"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.Help.Link": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.LocalizedMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "locale": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpath.rpc.PreconditionFailure": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "violations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.PreconditionFailure.Violation"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.PreconditionFailure.Violation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.QuotaFailure": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "violations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.QuotaFailure.Violation"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.QuotaFailure.Violation": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.RequestInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "requestId": {
                "type": "string"
              },
              "servingData": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpath.rpc.ResourceInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string"
              },
              "resourceName": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpath.rpc.RetryInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "retryDelay": {
                "type": "string"
              }
            }
          }
        ]
      }
    }
  }
}
