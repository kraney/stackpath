{
  "openapi": "3.0.0",
  "info": {
    "title": "Stacks",
    "version": "1.0.0",
    "contact": {
      "name": "StackPath Support",
      "url": "https://support.stackpath.com/"
    }
  },
  "paths": {
    "/stack/v1/stacks": {
      "get": {
        "summary": "Get all stacks",
        "operationId": "GetStacks",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackGetStacksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page_request.first",
            "description": "The number of items desired.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.after",
            "description": "The cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.filter",
            "description": "SQL-style constraint filters.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.sort_by",
            "description": "Sort the response by the given field.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "description": "An account ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Stacks"
        ]
      },
      "post": {
        "summary": "Create a stack",
        "operationId": "CreateStack",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackCreateStackResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stackCreateStackRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Stacks"
        ]
      }
    },
    "/stack/v1/stacks/{stack_id}": {
      "get": {
        "summary": "Get a stack",
        "operationId": "GetStack",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackStack"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "description": "A stack ID or slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Stacks"
        ]
      },
      "patch": {
        "summary": "Update a stack",
        "operationId": "UpdateStack2",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackUpdateStackResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "description": "A stack ID or slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stackUpdateStackRequest2"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Stacks"
        ]
      }
    },
    "/stack/v1/stacks/{stack_id}/iam/policy": {
      "get": {
        "summary": "Get a stack's IAM policy",
        "operationId": "GetIAMPolicy",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackGetIAMPolicyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "description": "A stack ID or slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Stack Policies"
        ]
      },
      "delete": {
        "summary": "Delete a stack's IAM policy",
        "operationId": "DeleteIAMPolicy",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "description": "A stack ID or slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Stack Policies"
        ]
      },
      "put": {
        "summary": "Set a stack's IAM policy",
        "operationId": "SetIAMPolicy",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackSetIAMPolicyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "description": "A stack ID or slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stackSetIAMPolicyRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Stack Policies"
        ]
      }
    },
    "/stack/v1/stacks/{stack_id}/iam/test": {
      "post": {
        "summary": "Test stack policies",
        "operationId": "TestIAMPermissions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackTestIAMPermissionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "description": "A stack ID or slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stackTestIAMPermissionsRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Stack Policies"
        ]
      }
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "externalDocs": {
    "description": "The StackPath API Reference",
    "url": "https://stackpath.dev/reference"
  },
  "x-explorer-enabled": true,
  "x-proxy-enabled": true,
  "x-samples-enabled": true,
  "x-samples-languages": [
    "curl",
    "node",
    "ruby",
    "javascript",
    "python"
  ],
  "servers": [
    {
      "url": "https://gateway.stackpath.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://gateway.stackpath.com/identity/v1/oauth2/token",
            "scopes": {}
          }
        }
      }
    },
    "schemas": {
      "stackUpdateStackRequest2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The stack's new name"
          }
        }
      },
      "PolicyBinding": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The name of the role for this binding.\n\nThis is either roles/<name> or accounts/<id>/roles/<name>."
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The members assigned to the roles in this binding.\n\nThis is user:<name>."
          }
        },
        "description": "An assignment of members to roles"
      },
      "apiStatusDetail": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string"
          }
        },
        "required": [
          "@type"
        ],
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "iamPolicy": {
        "type": "object",
        "properties": {
          "bindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyBinding"
            },
            "description": "Bindings to assign members to roles"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "description": "The current update number used to ensure updates happen to the expected version.\n\nOn first update this must be 0 and on each successive update this must be the last known version. When getting or as the result of a set, this will be the current version."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this policy was created.\n\nAlways present on get, ignored on set.",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this policy was last updated.\n\nCould be absent on get if not updated since initial creation. Ignored on set.",
            "readOnly": true
          }
        },
        "description": "A policy on a StackPath resource"
      },
      "paginationPageInfo": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "string",
            "description": "The total number of items in the dataset"
          },
          "hasPreviousPage": {
            "type": "boolean",
            "format": "boolean",
            "description": "Whether or not a previous page of data exists"
          },
          "hasNextPage": {
            "type": "boolean",
            "format": "boolean",
            "description": "Whether or not another page of data is available"
          },
          "startCursor": {
            "type": "string",
            "description": "The cursor for the first item in the set of data returned"
          },
          "endCursor": {
            "type": "string",
            "description": "The cursor for the last item in the set of data returned"
          }
        },
        "description": "Information about a paginated response\n\nThis is modeled after the GraphQL Relay spec to support both cursor based pagination and traditional offset based pagination."
      },
      "stackCreateStackRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The ID of the account to create the stack for"
          },
          "slug": {
            "type": "string",
            "description": "The StackPath stack's friendly, text-based unique identifier\n\nThis can be used in place of a stack's ID in most situations to identify a stack. It can be no larger than 30 characters, each being a lowercase letter, number, or dash. It also cannot start with a dash, end with a dash, or have consecutive dashes.If this value is not present, it is derived from the name. This value cannot be updated."
          },
          "name": {
            "type": "string",
            "description": "The stack's name"
          }
        }
      },
      "stackCreateStackResponse": {
        "type": "object",
        "properties": {
          "stack": {
            "$ref": "#/components/schemas/stackStack"
          }
        }
      },
      "stackGetIAMPolicyResponse": {
        "type": "object",
        "properties": {
          "stackId": {
            "type": "string",
            "description": "The ID of the StackPath stack the policy is on"
          },
          "policy": {
            "$ref": "#/components/schemas/iamPolicy"
          }
        },
        "description": "A response from a request to retrieve a StackPath stack's policy"
      },
      "stackGetStacksResponse": {
        "type": "object",
        "properties": {
          "pageInfo": {
            "$ref": "#/components/schemas/paginationPageInfo"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/stackStack"
            }
          }
        }
      },
      "stackSetIAMPolicyRequest": {
        "type": "object",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/iamPolicy"
          }
        },
        "title": ""
      },
      "stackSetIAMPolicyResponse": {
        "type": "object",
        "properties": {
          "stackId": {
            "type": "string",
            "description": "The ID of the StackPath stack the policy is on"
          },
          "policy": {
            "$ref": "#/components/schemas/iamPolicy"
          }
        },
        "description": "A response from a request to set a StackPath stack's policy"
      },
      "stackStack": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A stack's unique identifier"
          },
          "accountId": {
            "type": "string",
            "description": "The ID of the account that a stack belongs to"
          },
          "slug": {
            "type": "string",
            "description": "A stack's human-friendly identifier\n\nThis can be used in place of a stack's ID in most situations to identify a stack. It can be no longer than 30 characters, each being a lowercase letter, number, or dash. It also cannot start with a dash, end with a dash, or have consecutive dashes. This value can be provided on creation or is derived from the stack's name if a slug isn't provided. This value cannot be updated once it's created."
          },
          "name": {
            "type": "string",
            "description": "A stack's name"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date a stack was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date a stack was last updated"
          },
          "status": {
            "$ref": "#/components/schemas/stackStackStatus"
          }
        },
        "description": "A stack"
      },
      "stackStackStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "ACTIVE",
          "DISABLED",
          "SUSPENDED",
          "BILLING_SUSPENDED",
          "CANCELLED",
          "DELETED"
        ],
        "default": "PENDING",
        "description": "A stack's status"
      },
      "stackTestIAMPermissionsRequest": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of permissions to test"
          }
        },
        "title": ""
      },
      "stackTestIAMPermissionsResponse": {
        "type": "object",
        "properties": {
          "stackId": {
            "type": "string",
            "description": "The ID of the StackPath stack the permissions were tested on"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of permissions that the calling user does have on the stack"
          }
        },
        "description": "A response from a request to test permissions on a StackPath account"
      },
      "stackUpdateStackResponse": {
        "type": "object",
        "properties": {
          "stack": {
            "$ref": "#/components/schemas/stackStack"
          }
        }
      },
      "stackpath.rpc.BadRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "fieldViolations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.BadRequest.FieldViolation"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.BadRequest.FieldViolation": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.Help": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "links": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.Help.Link"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.Help.Link": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.LocalizedMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "locale": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpath.rpc.PreconditionFailure": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "violations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.PreconditionFailure.Violation"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.PreconditionFailure.Violation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.QuotaFailure": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "violations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.QuotaFailure.Violation"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.QuotaFailure.Violation": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.RequestInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "requestId": {
                "type": "string"
              },
              "servingData": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpath.rpc.ResourceInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string"
              },
              "resourceName": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpath.rpc.RetryInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "retryDelay": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpathapiStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiStatusDetail"
            }
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}
