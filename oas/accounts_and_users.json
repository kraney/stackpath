{
  "openapi": "3.0.0",
  "info": {
    "title": "Accounts and Users",
    "version": "1.0.0",
    "contact": {
      "name": "StackPath Support",
      "url": "https://support.stackpath.com/"
    }
  },
  "paths": {
    "/identity/v1/accounts/{account_id}": {
      "get": {
        "summary": "Get an account",
        "operationId": "GetAccount",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityGetAccountResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "description": "An account ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Accounts"
        ]
      }
    },
    "/identity/v1/accounts/{account_id}/iam/policy": {
      "get": {
        "summary": "Get all account policies",
        "operationId": "GetIAMPolicy",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityGetIAMPolicyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "description": "An account ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Account Policies"
        ]
      },
      "put": {
        "summary": "Update account policies",
        "operationId": "SetIAMPolicy",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identitySetIAMPolicyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "description": "An account ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/identitySetIAMPolicyRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Account Policies"
        ]
      }
    },
    "/identity/v1/accounts/{account_id}/iam/test": {
      "post": {
        "summary": "Test account policies",
        "operationId": "TestIAMPermissions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityTestIAMPermissionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "description": "An account ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/identityTestIAMPermissionsRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Account Policies"
        ]
      }
    },
    "/identity/v1/accounts/{account_id}/users": {
      "get": {
        "summary": "Get all users",
        "operationId": "GetAccountUsers",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityGetAccountUsersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "description": "An account ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.first",
            "description": "The number of items desired.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.after",
            "description": "The cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.filter",
            "description": "SQL-style constraint filters.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.sort_by",
            "description": "Sort the response by the given field.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create a user",
        "description": "The new user will receive an email to set their password.",
        "operationId": "CreateUser",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityCreateUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "account_id",
            "description": "An account ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/identityCreateUserRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/identity/v1/oauth2/token": {
      "post": {
        "summary": "Generate a bearer token",
        "description": "Authenticate to the StackPath API. Use the resulting bearer token to authorize other StackPath API calls. API credentials can be generated in the [StackPath customer portal](https://control.stackpath.com/).",
        "operationId": "GetAccessToken",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityGetAccessTokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/identityGetAccessTokenRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Authentication"
        ],
        "security": []
      }
    },
    "/identity/v1/users/{user_id}": {
      "get": {
        "summary": "Get a user",
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityGetUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "A user ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete a user",
        "operationId": "DeleteUser",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "A user ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update a user",
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityUpdateUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "A user ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/identityUpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Users"
        ],
        "description": "Update a user's non-essential properties, such as their phone number."
      }
    },
    "/identity/v1/users/{user_id}/change_email": {
      "post": {
        "summary": "Update a user's email address",
        "description": "This immediately invalidates the user's StackPath customer portal logins and API tokens.",
        "operationId": "ChangeUserEmail",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "A user ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/identityChangeUserEmailRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/identity/v1/users/{user_id}/credentials": {
      "get": {
        "summary": "Get all API credentials",
        "operationId": "GetUserCredentials",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityGetUserCredentialsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "A user ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.first",
            "description": "The number of items desired.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.after",
            "description": "The cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.filter",
            "description": "SQL-style constraint filters.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_request.sort_by",
            "description": "Sort the response by the given field.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      },
      "post": {
        "summary": "Create API credentials",
        "description": "The client secret is returned only once and is not stored by StackPath. Please take care to save this response.",
        "operationId": "CreateUserCredential",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityCreateUserCredentialResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "A user ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/identityCreateUserCredentialRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/identity/v1/users/{user_id}/credentials/{credential_id}": {
      "delete": {
        "summary": "Delete API credentials",
        "operationId": "DeleteUserCredential",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "A user ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credential_id",
            "description": "The ID of the API credentials to remove",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/identity/v1/users/{user_id}/credentials/{credential_id}/rotate": {
      "post": {
        "summary": "Create a new API secret",
        "description": "The client secret is returned only once and is not stored by StackPath. Please take care to save this response.",
        "operationId": "RotateUserCredentialSecret",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identityRotateUserCredentialSecretResponse"
                }
              }
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          },
          "default": {
            "description": "Default error structure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stackpathapiStatus"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "A user ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "credential_id",
            "description": "The ID of the API client credential to rotate secrets for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "externalDocs": {
    "description": "The StackPath API Reference",
    "url": "https://stackpath.dev/reference"
  },
  "x-explorer-enabled": true,
  "x-proxy-enabled": true,
  "x-samples-enabled": true,
  "x-samples-languages": [
    "curl",
    "node",
    "ruby",
    "javascript",
    "python"
  ],
  "servers": [
    {
      "url": "https://gateway.stackpath.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://gateway.stackpath.com/identity/v1/oauth2/token",
            "scopes": {}
          }
        }
      }
    },
    "schemas": {
      "PolicyBinding": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The name of the role for this binding.\n\nThis is either roles/<name> or accounts/<id>/roles/<name>."
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The members assigned to the roles in this binding.\n\nThis is user:<name>."
          }
        },
        "description": "An assignment of members to roles"
      },
      "apiStatusDetail": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string"
          }
        },
        "required": [
          "@type"
        ],
        "discriminator": {
          "propertyName": "@type"
        }
      },
      "iamPolicy": {
        "type": "object",
        "properties": {
          "bindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyBinding"
            },
            "description": "Bindings to assign members to roles"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "description": "The current update number used to ensure updates happen to the expected version.\n\nOn first update this must be 0 and on each successive update this must be the last known version. When getting or as the result of a set, this will be the current version."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this policy was created.\n\nAlways present on get, ignored on set.",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this policy was last updated.\n\nCould be absent on get if not updated since initial creation. Ignored on set.",
            "readOnly": true
          }
        },
        "description": "A policy on a StackPath resource"
      },
      "identityAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A StackPath account's unique identifier"
          },
          "parentId": {
            "type": "string",
            "description": "The ID of an account that a StackPath account may belong to"
          },
          "name": {
            "type": "string",
            "description": "A StackPath account's name"
          },
          "rootUserId": {
            "type": "string",
            "description": "The ID of a StackPath account's primary user"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date a StackPath account was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date a StackPath account was last updated"
          }
        },
        "description": "A StackPath account\n\nAn account is the top-most entity in the StackPath ecosystem. Accounts are associated with users and stacks (which in turn are associated with purchased products and services)."
      },
      "identityAccountLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "An account link's unique identifier"
          },
          "provider": {
            "type": "string",
            "description": "The name of the identity provider powering an account link"
          },
          "remoteId": {
            "type": "string",
            "description": "A StackPath account's foreign key at an identity provider"
          },
          "accountId": {
            "type": "string",
            "description": "The ID of the StackPath account linked to an identify provider"
          }
        },
        "description": "A relationship between a StackPath account and their identity providers"
      },
      "identityChangeUserEmailRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The user's new email address"
          },
          "password": {
            "type": "string",
            "description": "The user's login password"
          }
        },
        "title": ""
      },
      "identityCreateUserCredentialRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the new API credentials"
          }
        },
        "title": ""
      },
      "identityCreateUserCredentialResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The new API credential's unique identifier"
          },
          "name": {
            "type": "string",
            "description": "The new API credential's name"
          },
          "clientId": {
            "type": "string",
            "description": "The new API credential's OAuth2 client ID"
          },
          "clientSecret": {
            "type": "string",
            "description": "The new API credential's OAuth2 client secret\n\nThe client secret is returned only once and is not stored by StackPath. Please take care to save this response."
          }
        },
        "description": "A response from a request to create new user API credentials"
      },
      "identityCreateUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The user's email address\n\nThe user will use this as their login name at the StackPath customer portal"
          },
          "name": {
            "type": "string",
            "description": "The user's name"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The user's phone number"
          },
          "authorizedApplications": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of application slugs the user should have access to\n\nIf no application slugs are applied then the user will have access to the StackPath customer portal and API by default."
          }
        },
        "description": "",
        "title": ""
      },
      "identityCreateUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/identityUser"
          }
        },
        "description": "A response from a request to create a new StackPath user"
      },
      "identityGetAccessTokenRequest": {
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "The OAuth2 grant type\n\nCurrently, only the \"client_credentials\" grant type is supported.",
            "default": "client_credentials"
          },
          "client_id": {
            "type": "string",
            "description": "The client ID from your API credential"
          },
          "client_secret": {
            "type": "string",
            "description": "The client secret from your API credential\n\nFor security reasons, client secrets are not stored in StackPath's internal systems after they are generated. Please record your API client secret after generating it."
          }
        },
        "description": "",
        "title": ""
      },
      "identityGetAccessTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The access token to be provided as a Bearer token in the Authorization header to API calls"
          },
          "token_type": {
            "type": "string",
            "description": "The token's type\n\nCurrently, only bearer tokens are supported"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "The token's expiration time, measured in seconds"
          }
        },
        "description": "A response from a request to generate an OAuth2 access token from API credentials\n\nUse the resulting token to authorize subsequest StackPath API calls"
      },
      "identityGetAccountResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/identityAccount"
          }
        },
        "description": "A response from a request to retrieve a StackPath account"
      },
      "identityGetAccountUsersResponse": {
        "type": "object",
        "properties": {
          "pageInfo": {
            "$ref": "#/components/schemas/paginationPageInfo"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identityUser"
            },
            "description": "The requested user accounts"
          }
        },
        "description": "A response from a request to retrieve a StackPath account's users"
      },
      "identityGetIAMPolicyResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The ID of the StackPath account the policy is on"
          },
          "policy": {
            "$ref": "#/components/schemas/iamPolicy"
          }
        },
        "description": "A response from a request to retrieve a StackPath account's policy"
      },
      "identityGetUserCredentialsResponse": {
        "type": "object",
        "properties": {
          "pageInfo": {
            "$ref": "#/components/schemas/paginationPageInfo"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identityUserCredential"
            },
            "description": "The requested user API credentials"
          }
        },
        "description": "A response from a request to retrieve a user's API credentials"
      },
      "identityGetUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/identityUser"
          }
        },
        "description": "A response from a request to retrieve a StackPath user account"
      },
      "identityProvider": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "An identity provider's unique identidier"
          },
          "name": {
            "type": "string",
            "description": "An identity provider's name"
          }
        },
        "description": "An identity provider\n\nIdentity providers handle user authentication to the StackPath customer portal. They can be third party like Google or Facebook, or StackPath can provide identity resources for users."
      },
      "identityRotateUserCredentialSecretResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The API credential's unique identifier"
          },
          "name": {
            "type": "string",
            "description": "The API credential's name"
          },
          "clientId": {
            "type": "string",
            "description": "The API credential's OAuth2 client ID"
          },
          "clientSecret": {
            "type": "string",
            "description": "The API credential's OAuth2 client secret\n\nThe client secret is returned only once and is not stored by StackPath. Please take care to save this response."
          }
        },
        "description": "A response from a request to generate a new API client secret for a user"
      },
      "identitySetIAMPolicyRequest": {
        "type": "object",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/iamPolicy"
          }
        },
        "title": ""
      },
      "identitySetIAMPolicyResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The ID of the StackPath account the policy is on"
          },
          "policy": {
            "$ref": "#/components/schemas/iamPolicy"
          }
        },
        "description": "A response from a request to set a StackPath account's policy"
      },
      "identityTestIAMPermissionsRequest": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of permissions to test"
          }
        },
        "title": ""
      },
      "identityTestIAMPermissionsResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The ID of the StackPath account the permissions were tested on"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of permissions that the calling user does have on the account"
          }
        },
        "description": "A response from a request to test permissions on a StackPath account"
      },
      "identityUpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user's new name"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The user's new phone number"
          }
        },
        "title": ""
      },
      "identityUpdateUserResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "format": "boolean",
            "description": "Whether or not the request was successful"
          }
        },
        "description": "A response from a request to update a user's non-essential properties (phone number, etc)"
      },
      "identityUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A user's unique identifier"
          },
          "email": {
            "type": "string",
            "description": "A user's email address\n\nEmail addresses are used as login names to the StackPath customer portal"
          },
          "status": {
            "$ref": "#/components/schemas/identityUserStatus"
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identityUserIdentity"
            },
            "description": "A user's underlying authentication identities"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identityAccount"
            },
            "description": "The accounts that a user belongs to"
          },
          "name": {
            "type": "string",
            "description": "A user's name"
          },
          "phoneNumber": {
            "type": "string",
            "description": "A user's phone number"
          }
        },
        "description": "A user account\n\nUsers can interact with the StackPath customer portal and API."
      },
      "identityUserCredential": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "An API credential's unique identifier"
          },
          "name": {
            "type": "string",
            "description": "An API credential's name\n\nAPI credential names are typically associated with the user's application and operating environment"
          },
          "clientId": {
            "type": "string",
            "description": "An API credential's OAuth2 client ID"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date an API credential was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date an API credential was last updated"
          }
        },
        "description": "User API credentials\n\nAPI credentials are used to generate authorization tokens for use with the StackPath API. Generating API credentials creates a client ID and secret. Client secrets are exposed to the user only once on creation and are not stored at StackPath. Please record your client secret after generating API credentials.\n\nStackPath recommends using one set of API credentials per application and operating environment."
      },
      "identityUserIdentity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "identityId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/identityProvider"
          }
        }
      },
      "identityUserStatus": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "ENABLED",
          "DISABLED"
        ],
        "default": "UNKNOWN",
        "description": "A user's status\n\n- UNKNOWN: StackPath is unable to determine a user's status\n - ENABLED: A user is enabled and can log into their StackPath services\n - DISABLED: A user is disabled and cannot log into the StackPath customer portal or place API calls"
      },
      "paginationPageInfo": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "string",
            "description": "The total number of items in the dataset"
          },
          "hasPreviousPage": {
            "type": "boolean",
            "format": "boolean",
            "description": "Whether or not a previous page of data exists"
          },
          "hasNextPage": {
            "type": "boolean",
            "format": "boolean",
            "description": "Whether or not another page of data is available"
          },
          "startCursor": {
            "type": "string",
            "description": "The cursor for the first item in the set of data returned"
          },
          "endCursor": {
            "type": "string",
            "description": "The cursor for the last item in the set of data returned"
          }
        },
        "description": "Information about a paginated response\n\nThis is modeled after the GraphQL Relay spec to support both cursor based pagination and traditional offset based pagination."
      },
      "stackpath.rpc.BadRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "fieldViolations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.BadRequest.FieldViolation"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.BadRequest.FieldViolation": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.Help": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "links": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.Help.Link"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.Help.Link": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.LocalizedMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "locale": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpath.rpc.PreconditionFailure": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "violations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.PreconditionFailure.Violation"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.PreconditionFailure.Violation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.QuotaFailure": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "violations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/stackpath.rpc.QuotaFailure.Violation"
                }
              }
            }
          }
        ]
      },
      "stackpath.rpc.QuotaFailure.Violation": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "stackpath.rpc.RequestInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "requestId": {
                "type": "string"
              },
              "servingData": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpath.rpc.ResourceInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string"
              },
              "resourceName": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpath.rpc.RetryInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/apiStatusDetail"
          },
          {
            "type": "object",
            "properties": {
              "retryDelay": {
                "type": "string"
              }
            }
          }
        ]
      },
      "stackpathapiStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiStatusDetail"
            }
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}
